#! /bin/sh -e
if [ $# -ne 1 ]; then 
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1  
fi
case "$1" in 
    -patch) patch -f --no-backup-if-mismatch -p1 < $0;;
    -unpatch) patch -f --no-backup-if-mismatch -R -p1 < $0;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1;;
esac

exit 0

@DPATCH@
diff -rN -u old-ion3/libmainloop/signal.c new-ion3/libmainloop/signal.c
--- old-ion3/libmainloop/signal.c	2006-10-31 19:59:24.000000000 +0100
+++ new-ion3/libmainloop/signal.c	2006-10-31 19:59:24.000000000 +0100
@@ -73,12 +73,14 @@
         val.it_value.tv_sec=queue->when.tv_sec-val.it_value.tv_sec;
         if(val.it_value.tv_usec<0)
             val.it_value.tv_usec=0;
-        while(val.it_value.tv_usec>=USECS_IN_SEC){
-            val.it_value.tv_sec++;
-            val.it_value.tv_usec-=USECS_IN_SEC;
-        }
-        if(val.it_value.tv_sec<0)
-            val.it_value.tv_sec=0;
+        /* POSIX and some kernels have been designed by absolute morons and 
+         * contain idiotic artificial restrictions on the value of tv_usec, 
+         * that will only cause more code being run and clock cycles being 
+         * spent to do the same thing, as the kernel will in any case convert
+         * the seconds to some other units.
+         */
+         val.it_value.tv_sec+=val.it_value.tv_usec/USECS_IN_SEC;
+         val.it_value.tv_usec%=USECS_IN_SEC;
     }else{
         had_tmr=TRUE;
         return;

