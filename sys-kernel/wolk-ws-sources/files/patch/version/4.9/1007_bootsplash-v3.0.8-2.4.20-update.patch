--- linux-2.4.21-53.orig/drivers/video/fbcon-splash.c	2003-08-27 00:50:41.000000000 +0200
+++ linux-2.4.21-53/drivers/video/fbcon-splash.c	2003-09-05 13:06:02.000000000 +0200
@@ -25,12 +25,31 @@
 #include "fbcon-splash.h"
 #include "fbcon-jpegdec.h"
 
-#define SPLASH_VERSION "3.0.7-2003/03/10"
+#define SPLASH_VERSION "3.0.8-2003/09/05"
 
 #ifdef CONFIG_BLK_DEV_INITRD
-unsigned char signature[] = "BOOTSPL1SPL2SPL3";
+static unsigned char signature[] = "BOOTSPL1SPL2SPL3";
 #endif
 
+/* These errors have to match fbcon-jpegdec.h */
+static unsigned char *jpg_errors[] = {
+	"no SOI found", 
+	"not 8 bit", 
+	"height mismatch", 
+	"width mismatch",
+	"bad width or height", 
+	"too many COMPPs", 
+	"illegal HV", 
+	"quant table selector",
+	"picture is not YCBCR 221111",
+	"unknow CID in scan",
+	"dct not sequential",
+	"wrong marker",
+	"no EOI",
+	"bad tables",
+	"depth mismatch"
+};
+
 /* from drivers/char/console.c */
 extern void con_remap_def_color(int currcons, int new_color);
 
@@ -198,13 +217,13 @@
     size = ((width + 15) & ~15) * ((height + 15) & ~15) * (depth >> 3);
     mem = vmalloc(size);
     if (!mem) {
-	printk(KERN_INFO "No memory for decoded picture!\n");
+	printk(KERN_INFO "bootsplash: no memory for decoded picture.\n");
 	return -1;
     }
     if (!decdata)
 	decdata = vmalloc(sizeof(*decdata));
     if ((err = jpeg_decode(jpeg, mem, ((width + 15) & ~15), ((height + 15) & ~15), depth, decdata)))
-	  printk(KERN_INFO "error %d while decompressing picture.\n",err);
+	  printk(KERN_INFO "bootsplash: error while decompressing picture: %s (%d)\n",jpg_errors[err-1], err);
     vfree(mem);
     return err ? -1 : 0;
 }
@@ -267,7 +286,7 @@
 	int palcnt = 0;
 	struct display *p;
 
-	printk(KERN_INFO "Looking for splash picture...");
+	printk(KERN_INFO "bootsplash %s: looking for picture...", SPLASH_VERSION);
 
 	p = &fb_display[0];
         silentsize = 0;
@@ -507,7 +526,7 @@
 
 	if (found==1) {
 		printk(KERN_WARNING "bootsplash: Using deprecated v1 header. Updating your splash utility recommended.\n");
-		printk(KERN_INFO    "bootsplash: Find the latest version at ftp.suse.com/pub/people/stepan/bootsplash/\n");
+		printk(KERN_INFO    "bootsplash: Find the latest version at http://www.bootsplash.org/\n");
 	}
 
 	/* copy data so that initrd memory can be freed. */
@@ -525,7 +544,11 @@
 {
     struct display *p;
 
+    if (!splash_shown || !splash_usesilent)
+        return 0;
+
     p = &fb_display[0];
+
     if (!p || !p->splash_data || !p->splash_data->splash_state || !p->conp)
 	return 0;
     if (fg_console != p->conp->vc_num)
@@ -591,7 +614,7 @@
 
 	if (!linux_splash) {
 		linux_splash_size = 0;
-		printk(KERN_INFO "Not enough memory for splash screen.\n");
+		printk(KERN_INFO "bootsplash: not enough memory.\n");
 		splash_off(p);
 		return -3;
 	}
@@ -603,11 +626,11 @@
 		p->splash_data->oldscreen_base = p->screen_base;
 
 	if (p->splash_data->splash_silentjpeg && p->splash_data->splash_dosilent) {
-		printk(KERN_INFO "Got silent jpeg.\n");
+		printk(KERN_INFO "bootsplash: silent jpeg found.\n");
 		/* fill area after framebuffer with other jpeg */
 		if ((err = jpeg_decode(p->splash_data->splash_silentjpeg, linux_splash, 
 			 ((width + 15) & ~15), ((height + 15) & ~15), depth, decdata))) {
-			printk(KERN_INFO "Error %d while decompressing silent jpeg.\n", err);
+			printk(KERN_INFO "bootsplash: error while decompressing silent picture: %s (%d)\n", jpg_errors[err-1], err);
 			p->screen_base = p->splash_data->oldscreen_base;
 			p->splash_data->splash_dosilent = 0;
 		} else {
@@ -623,7 +646,7 @@
 
 	if ((err = jpeg_decode(p->splash_data->splash_jpeg, linux_splash, 
 		 ((width + 15) & ~15), ((height + 15) & ~15), depth, decdata))) {
-		printk(KERN_INFO "Error %d while decompressing splash screen.\n", err);
+		printk(KERN_INFO "bootsplash: error while decompressing picture: %s (%d) .\n", jpg_errors[err-1], err);
 		vfree(linux_splash);
 		linux_splash = 0;
 		linux_splash_size = 0;
@@ -700,7 +723,7 @@
 
 static int splash_status(struct display *p)
 {
-	printk(KERN_INFO "Splash status on console %d changed to %s\n", p->conp->vc_num, p->splash_data && p->splash_data->splash_state ? "on" : "off");
+	printk(KERN_INFO "bootsplash: status on console %d changed to %s\n", p->conp->vc_num, p->splash_data && p->splash_data->splash_state ? "on" : "off");
 
 	if (fg_console == p->conp->vc_num)
 		splash_prepare(p);
