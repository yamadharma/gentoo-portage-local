#!/sbin/runscript
# -*- mode: sh -*-
# Copyright 1999-2002 Gentoo Technologies, Inc.
# Distributed under the terms of the GNU General Public License, v2 or later

#opts="start stop reload restart"

# {{{

FILES="default"
program=base_server/caudiumloader.pike
servicename="the Caudium World Wide Web server"

caudiumhome=/usr/lib/caudium

# }}}

preamble ()
{

if [ "x$PIKE_NO_DEFAULT_PATHS" = "x" ]; 
    then
    # Pike default Master-program
    if [ "x$PIKE_MASTER" = "x" ]
	then
	if [ -d share/pike ]; 
	    then
            # This is used with localinstall
	    DEFINES="$DEFINES -Ishare/pike/include"
	    PIKE_MODULE_PATH="$PIKE_MODULE_PATH:share/pike/modules"
	fi
	if [ -f lib/master.pike ]
	    then
	    DEFINES="$DEFINES -mlib/master.pike -Ilib/include"
	    PIKE_MODULE_PATH="$PIKE_MODULE_PATH:lib/modules"
	elif [ -f lib/pike/master.pike ] 
	    then
	    DEFINES="$DEFINES -mlib/pike/master.pike -Ilib/pike/include"
	    PIKE_MODULE_PATH="$PIKE_MODULE_PATH:lib/pike/modules"
	fi
	export PIKE_MODULE_PATH
    else
        # This is useful when using several different Pikes.
        # Specify include and module paths with
        # PIKE_INCLUDE_PATH and PIKE_MODULE_PATH
        # they are handled automatically by the master,
        # so no need to do it here.
	DEFINES="$DEFINES -m$PIKE_MASTER"
    fi
fi

# Extra module-path
if [ -d etc/modules ]
    then
    DEFINES="$DEFINES -Metc/modules -Mlocal_pmods"
fi
  
# Extra include-path
if [ -d etc/include ]
    then
    DEFINES="$DEFINES -Ietc/include"
fi
    
# Extra include-path (2)
if [ -d base_server ]
    then
    DEFINES="$DEFINES -Ibase_server"
fi

# Extra program-path
DEFINES="$DEFINES -P${caudiumhome}"

config_dir=1
CAUDIUM_CONFIGDIR="${CONFIGDIR}"
export CAUDIUM_CONFIGDIR

# Find ourselves a Pike

pike=pike
if [ "$pikever" != "" ]; 
    then 
    if [ -x bin/caudium-$pikever ] ; 
	then  
	pike=bin/caudium-$pikever; 
    elif [ -x bin/pike-$pikever ] ; 
	then 
	pike=bin/pike-$pikever;
    elif [ -x bin/caudium ]; 
	then 
	pike=bin/caudium;
    elif [ -x bin/pike ]; 
	then 
	pike=bin/caudium;
    else
	echo "Cannot find a pike with version $pikever"
	exit 1
    fi
else
    if [ -x bin/caudium ] ; 
	then  
	pike=bin/caudium; 
    elif [ -x bin/pike ] ; 
	then 
	pike=bin/pike; 
    fi
fi


PIKE_VERSION=`$pike -e 'string v; int rel;sscanf(version(), "Pike v%s release %d", v, rel); write(v+"."+rel);'`

if [ -f "lib/$PIKE_VERSION/Caudium.so" ]; 
    then
    DEFINES="-Mlib/$PIKE_VERSION/ $DEFINES"
else
    echo "Cannot find Caudium Pike modules for Pike version $PIKE_VERSION."
    exit 1
fi

# FIXME
precmd=""

}

#
# Some useful functions
#

rotate () 
{
    b=5;
    for a in 4 3 2 1 ; 
      do 
      mv -f $1.$a $1.$b 2> /dev/null;  
      b=$a; 
    done
}

start_caudium ()
{
    if [ "$nocaudium" = "" -a "x${CONFIGDIR}" != "x../configurations/" ]
	then
	args="-DCAUDIUM -DCAUDIUM_CACHE -DROXEN $DEBUG $DEFINES $ARGS $program --config-dir=${CONFIGDIR} $pass"
    elif [ "$nocaudium" = "1" ] ; 
	then
	args="$DEBUG $DEFINES $ARGS $program $pass"
    else
	args="-DCAUDIUM -DCAUDIUM_CACHE -DROXEN $DEBUG $DEFINES $ARGS $program $pass"
    fi
    echo "PIKE_MODULE_PATH=$PIKE_MODULE_PATH"
    echo Executing $precmd $pike $args $@
    $precmd $pike $args $@
}

depend () 
{
    need net
}

start () 
{
    ebegin "Starting ${servicename}"
    cd ${caudiumhome}
    preamble
#	start-stop-daemon --start --quiet --pidfile ${pidfile} --exec ${caudiumhome}/start -- --pid-file=${pidfile} ${flags}
    
    rotate ${LOGDIR}/debug/${FILES}
    
    start_caudium 2>>${LOGDIR}/debug/${FILES}.1 1>&2 &
    
    eend $?
}

stop () 
{
    ebegin "Stopping ${servicename}"
#    start-stop-daemon --stop --quiet --exec ${caudiumhome}/start
    killall caudium
#	start-stop-daemon --stop --quiet --pidfile ${pidfile}
    eend $?
}

