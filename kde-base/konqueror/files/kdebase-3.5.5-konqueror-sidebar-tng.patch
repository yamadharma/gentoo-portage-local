diff -purN kdebase-3.5.3.orig/konqueror/sidebar/sidebar_widget.cpp kdebase-3.5.3/konqueror/sidebar/sidebar_widget.cpp
--- kdebase-3.5.3.orig/konqueror/sidebar/sidebar_widget.cpp	2006-05-22 13:12:52.000000000 -0500
+++ kdebase-3.5.3/konqueror/sidebar/sidebar_widget.cpp	2006-07-17 20:19:36.000000000 -0500
@@ -25,6 +25,11 @@
 #include <qwhatsthis.h>
 #include <qlayout.h>
 #include <qstringlist.h>
+#include <qdockwindow.h>
+#include <qlabel.h>
+#include <qtoolbox.h>
+#include <qpainter.h>
+#include <kpushbutton.h>
 
 #include <klocale.h>
 #include <ksimpleconfig.h>
@@ -48,813 +53,595 @@
 #include "sidebar_widget.h"
 #include "sidebar_widget.moc"
 
+// Dunno if this is correct or still needed in thi spatch... RG 06/17/06
+static QString findFileName(QString &tmp, bool universal, const QString &profile);
 
-addBackEnd::addBackEnd(QWidget *parent,class QPopupMenu *addmenu,bool universal,const QString &currentProfile, const char *name)
- : QObject(parent,name),
-   m_parent(parent)
-{
-	m_universal=universal;
-	m_currentProfile = currentProfile;
-	menu = addmenu;
-	connect(menu,SIGNAL(aboutToShow()),this,SLOT(aboutToShowAddMenu()));
-	connect(menu,SIGNAL(activated(int)),this,SLOT(activatedAddMenu(int)));
-}
-
-void addBackEnd::aboutToShowAddMenu()
-{
-	if (!menu)
-		return;
-	KStandardDirs *dirs = KGlobal::dirs();
-	QStringList list = dirs->findAllResources("data","konqsidebartng/add/*.desktop",true,true);
-	libNames.setAutoDelete(true);
-	libNames.resize(0);
-	libParam.setAutoDelete(true);
-	libParam.resize(0);
-	menu->clear();
-	int i = 0;
+static const char * const close_xpm[] = {
+	"12 12 2 1",
+	"# c #000000",
+	". c None",
+	"............",
+	"............",
+	"..##....##..",
+	"...##..##...",
+	"....####....",
+	".....##.....",
+	"....####....",
+	"...##..##...",
+	"..##....##..",
+	"............",
+	"............",
+	"............"
+};
+
+class Sidebar_HeaderButton : public KPushButton
+{
+public:
+       Sidebar_HeaderButton(QWidget *parent = 0, const char *name = 0)
+		: KPushButton(parent, name),
+		  m_drawBorder(false)
+       {
+		setBackgroundOrigin(AncestorOrigin);
+		setBackgroundMode(X11ParentRelative);
+	}
+
+protected:
+	void enterEvent(QEvent *);
+	void leaveEvent(QEvent *);
+
+private:
+	virtual void drawButton(QPainter *);
+
+	bool m_drawBorder;
+};
+
+Sidebar_Widget::Sidebar_Widget(QWidget *parent,
+                               KParts::ReadOnlyPart *part,
+                               const char *name,
+                               bool universalMode,
+                               const QString &currentProfile)
+        : QWidget(parent, name),
+          m_part(part),
+          m_universalMode(universalMode),
+          m_profile(currentProfile),
+          m_layout(0),
+          m_buttonPopup(0),
+          m_currentButton(0),
+          m_activeButton(0),
+          m_latestViewed(-1),
+          m_userMovedSplitter(false),
+          m_hasStoredUrl(false),
+          m_noUpdate(false),
+          m_initial(true)
+{
+        // kdDebug() << "**** Sidebar_Widget:SidebarWidget()" << endl;
+
+        m_buttons.setAutoDelete(true);
+
+        if (universalMode)
+        {
+                m_config = new KConfig("konqsidebartng_kicker.rc");
+                m_relPath = "konqsidebartng/kicker_entries/";
+                m_path = KGlobal::dirs()->saveLocation("data", m_relPath, true);
+        }
+        else
+        {
+                m_config = new KConfig("konqsidebartng.rc");
+                m_config->setGroup(currentProfile);
+
+                m_relPath = "konqsidebartng/" + currentProfile + "/entries/";
+                m_path = KGlobal::dirs()->saveLocation("data", m_relPath, true);
+        }
 
-	for (QStringList::Iterator it = list.begin(); it != list.end(); ++it, i++ )
-	{
-		KDesktopFile *confFile;
-
-		confFile = new KDesktopFile(*it, true);
-		if (! confFile->tryExec()) {
-			delete confFile;
-			i--;
-			continue;
-		}
-		if (m_universal) {
-			if (confFile->readEntry("X-KDE-KonqSidebarUniversal").upper()!="TRUE") {
-				delete confFile;
-				i--;
-				continue;
-			}
-		} else {
-			if (confFile->readEntry("X-KDE-KonqSidebarBrowser").upper()=="FALSE") {
-				delete confFile;
-				i--;
-				continue;
-			}
-		}
-		QString icon = confFile->readIcon();
-		if (!icon.isEmpty())
-		{
-			menu->insertItem(SmallIcon(icon),
-					 confFile->readEntry("Name"), i);
-		} else {
-			menu->insertItem(confFile->readEntry("Name"), i);
-		}
-		libNames.resize(libNames.size()+1);
-		libNames.insert(libNames.count(), new QString(confFile->readEntry("X-KDE-KonqSidebarAddModule")));
-		libParam.resize(libParam.size()+1);
-		libParam.insert(libParam.count(), new QString(confFile->readEntry("X-KDE-KonqSidebarAddParam")));
-		delete confFile;
-	}
-	menu->insertSeparator();
-	menu->insertItem(i18n("Rollback to System Default"), i);
-}
-
-
-void addBackEnd::doRollBack()
-{
-	if (KMessageBox::warningContinueCancel(m_parent, i18n("<qt>This removes all your entries from the sidebar and adds the system default ones.<BR><B>This procedure is irreversible</B><BR>Do you want to proceed?</qt>"))==KMessageBox::Continue)
-	{
-		KStandardDirs *dirs = KGlobal::dirs();
-		QString loc=dirs->saveLocation("data","konqsidebartng/" + m_currentProfile + "/",true);
-		QDir dir(loc);
-		QStringList dirEntries = dir.entryList( QDir::Dirs | QDir::NoSymLinks );
-		dirEntries.remove(".");
-		dirEntries.remove("..");
-		for ( QStringList::Iterator it = dirEntries.begin(); it != dirEntries.end(); ++it ) {
-			if ((*it)!="add")
-				 KIO::NetAccess::del(KURL( loc+(*it) ), m_parent);
-		}
-		emit initialCopyNeeded();
-	}
-}
-
-
-static QString findFileName(const QString* tmpl,bool universal, const QString &profile) {
-	QString myFile, filename;
-	KStandardDirs *dirs = KGlobal::dirs();
-	QString tmp = *tmpl;
-
-	if (universal) {
-		dirs->saveLocation("data", "konqsidebartng/kicker_entries/", true);
-		tmp.prepend("/konqsidebartng/kicker_entries/");
-	} else {
-		dirs->saveLocation("data", "konqsidebartng/" + profile + "/entries/", true);
-		tmp.prepend("/konqsidebartng/" + profile + "/entries/");
-	}
-	filename = tmp.arg("");
-	myFile = locateLocal("data", filename);
-
-	if (QFile::exists(myFile)) {
-		for (ulong l = 0; l < ULONG_MAX; l++) {
-			filename = tmp.arg(l);
-			myFile = locateLocal("data", filename);
-			if (!QFile::exists(myFile)) {
-				break;
-			} else {
-				myFile = QString::null;
-			}
-		}
-	}
-
-	return myFile;
-}
-
-void addBackEnd::activatedAddMenu(int id)
-{
-	kdDebug() << "activatedAddMenu: " << QString("%1").arg(id) << endl;
-	if (((uint)id) == libNames.size())
-		doRollBack();
-	if(((uint)id) >= libNames.size())
-		return;
+        connect(&m_configTimer, SIGNAL(timeout()), this, SLOT(saveConfig()));
+        readConfig();
 
-	KLibLoader *loader = KLibLoader::self();
+        setSizePolicy(QSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding));
 
-        // try to load the library
-	QString libname = *libNames.at(id);
-        KLibrary *lib = loader->library(QFile::encodeName(libname));
-        if (lib)
-       	{
-		// get the create_ function
-		QString factory("add_");
-		factory = factory+(*libNames.at(id));
-		void *add = lib->symbol(QFile::encodeName(factory));
-
-		if (add)
-		{
-			//call the add function
-			bool (*func)(QString*, QString*, QMap<QString,QString> *);
-			QMap<QString,QString> map;
-			func = (bool (*)(QString*, QString*, QMap<QString,QString> *)) add;
-			QString *tmp = new QString("");
-			if (func(tmp,libParam.at(id),&map))
-			{
-				QString myFile = findFileName(tmp,m_universal,m_currentProfile);
-
-				if (!myFile.isEmpty())
-				{
-					kdDebug() <<"trying to save to file: "<<myFile << endl;
-					KSimpleConfig scf(myFile,false);
-					scf.setGroup("Desktop Entry");
-					for (QMap<QString,QString>::ConstIterator it = map.begin(); it != map.end(); ++it) {
-						kdDebug() <<"writing:"<<it.key()<<" / "<<it.data()<<endl;
-						scf.writePathEntry(it.key(), it.data());
-					}
-					scf.sync();
-					emit updateNeeded();
-
-				} else {
-					kdWarning() << "No unique filename found" << endl;
-				}
-			} else {
-				kdWarning() << "No new entry (error?)" << endl;
-			}
-			delete tmp;
-		}
-	} else {
-		kdWarning() << "libname:" << libNames.at(id)
-			<< " doesn't specify a library!" << endl;
-	}
+        QSplitter *splitterWidget = splitter();
+        if (splitterWidget)
+        {
+                splitterWidget->setResizeMode(parent, QSplitter::FollowSizeHint);
+                splitterWidget->setOpaqueResize(false);
+                connect(splitterWidget, SIGNAL(setRubberbandCalled()),
+                        SLOT(userMovedSplitter()));
+        }
+
+        m_menu = new QPopupMenu(this, "Sidebar_Widget::Menu");
+        connect(m_menu, SIGNAL(activated(int)),
+                this, SLOT(activatedMenu(int)));
+
+        QPopupMenu *addMenu = new QPopupMenu(this, "Sidebar_Widget::addPopup");
+        m_menu->insertItem(i18n("Add New"), addMenu, 0);
+        m_menu->insertSeparator();
+
+        if (m_style == 0)
+        {
+                m_area = new KDockArea(this);
+                m_area->setSizePolicy(QSizePolicy(QSizePolicy::Expanding,
+                                      QSizePolicy::Expanding));
+                m_mainDockWidget = m_area->createDockWidget("free", 0);
+                m_mainDockWidget->setWidget(new QWidget(m_mainDockWidget));
+                m_area->setMainDockWidget(m_mainDockWidget);
+                m_area->setMinimumWidth(0);
+                m_mainDockWidget->setDockSite(KDockWidget::DockTop);
+                m_mainDockWidget->setEnableDocking(KDockWidget::DockNone);
+                connect(m_area, SIGNAL(dockWidgetHasUndocked(KDockWidget*)),
+                        this, SLOT(dockWidgetHasUndocked(KDockWidget*)));
+
+                m_buttonBar = new KMultiTabBar(KMultiTabBar::Vertical, this);
+                m_buttonBar->showActiveTabTexts(true);
+
+                m_widget = 0;
+                m_header = 0;
+                m_tb = 0;
+
+                m_menu->insertItem(i18n("Multiple Views"), 1);
+                m_menu->insertItem(i18n("Show Tabs Left"), 2);
+                m_menu->insertItem(i18n("Show Configuration Button"), 3);
+                connect(m_menu, SIGNAL(aboutToShow()),
+                        this, SLOT(aboutToShowConfigMenu()));
+
+                m_somethingVisible = !m_openViews.isEmpty();
+        }
+        else
+        {
+                m_area = 0;
+                m_mainDockWidget = 0;
+                m_buttonBar = 0;
+
+                m_widget = new QWidget(this);
+                m_widget->setSizePolicy(QSizePolicy(QSizePolicy::Expanding, QSizePolicy::Minimum));
+                m_widget->setMinimumWidth(0);
+
+                QVBoxLayout *layout = new QVBoxLayout(m_widget);
+
+                m_header = new QWidget(m_widget);
+                m_header->hide();
+                layout->addWidget(m_header);
+
+                QHBoxLayout *hlayout = new QHBoxLayout(m_header);
+
+                hlayout->addSpacing(2);
+
+                QLabel *hlabel = new QLabel(i18n("Sidebar"), m_header);
+                QFont f = hlabel->font();
+                f.setBold(true);
+                hlabel->setFont(f);
+                hlayout->add(hlabel);
+
+                hlayout->addStretch(1);
+
+                Sidebar_HeaderButton *htabs = new Sidebar_HeaderButton(m_header);
+                htabs->setFlat(true);
+                htabs->setText(i18n("Tabs"));
+                htabs->setPopup(m_menu);
+                hlayout->add(htabs);
+                hlayout->addSpacing(2);
+
+                Sidebar_HeaderButton *hclose = new Sidebar_HeaderButton(m_header);
+                hclose->setFlat(true);
+                hclose->setPixmap(QPixmap((const char **) close_xpm));
+                hlayout->add(hclose);
+                connect(hclose, SIGNAL(clicked()), part, SLOT(deleteLater()));
+
+                m_tb = new QToolBox(m_widget);
+                connect(m_tb, SIGNAL(currentChanged(int)), this, SLOT(showHidePage(int)));
+                layout->addWidget(m_tb, 1);
+
+                m_menu->insertSeparator();
+                m_menu->insertItem(i18n("Show Header"), 4);
+                m_menu->setItemChecked(4, m_showHeader);
+
+                m_somethingVisible = true;
+        }
+
+       // m_menu->insertItem(i18n("Use Tabs Style"), 5);
+       // m_menu->setItemChecked(5, m_style != 0);
+       m_menu->insertSeparator();
+
+        // #TODO add menu to change sidebar style
+        m_menu->insertItem(SmallIconSet("remove"), i18n("Close Navigation Panel"),
+                           part, SLOT(deleteLater()));
+
+        Sidebar_AddBackEnd *addBackEnd = new Sidebar_AddBackEnd(
+			+                        this, addMenu, "Sidebar_Widget::Sidebar_AddBackEnd");
+        connect(addBackEnd, SIGNAL(updateNeeded()), this, SLOT(updateButtons()));
+        connect(addBackEnd, SIGNAL(initialCopyNeeded()), this, SLOT(finishRollBack()));
+
+        if (!s_skipInitialCopy)
+        {
+                initialCopy();
+                s_skipInitialCopy = true;
+        }
+        else
+        {
+                kdDebug() << "Initial copy skipped" << endl;
+        }
+
+        doLayout();
+
+        createButtons();
+
+       if (m_style != 0 && m_showHeader)
+       {
+               m_header->show();
+       }
 }
 
 
 /**************************************************************/
 /*                      Sidebar_Widget                        */
 /**************************************************************/
+bool Sidebar_Widget::s_skipInitialCopy = false;
 
-Sidebar_Widget::Sidebar_Widget(QWidget *parent, KParts::ReadOnlyPart *par, const char *name,bool universalMode, const QString &currentProfile)
-	:QWidget(parent,name),m_universalMode(universalMode),m_partParent(par),m_currentProfile(currentProfile)
+Sidebar_Widget::~Sidebar_Widget()
 {
-	m_somethingVisible = false;
-	m_initial = true;
-	m_noUpdate = false;
-	m_layout = 0;
-	m_currentButton = 0;
-	m_activeModule = 0;
-	m_userMovedSplitter = false;
-        //kdDebug() << "**** Sidebar_Widget:SidebarWidget()"<<endl;
-	if (universalMode)
-	{
-		m_relPath = "konqsidebartng/kicker_entries/";
-	}
-	else
-	{
-		m_relPath = "konqsidebartng/" + currentProfile + "/entries/";
-	}
-	m_path = KGlobal::dirs()->saveLocation("data", m_relPath, true);
-	m_buttons.setAutoDelete(true);
-	m_hasStoredUrl = false;
-	m_latestViewed = -1;
-	setSizePolicy(QSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding));
-
-	QSplitter *splitterWidget = splitter();
-	if (splitterWidget) {
-		splitterWidget->setResizeMode(parent, QSplitter::FollowSizeHint);
-		splitterWidget->setOpaqueResize( false );
-		connect(splitterWidget,SIGNAL(setRubberbandCalled()),SLOT(userMovedSplitter()));
-	}
-		
-	m_area = new KDockArea(this);
-	m_area->setSizePolicy(QSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding));
-	m_mainDockWidget = m_area->createDockWidget("free", 0);
-	m_mainDockWidget->setWidget(new QWidget(m_mainDockWidget));
-	m_area->setMainDockWidget(m_mainDockWidget);
-	m_area->setMinimumWidth(0);
-	m_mainDockWidget->setDockSite(KDockWidget::DockTop);
-	m_mainDockWidget->setEnableDocking(KDockWidget::DockNone);
-
-   	m_buttonBar = new KMultiTabBar(KMultiTabBar::Vertical,this);
-	m_buttonBar->showActiveTabTexts(true);
-
-	m_menu = new QPopupMenu(this, "Sidebar_Widget::Menu");
-	QPopupMenu *addMenu = new QPopupMenu(this, "Sidebar_Widget::addPopup");
-	m_menu->insertItem(i18n("Add New"), addMenu, 0);
-	m_menu->insertSeparator();
-	m_menu->insertItem(i18n("Multiple Views"), 1);
-	m_menu->insertItem(i18n("Show Tabs Left"), 2);
-	m_menu->insertItem(i18n("Show Configuration Button"), 3);
-	if (!m_universalMode) {
-		m_menu->insertSeparator();
-		m_menu->insertItem(SmallIconSet("remove"), i18n("Close Navigation Panel"),
-				par, SLOT(deleteLater()));
-	}
-        connect(m_menu, SIGNAL(aboutToShow()),
-		this, SLOT(aboutToShowConfigMenu()));
-	connect(m_menu, SIGNAL(activated(int)),
-		this, SLOT(activatedMenu(int)));
-
-	m_buttonPopup = 0;
-	addBackEnd *ab = new addBackEnd(this, addMenu,universalMode,currentProfile,"Sidebar_Widget-addBackEnd");
-	connect(ab, SIGNAL(updateNeeded()),
-		this, SLOT(updateButtons()));
-	connect(ab, SIGNAL(initialCopyNeeded()),
-		this, SLOT(finishRollBack()));
-
-	initialCopy();
-
-	if (universalMode)
-		m_config = new KConfig("konqsidebartng_kicker.rc");
-	else
-	{
-		m_config = new KConfig("konqsidebartng.rc");
-		m_config->setGroup(currentProfile);
-	}
-	connect(&m_configTimer, SIGNAL(timeout()),
-		this, SLOT(saveConfig()));
-        readConfig();
-	m_somethingVisible = !m_openViews.isEmpty();
-	doLayout();
-	QTimer::singleShot(0,this,SLOT(createButtons()));
-	connect(m_area, SIGNAL(dockWidgetHasUndocked(KDockWidget*)),
-		this, SLOT(dockWidgetHasUndocked(KDockWidget*)));
-}
-
-void Sidebar_Widget::addWebSideBar(const KURL& url, const QString& /*name*/) {
-	//kdDebug() << "Web sidebar entry to be added: " << url.url()
-	//	<< " [" << name << "]" << endl;
-
-	// Look for existing ones with this URL
-	KStandardDirs *dirs = KGlobal::dirs();
-	QString list;
-	dirs->saveLocation("data", m_relPath, true);
-	list = locateLocal("data", m_relPath);
-
-	// Go through list to see which ones exist.  Check them for the URL
-	QStringList files = QDir(list).entryList("websidebarplugin*.desktop");
-	for (QStringList::Iterator it = files.begin(); it != files.end(); ++it){
-		KSimpleConfig scf(list + *it, false);
-		scf.setGroup("Desktop Entry");
-		if (scf.readPathEntry("URL", QString::null) == url.url()) {
-			// We already have this one!
-			KMessageBox::information(this,
-					i18n("This entry already exists."));
-			return;
-		}
-	}
-
-	QString tmpl = "websidebarplugin%1.desktop";
-	QString myFile = findFileName(&tmpl,m_universalMode,m_currentProfile);
-
-	if (!myFile.isEmpty()) {
-		KSimpleConfig scf(myFile, false);
-		scf.setGroup("Desktop Entry");
-		scf.writeEntry("Type", "Link");
-		scf.writePathEntry("URL", url.url());
-		scf.writeEntry("Icon", "netscape");
-		scf.writeEntry("Name", i18n("Web SideBar Plugin"));
-		scf.writeEntry("Open", "true");
-		scf.writeEntry("X-KDE-KonqSidebarModule", "konqsidebar_web");
-		scf.sync();
-
-		QTimer::singleShot(0,this,SLOT(updateButtons()));
+        m_config->writeEntry("OpenViews", m_visibleViews);
+        if (m_configTimer.isActive())
+        {
+                saveConfig();
+        }
+
+        delete m_config;
+
+        m_noUpdate = true;
+       Sidebar_ButtonInfo *bi;
+        if (m_style == 0)
+        {
+                for (uint i = 0; i < m_buttons.count(); i++)
+                {
+                        bi = m_buttons.at(i);
+                        if (bi->dock)
+                        {
+                                bi->dock->undock();
+                        }
+                }
+        }
+        else
+	{
+                disconnect(m_tb, SIGNAL(currentChanged(int)), this, SLOT(showHidePage(int)));
+                for (uint i = 0; i < m_buttons.count(); i++)
+                {
+                        bi = m_buttons.at(i);
+                        m_tb->removeItem(bi->module->getWidget());
+                }
 	}
 }
 
-
-void Sidebar_Widget::finishRollBack()
+KInstance  *Sidebar_Widget::getInstance()
 {
-	m_path = KGlobal::dirs()->saveLocation("data",m_relPath,true);
-        initialCopy();
-        QTimer::singleShot(0,this,SLOT(updateButtons()));
+        return ((KonqSidebar*) m_part)->getInstance();
 }
 
-
-void Sidebar_Widget::saveConfig()
+KParts::BrowserExtension *Sidebar_Widget::getExtension()
 {
-	m_config->writeEntry("SingleWidgetMode",m_singleWidgetMode);
-	m_config->writeEntry("ShowExtraButtons",m_showExtraButtons);
-	m_config->writeEntry("ShowTabsLeft", m_showTabsLeft);
-	m_config->writeEntry("HideTabs", m_hideTabs);
-	m_config->writeEntry("SavedWidth",m_savedWidth);
-	m_config->sync();
+	return KParts::BrowserExtension::childObject(m_part);
 }
 
-void Sidebar_Widget::doLayout()
+bool Sidebar_Widget::openURL(const KURL &url)
 {
-	if (m_layout)
-		delete m_layout;
+	m_storedUrl = url;
+        m_hasStoredUrl = true;
+        bool ret = false;
+        Sidebar_ButtonInfo *bi;
 
-	m_layout = new QHBoxLayout(this);
-	if  (m_showTabsLeft)
-	{
-		m_layout->add(m_buttonBar);
-		m_layout->add(m_area);
-		m_buttonBar->setPosition(KMultiTabBar::Left);
-	} else {
-		m_layout->add(m_area);
-		m_layout->add(m_buttonBar);
-		m_buttonBar->setPosition(KMultiTabBar::Right);
-	}
-	m_layout->activate();
-	if (m_hideTabs) m_buttonBar->hide(); 
-		else m_buttonBar->show();
+        if (m_style == 0)
+        {
+                for (unsigned int i = 0; i < m_buttons.count(); i++)
+                {
+                        bi = m_buttons.at(i);
+
+                        if (bi->dock)
+                        {
+                                if ((bi->dock->isVisibleTo(this)) && (bi->module))
+                                {
+                                        ret = true;
+                                        bi->module->openURL(url);
+                                }
+                        }
+                }
+        }
+        else
+        {
+                int index = m_tb->currentIndex();
+                if (index != -1)
+                {
+                        bi = m_buttons.at(index);
+                        if (bi->module)
+                        {
+                                ret = true;
+                                bi->module->openURL(url);
+                        }
+                }
+        }
+
+        return ret;
+}
+
+void Sidebar_Widget::stdAction(const char *name)
+{
+        Sidebar_ButtonInfo *bi = m_activeButton;
+        if (!bi || !bi->module)
+        {
+                return;
+        }
+
+        kdDebug() << "Try calling >active< module's action: " << name << endl;
+
+        int id = bi->module->metaObject()->findSlot(name);
+        if ( id == -1 )
+        {
+                return;
+        }
+
+        kdDebug() << "Action slot was found, it will be called now" << endl;
+        QUObject o[1];
+        bi->module->qt_invoke(id, o);
 }
 
-
-void Sidebar_Widget::aboutToShowConfigMenu()
+QSize Sidebar_Widget::sizeHint() const
 {
-	m_menu->setItemChecked(1, !m_singleWidgetMode);
-	m_menu->setItemChecked(2, m_showTabsLeft);
-	m_menu->setItemChecked(3, m_showExtraButtons);
+	if (m_somethingVisible)
+        {
+                return QSize(m_savedWidth, 200);
+        }
+        return minimumSizeHint();
 }
 
-
-void Sidebar_Widget::initialCopy()
+void Sidebar_Widget::addWebSideBar(const KURL& url, const QString& /* name */)
 {
-	kdDebug()<<"Initial copy"<<endl;
-	QStringList dirtree_dirs;
-	if (m_universalMode)
-		dirtree_dirs = KGlobal::dirs()->findDirs("data","konqsidebartng/kicker_entries/");
-	else
-		dirtree_dirs = KGlobal::dirs()->findDirs("data","konqsidebartng/entries/");
-	if (dirtree_dirs.last()==m_path)
-		return; //oups;
-
-	int nVersion=-1;
-	KSimpleConfig lcfg(m_path+".version");
-	int lVersion=lcfg.readNumEntry("Version",0);
-
-
-	for (QStringList::const_iterator ddit=dirtree_dirs.begin();ddit!=dirtree_dirs.end();++ddit) {
-		QString dirtree_dir=*ddit;
-		if (dirtree_dir == m_path) continue;
-
-
-		kdDebug()<<"************************************ retrieving directory info:"<<dirtree_dir<<endl;
-
-	        if ( !dirtree_dir.isEmpty() && dirtree_dir != m_path )
-        	{
-			KSimpleConfig gcfg(dirtree_dir+".version");
-			int gversion = gcfg.readNumEntry("Version", 1);
-			nVersion=(nVersion>gversion)?nVersion:gversion;
-			if (lVersion >= gversion)
-				continue;
-
-	 	        QDir dir(m_path);
-    		        QStringList entries = dir.entryList( QDir::Files );
-                	QStringList dirEntries = dir.entryList( QDir::Dirs | QDir::NoSymLinks );
-	                dirEntries.remove( "." );
-        	        dirEntries.remove( ".." );
-
-	                QDir globalDir( dirtree_dir );
-        	        Q_ASSERT( globalDir.isReadable() );
-	                // Only copy the entries that don't exist yet in the local dir
-        	        QStringList globalDirEntries = globalDir.entryList();
-                	QStringList::ConstIterator eIt = globalDirEntries.begin();
-	                QStringList::ConstIterator eEnd = globalDirEntries.end();
-        	        for (; eIt != eEnd; ++eIt )
-                	{
-                		//kdDebug(1201) << "KonqSidebarTree::scanDir dirtree_dir contains " << *eIt << endl;
-	                	if ( *eIt != "." && *eIt != ".." &&
-					!entries.contains( *eIt ) &&
-					!dirEntries.contains( *eIt ) )
-				{ // we don't have that one yet -> copy it.
-					QString cp("cp -R -- ");
-					cp += KProcess::quote(dirtree_dir + *eIt);
-					cp += " ";
-					cp += KProcess::quote(m_path);
-					kdDebug() << "SidebarWidget::intialCopy executing " << cp << endl;
-					::system( QFile::encodeName(cp) );
-				}
-			}
-		}
+        // kdDebug() << "Web sidebar entry to be added: " << url.url()
+        //        << " [" << name << "]" << endl;
 
-			lcfg.writeEntry("Version",(nVersion>lVersion)?nVersion:lVersion);
-			lcfg.sync();
+        // Look for existing ones with this URL
+        KGlobal::dirs()->saveLocation("data", m_relPath, true);
+        QString list = locateLocal("data", "/" + m_relPath);
+
+        // Go through list to see which ones exist.  Check them for the URL
+        QStringList files = QDir(list).entryList("websidebarplugin*.desktop");
+        for (QStringList::Iterator it = files.begin(); it != files.end(); ++it)
+        {
+                KSimpleConfig scf(list + *it, false);
+                scf.setGroup("Desktop Entry");
+                if (scf.readPathEntry("URL", QString::null) == url.url())
+                {
+                        // We already have this one!
+                        KMessageBox::information(this,
+                                i18n("This entry already exists."));
+                        return;
+                }
+        }
+
+        QString tmp = "websidebarplugin%1.desktop";
+        QString myFile = findFileName(tmp, m_universalMode, m_profile);
+
+        if (!myFile.isEmpty())
+        {
+                KSimpleConfig scf(myFile, false);
+                scf.setGroup("Desktop Entry");
+                scf.writeEntry("Type", "Link");
+                scf.writePathEntry("URL", url.url());
+                scf.writeEntry("Icon", "netscape");
+                scf.writeEntry("Name", i18n("Web SideBar Plugin"));
+                scf.writeEntry("Open", "true");
+                scf.writeEntry("X-KDE-KonqSidebarModule", "konqsidebar_web");
+                scf.sync();
 
-	}
+                updateButtons(); // update
+        }
 }
 
-void Sidebar_Widget::buttonPopupActivate(int id)
-{
-	switch (id)
-	{
-		case 1:
-		{
-			KIconDialog kicd(this);
-//			kicd.setStrictIconSize(true);
-			QString iconname=kicd.selectIcon(KIcon::Small);
-			kdDebug()<<"New Icon Name:"<<iconname<<endl;
-			if (!iconname.isEmpty())
-			{
-				KSimpleConfig ksc(m_path+m_currentButton->file);
-				ksc.setGroup("Desktop Entry");
-				ksc.writeEntry("Icon",iconname);
-				ksc.sync();
-			        QTimer::singleShot(0,this,SLOT(updateButtons()));
-			}
-			break;
-		}
-		case 2:
-		{
-                        KURLRequesterDlg * dlg = new KURLRequesterDlg( m_currentButton->URL, i18n("Enter a URL:"), this, "url_dlg" );
-                        dlg->fileDialog()->setMode( KFile::Directory );
-			if (dlg->exec())
-			{
-				KSimpleConfig ksc(m_path+m_currentButton->file);
-				ksc.setGroup("Desktop Entry");
-                                if ( !dlg->selectedURL().isValid())
-                                {
-                                    KMessageBox::error(this, i18n("<qt><b>%1</b> does not exist</qt>").arg(dlg->selectedURL().url()));
-                                }
-                                else
-                                {
-                                    QString newurl= dlg->selectedURL().prettyURL();
-                                    //If we are going to set the name by 'set name', we don't set it here.
-                                    //ksc.writeEntry("Name",newurl);
-                                    ksc.writePathEntry("URL",newurl);
-                                    ksc.sync();
-                                    QTimer::singleShot(0,this,SLOT(updateButtons()));
-                                }
-			}
-                        delete dlg;
-			break;
-		}
-		case 3:
-		{
-			if (KMessageBox::warningContinueCancel(this,i18n("<qt>Do you really want to remove the <b>%1</b> tab?</qt>").arg(m_currentButton->displayName),
-                            QString::null,KStdGuiItem::del())==KMessageBox::Continue)
-			{
-				QFile f(m_path+m_currentButton->file);
-				if (!f.remove())
-					qDebug("Error, file not deleted");
-				QTimer::singleShot(0,this,SLOT(updateButtons()));
-			}
-			break;
-		}
-		case 4: // Set a name for this sidebar tab
-		{
-			bool ok;
-			
-			// Pop up the dialog asking the user for name.
-			const QString name = KInputDialog::getText(i18n("Set Name"), i18n("Enter the name:"),
-			        m_currentButton->displayName, &ok, this);
-			
-			if(ok)
-			{
-				// Write the name in the .desktop file of this side button.
-				KSimpleConfig ksc(m_path+m_currentButton->file);
-				ksc.setGroup("Desktop Entry");
-				ksc.writeEntry("Name", name, true, false, true /*localized*/ );
-				ksc.sync();
-				
-				// Update the buttons with a QTimer (why?)
-				QTimer::singleShot(0,this,SLOT(updateButtons()));
-			}
-			break;
-		}
-	}
+void Sidebar_Widget::submitFormRequest(const char *action,
+                                       const QString &url,
+                                       const QByteArray &formData,
+                                       const QString &,
+                                       const QString &contentType,
+                                       const QString &)
+{
+	KParts::URLArgs args;
+        args.setContentType("Content-Type: " + contentType);
+        args.postData = formData;
+        args.setDoPost(QCString(action).lower() == "post");
+
+	// boundary?
+        emit getExtension()->openURLRequest(KURL(url), args);
 }
 
-void Sidebar_Widget::activatedMenu(int id)
+void Sidebar_Widget::openURLRequest(const KURL &url, const KParts::URLArgs &args)
 {
-	switch (id)
-	{
-		case 1:
-		{
-			m_singleWidgetMode = !m_singleWidgetMode;
-			if ((m_singleWidgetMode) && (m_visibleViews.count()>1))
-			{
-				int tmpViewID=m_latestViewed;
-				for (uint i=0; i<m_buttons.count(); i++) {
-					ButtonInfo *button = m_buttons.at(i);
-					if ((int) i != tmpViewID)
-					{
-						if (button->dock && button->dock->isVisibleTo(this))
-							showHidePage(i);
-					} else {
-						if (button->dock)
-						{
-							m_area->setMainDockWidget(button->dock);
-							m_mainDockWidget->undock();
-						}
-					}
-				}
-				m_latestViewed=tmpViewID;
-			} else {
-				if (!m_singleWidgetMode)
-				{
-					int tmpLatestViewed=m_latestViewed;
-					m_area->setMainDockWidget(m_mainDockWidget);
-	        			m_mainDockWidget->setDockSite(KDockWidget::DockTop);
-				        m_mainDockWidget->setEnableDocking(KDockWidget::DockNone);
-					m_mainDockWidget->show();
-					if ((tmpLatestViewed>=0) && (tmpLatestViewed < (int) m_buttons.count()))
-					{
-						ButtonInfo *button = m_buttons.at(tmpLatestViewed);
-						if (button && button->dock)
-						{
-							m_noUpdate=true;
-							button->dock->undock();
-			                                button->dock->setEnableDocking(KDockWidget::DockTop|
-                                				KDockWidget::DockBottom/*|KDockWidget::DockDesktop*/);
-							kdDebug()<<"Reconfiguring multi view mode"<<endl;
-							m_buttonBar->setTab(tmpLatestViewed,true);
-							showHidePage(tmpLatestViewed);
-						}
-					}
-				}
-			}
-			break;
-		}
-		case 2:
-		{
-			m_showTabsLeft = ! m_showTabsLeft;
-			doLayout();
-			break;
-		}
-		case 3:
-		{
-			m_showExtraButtons = ! m_showExtraButtons;
-			if(m_showExtraButtons)
-			{
-				m_buttonBar->button(-1)->show();
-			}
-			else
-			{
-				m_buttonBar->button(-1)->hide();
-
-				KMessageBox::information(this,
-				i18n("You have hidden the navigation panel configuration button. To make it visible again, click the right mouse button on any of the navigation panel buttons and select \"Show Configuration Button\"."));
-
-			}
-			break;
-		}
-		default:
-			return;
-	}
-	m_configTimer.start(400, true);
+	getExtension()->openURLRequest(url, args);
 }
 
-void Sidebar_Widget::readConfig()
+void Sidebar_Widget::createNewWindow(const KURL &url, const KParts::URLArgs &args)
 {
-	m_singleWidgetMode = m_config->readBoolEntry("SingleWidgetMode",true);
-	m_showExtraButtons = m_config->readBoolEntry("ShowExtraButtons",false);
-	m_showTabsLeft = m_config->readBoolEntry("ShowTabsLeft", true);
-	m_hideTabs = m_config->readBoolEntry("HideTabs", false);
-	if (m_initial) {
-		m_openViews = m_config->readListEntry("OpenViews");
-		m_savedWidth = m_config->readNumEntry("SavedWidth",200);
-		m_initial=false;
-	}
+  	getExtension()->createNewWindow(url, args);
 }
 
-void Sidebar_Widget::stdAction(const char *handlestd)
+void Sidebar_Widget::createNewWindow(const KURL &url,
+                                     const KParts::URLArgs &args,
+                                     const KParts::WindowArgs &windowArgs,
+                                     KParts::ReadOnlyPart *&part)
 {
-	ButtonInfo* mod = m_activeModule;
-
-	if (!mod)
-		return;
-	if (!(mod->module))
-		return;
-
-	kdDebug() << "Try calling >active< module's (" << mod->module->className() << ") slot " << handlestd << endl;
-
-	int id = mod->module->metaObject()->findSlot( handlestd );
-  	if ( id == -1 )
-		return;
-	kdDebug() << "Action slot was found, it will be called now" << endl;
-  	QUObject o[ 1 ];
-	mod->module->qt_invoke( id, o );
-  	return;
+	getExtension()->createNewWindow(url, args, windowArgs, part);
 }
 
-
-void Sidebar_Widget::updateButtons()
+void Sidebar_Widget::popupMenu(const QPoint &global, const KFileItemList &items)
 {
-	//PARSE ALL DESKTOP FILES
-	m_openViews = m_visibleViews;
-
-	if (m_buttons.count() > 0)
-	{
-		for (uint i = 0; i < m_buttons.count(); i++)
-		{
-			ButtonInfo *button = m_buttons.at(i);
-			if (button->dock)
-			{
-				m_noUpdate = true;
-				if (button->dock->isVisibleTo(this)) {
-					showHidePage(i);
-				}
-
-				delete button->module;
-				delete button->dock;
-			}
-			m_buttonBar->removeTab(i);
-
-		}
-	}
-	m_buttons.clear();
-
-	readConfig();
-	doLayout();
-	createButtons();
+        if (doEnableActions())
+        {
+                getExtension()->popupMenu(global, items);
+        }
 }
 
-void Sidebar_Widget::createButtons()
+void Sidebar_Widget::popupMenu(KXMLGUIClient *client,
+                               const QPoint &global,
+                               const KFileItemList &items)
 {
-	if (!m_path.isEmpty())
-	{
-		kdDebug()<<"m_path: "<<m_path<<endl;
-		QDir dir(m_path);
-		QStringList list=dir.entryList("*.desktop");
-		for (QStringList::Iterator it=list.begin(); it!=list.end(); ++it)
-		{
-			addButton(*it);
-		}
-	}
-
-	if (!m_buttonBar->button(-1)) {
-		m_buttonBar->appendButton(SmallIcon("configure"), -1, m_menu,
-					i18n("Configure Sidebar"));
-	}
-
-	if (m_showExtraButtons) {
-		m_buttonBar->button(-1)->show();
-	} else {
-		m_buttonBar->button(-1)->hide();
-	}
-
-	for (uint i = 0; i < m_buttons.count(); i++)
-	{
-		ButtonInfo *button = m_buttons.at(i);
-		if (m_openViews.contains(button->file))
-		{
-			m_buttonBar->setTab(i,true);
-			m_noUpdate = true;
-			showHidePage(i);
-			if (m_singleWidgetMode) {
-				break;
-			}
-		}
-	}
-
-	collapseExpandSidebar();
-        m_noUpdate=false;
+	if (doEnableActions())
+        {
+                getExtension()->popupMenu(client, global, items);
+        }
+}
+
+void Sidebar_Widget::popupMenu(const QPoint &global,
+                               const KURL &url,
+                               const QString &mimeType,
+                               mode_t mode)
+{
+        if (doEnableActions())
+        {
+                getExtension()->popupMenu(global, url, mimeType, mode);
+        }
+}
+
+void Sidebar_Widget::popupMenu(KXMLGUIClient *client,
+                               const QPoint &global,
+                               const KURL &url,
+                               const QString &mimeType,
+                               mode_t mode)
+{
+        if (doEnableActions())
+        {
+                getExtension()->popupMenu(client, global,url, mimeType, mode);
+        }
+}
+
+void Sidebar_Widget::enableAction(const char *name, bool enabled)
+{
+        if (sender()->parent()->isA("Sidebar_ButtonInfo"))
+        {
+                Sidebar_ButtonInfo *bi = static_cast<Sidebar_ButtonInfo*>(sender()->parent());
+                if (bi)
+                {
+                        QString n(name);
+                        if (n == "copy")
+                                bi->copy = enabled;
+                        else if (n == "cut")
+                                bi->cut = enabled;
+                        else if (n == "paste")
+                                bi->paste = enabled;
+                        else if (n == "trash")
+                                bi->trash = enabled;
+                        else if (n == "del")
+                                bi->del = enabled;
+                        else if (n == "rename")
+                                bi->rename = enabled;
+                }
+        }
 }
 
-bool Sidebar_Widget::openURL(const class KURL &url)
+void Sidebar_Widget::userMovedSplitter()
 {
-	if (url.protocol()=="sidebar")
-	{
-		for (unsigned int i=0;i<m_buttons.count();i++)
-			if (m_buttons.at(i)->file==url.path())
-			{
-				KMultiTabBarTab *tab = m_buttonBar->tab(i);
-				if (!tab->isOn())
-					tab->animateClick();
-				return true;
-			}
-		return false;
-	}
+        m_userMovedSplitter = true;
+}
 
-	m_storedUrl=url;
-	m_hasStoredUrl=true;
-        bool ret = false;
-	for (unsigned int i=0;i<m_buttons.count();i++)
+void Sidebar_Widget::customEvent(QCustomEvent* ev)
 	{
-		ButtonInfo *button = m_buttons.at(i);
-		if (button->dock)
-		{
-			if ((button->dock->isVisibleTo(this)) && (button->module))
-			{
-				ret = true;
-				button->module->openURL(url);
-			}
-		}
-	}
-	return ret;
+        if (KonqFileSelectionEvent::test(ev))
+        {
+                emit fileSelection(static_cast<KonqFileSelectionEvent*>(ev)->selection());
+        }
+        else if (KonqFileMouseOverEvent::test(ev))
+        {
+                if (!(static_cast<KonqFileMouseOverEvent*>(ev)->item()))
+                {
+                        emit fileMouseOver(KFileItem(KURL(), QString::null, KFileItem::Unknown));
+                }
+                else
+                {
+                        emit fileMouseOver(*static_cast<KonqFileMouseOverEvent*>(ev)->item());
+                }
+        }
+        else if (KonqConfigEvent::test(ev))
+        {
+                KonqConfigEvent *event = static_cast<KonqConfigEvent*>(ev);
+                if (event->save())
+                {
+                        event->config()->writeEntry(event->prefix() + "OpenViews", m_visibleViews);
+                }
+                else
+                {
+                        if (event->config()->hasKey(event->prefix() + "OpenViews"))
+                        {
+                                m_openViews = event->config()->readListEntry(event->prefix() + "OpenViews");
+                        }
+                }
+        }
 }
 
-bool Sidebar_Widget::addButton(const QString &desktoppath,int pos)
+void Sidebar_Widget::resizeEvent(QResizeEvent* ev)
 {
-	int lastbtn = m_buttons.count();
-	m_buttons.resize(m_buttons.size()+1);
-
-  	KSimpleConfig *confFile;
-
-	kdDebug() << "addButton:" << (m_path+desktoppath) << endl;
-
-	confFile = new KSimpleConfig(m_path+desktoppath,true);
-	confFile->setGroup("Desktop Entry");
-
-    	QString icon = confFile->readEntry("Icon");
-	QString name = confFile->readEntry("Name");
-	QString comment = confFile->readEntry("Comment");
-	QString url = confFile->readPathEntry("URL",QString::null);
-	QString lib = confFile->readEntry("X-KDE-KonqSidebarModule");
-
-        delete confFile;
-
-	if (pos == -1)
-	{
-	  	m_buttonBar->appendTab(SmallIcon(icon), lastbtn, name);
-		ButtonInfo *bi = new ButtonInfo(desktoppath, ((KonqSidebar*)m_partParent),0, url, lib, name,
-						icon, this);
-		/*int id=*/m_buttons.insert(lastbtn, bi);
-		KMultiTabBarTab *tab = m_buttonBar->tab(lastbtn);
-		tab->installEventFilter(this);
-		connect(tab,SIGNAL(clicked(int)),this,SLOT(showHidePage(int)));
-
-		// Set Whats This help
-		// This uses the comments in the .desktop files
-		QWhatsThis::add(tab, comment);
-	}
+        if (m_somethingVisible && m_userMovedSplitter)
+        {
+                int newWidth = width();
+                QSplitter *split = splitter();
+                if (split && (m_savedWidth != newWidth))
+                {
+                        QValueList<int> sizes = split->sizes();
+                        if ((sizes.count() >= 2) && (sizes[1]))
+                        {
+                                m_savedWidth = newWidth;
+                                updateGeometry();
+                                m_configTimer.start(400, true);
+                        }
+                }
+        }
 
-	return true;
+        m_userMovedSplitter = false;
+        QWidget::resizeEvent(ev);
 }
 
 
-
 bool Sidebar_Widget::eventFilter(QObject *obj, QEvent *ev)
 {
+        if (ev->type() == QEvent::MouseButtonPress &&
+            ((QMouseEvent *) ev)->button() == QMouseEvent::RightButton)
+        {
+                kdDebug() << "Request for popup" << endl;
+                m_currentButton = 0;
+
+                KMultiTabBarTab *bt = dynamic_cast<KMultiTabBarTab*>(obj);
+                if (bt)
+                {
+                        for (uint i = 0; i < m_buttons.count(); i++)
+                        {
+                                if (bt == m_buttonBar->tab(i))
+                                {
+                                        m_currentButton = m_buttons.at(i);
+                                        break;
+                                }
+                        }
+                }
 
-	if (ev->type()==QEvent::MouseButtonPress && ((QMouseEvent *)ev)->button()==QMouseEvent::RightButton)
-	{
-		KMultiTabBarTab *bt=dynamic_cast<KMultiTabBarTab*>(obj);
-		if (bt)
-		{
-			kdDebug()<<"Request for popup"<<endl;
-			m_currentButton = 0;
-			for (uint i=0;i<m_buttons.count();i++)
-			{
-				if (bt==m_buttonBar->tab(i))
-				{
-					m_currentButton = m_buttons.at(i);
-					break;
-				}
-			}
-
-			if (m_currentButton)
-			{
-				if (!m_buttonPopup)
-				{
-					m_buttonPopup=new KPopupMenu(this, "Sidebar_Widget::ButtonPopup");
-					m_buttonPopup->insertTitle(SmallIcon("unknown"), "", 50);
-					m_buttonPopup->insertItem(SmallIconSet("text"), i18n("Set Name..."),4); // Item to open a dialog to change the name of the sidebar item (by Pupeno)
-					m_buttonPopup->insertItem(SmallIconSet("www"), i18n("Set URL..."),2);
-					m_buttonPopup->insertItem(SmallIconSet("icons"), i18n("Set Icon..."),1);
-					m_buttonPopup->insertSeparator();
-					m_buttonPopup->insertItem(SmallIconSet("editdelete"), i18n("Remove"),3);
-					m_buttonPopup->insertSeparator();
-					m_buttonPopup->insertItem(SmallIconSet("configure"), i18n("Configure Navigation Panel"), m_menu, 4);
-					connect(m_buttonPopup, SIGNAL(activated(int)),
-						this, SLOT(buttonPopupActivate(int)));
-				}
-				m_buttonPopup->setItemEnabled(2,!m_currentButton->URL.isEmpty());
-			        m_buttonPopup->changeTitle(50,SmallIcon(m_currentButton->iconName),
-						m_currentButton->displayName);
-				m_buttonPopup->exec(QCursor::pos());
-			}
-			return true;
+                if (m_currentButton)
+                {
+                        if (!m_buttonPopup)
+                        {
+                                m_buttonPopup = new KPopupMenu(this, "Sidebar_Widget::ButtonPopup");
+                                m_buttonPopup->insertTitle(SmallIcon("unknown"), "", 0);
+                                m_buttonPopup->insertItem(SmallIconSet("www"), i18n("Set Name..."), 1); // Item to open a dialog to change the name of the sidebar item (by Pupeno)
+                                m_buttonPopup->insertItem(SmallIconSet("www"), i18n("Set URL..."), 2);
+                                m_buttonPopup->insertItem(SmallIconSet("image"), i18n("Set Icon..."), 3);
+                                m_buttonPopup->insertSeparator();
+                                m_buttonPopup->insertItem(SmallIconSet("remove"), i18n("Remove"), 4);
+                                m_buttonPopup->insertSeparator();
+                                m_buttonPopup->insertItem(SmallIconSet("configure"), i18n("Configure Navigation Panel"), m_menu, 4);
+
+                                connect(m_buttonPopup, SIGNAL(activated(int)),
+                                        this, SLOT(buttonPopupActivate(int)));
+                        }
+                        m_buttonPopup->setItemEnabled(2, !m_currentButton->url.isEmpty());
+                        m_buttonPopup->changeTitle(0,
+                                                   SmallIcon(m_currentButton->iconName),
+                                                   m_currentButton->displayName);
+                        m_buttonPopup->exec(QCursor::pos());
+                }
+                return true;
+        }
+
+        return false;
 
-		}
-	}
-	return false;
 }
 
 void Sidebar_Widget::mousePressEvent(QMouseEvent *ev)
@@ -863,425 +650,1151 @@ void Sidebar_Widget::mousePressEvent(QMo
 		m_menu->exec(QCursor::pos());
 }
 
-KonqSidebarPlugin *Sidebar_Widget::loadModule(QWidget *par,QString &desktopName,QString lib_name,ButtonInfo* bi)
+void Sidebar_Widget::showHidePage(int page)
 {
-	KLibLoader *loader = KLibLoader::self();
-
-	// try to load the library
-      	KLibrary *lib = loader->library(QFile::encodeName(lib_name));
-	if (lib)
-	{
-		// get the create_ function
-		QString factory("create_%1");
-		void *create = lib->symbol(QFile::encodeName(factory.arg(lib_name)));
-
-		if (create)
-		{
-			// create the module
-
-			KonqSidebarPlugin* (*func)(KInstance*,QObject *, QWidget*, QString&, const char *);
-			func = (KonqSidebarPlugin* (*)(KInstance*,QObject *, QWidget *, QString&, const char *)) create;
-			QString fullPath(m_path+desktopName);
-			return  (KonqSidebarPlugin*)func(getInstance(),bi,par,fullPath,0);
-		}
-	} else {
-		kdWarning() << "Module " << lib_name << " doesn't specify a library!" << endl;
-	}
-	return 0;
+        Sidebar_ButtonInfo *bi = m_buttons.at(page);
+        if (m_style == 0)
+        {
+                if (!bi->dock)
+                {
+                        if (m_buttonBar->isTabRaised(page))
+                        {
+                                // SingleWidgetMode
+                                if (m_singleWidgetMode)
+                                {
+                                        if (m_latestViewed != -1)
+                                        {
+                                                m_noUpdate = true;
+                                                showHidePage(m_latestViewed);
+                                        }
+                                }
+                                if (!createView(bi))
+                                {
+                                        m_buttonBar->setTab(page, false);
+                                        return;
+                                }
+                                m_buttonBar->setTab(page,true);
+                                connect(bi->module,
+                                        SIGNAL(setIcon(const QString&)),
+                                        m_buttonBar->tab(page),
+                                        SLOT(setIcon(const QString&)));
+
+                                connect(bi->module,
+                                        SIGNAL(setCaption(const QString&)),
+                                        m_buttonBar->tab(page),
+                                        SLOT(setText(const QString&)));
+                                if (m_singleWidgetMode)
+                                {
+                                        m_area->setMainDockWidget(bi->dock);
+                                        m_mainDockWidget->undock();
+                                }
+                                else
+                                {
+                                        bi->dock->manualDock(m_mainDockWidget, KDockWidget::DockTop, 100);
+                                }
+                                bi->dock->show();
+                                if (m_hasStoredUrl)
+                                {
+                                        bi->module->openURL(m_storedUrl);
+                                }
+                                m_visibleViews << bi->file;
+                                m_latestViewed = page;
+                        }
+                }
+                else
+                {
+                        if ((!bi->dock->isVisible()) && (m_buttonBar->isTabRaised(page)))
+                        {
+                                // SingleWidgetMode
+                                if (m_singleWidgetMode)
+                                {
+                                        if (m_latestViewed != -1)
+                                        {
+                                                m_noUpdate = true;
+                                                showHidePage(m_latestViewed);
+                                        }
+                                }
+                                if (m_singleWidgetMode)
+                                {
+                                        m_area->setMainDockWidget(bi->dock);
+                                        m_mainDockWidget->undock();
+                                }
+                                else
+                                {
+                                        bi->dock->manualDock(m_mainDockWidget, KDockWidget::DockTop, 100);
+                                }
+                                bi->dock->show();
+                                m_latestViewed = page;
+                                if (m_hasStoredUrl)
+                                {
+                                        bi->module->openURL(m_storedUrl);
+                                }
+                                m_visibleViews << bi->file;
+                                m_buttonBar->setTab(page, true);
+                        }
+                        else
+                        {
+                                m_buttonBar->setTab(page,false);
+                                if (m_singleWidgetMode)
+                                {
+                                        m_area->setMainDockWidget(m_mainDockWidget);
+                                        m_mainDockWidget->show();
+                                }
+                                bi->dock->undock();
+                                m_latestViewed = -1;
+                                m_visibleViews.remove(bi->file);
+                        }
+                }
+        }
+        else
+        {
+                if (m_hasStoredUrl)
+                {
+                        bi->module->openURL(m_storedUrl);
+                }
+
+                m_latestViewed = page;
+                m_visibleViews = bi->file;
+        }
+
+        if (!m_noUpdate)
+        {
+                collapseExpandSidebar();
+        }
+        m_noUpdate = false;
 }
 
-KParts::BrowserExtension *Sidebar_Widget::getExtension()
+void Sidebar_Widget::createButtons()
 {
-	return KParts::BrowserExtension::childObject(m_partParent);
+        if (!m_path.isEmpty())
+        {
+                kdDebug() << "m_path: " << m_path << endl;
+                QDir dir(m_path);
+                QStringList list = dir.entryList("*.desktop");
+                for (QStringList::Iterator it = list.begin(); it != list.end(); ++it)
+                {
+                        addButton(*it);
+                }
+        }
+
+        if (m_style == 0)
+        {
+                if (!m_buttonBar->button(-1))
+                {
+                        m_buttonBar->appendButton(SmallIcon("configure"), -1, m_menu,
+	                                                  i18n("Configure Sidebar"));
+                }
+
+                if (m_showExtraButtons)
+                {
+                        m_buttonBar->button(-1)->show();
+                }
+                else
+                {
+                        m_buttonBar->button(-1)->hide();
+                }
+        }
+
+       uint i;
+       for (i = 0; i < m_buttons.count(); i++)
+       {
+                Sidebar_ButtonInfo *bi = m_buttons.at(i);
+                if (m_openViews.contains(bi->file))
+                {
+                        if (m_style == 0)
+                        {
+                                m_buttonBar->setTab(i, true);
+                        }
+                        else
+                        {
+                                m_tb->setCurrentIndex(i);
+
+                        }
+
+                        m_noUpdate = true;
+                        showHidePage(i);
+                        if (m_singleWidgetMode || m_style != 0)
+                        {
+                                break;
+                        }
+                }
+        }
+
+        collapseExpandSidebar();
+        m_noUpdate = false;
 }
 
-bool Sidebar_Widget::createView( ButtonInfo *data)
+void Sidebar_Widget::updateButtons()
 {
-	bool ret = true;
-	KSimpleConfig *confFile;
-	confFile = new KSimpleConfig(data->file,true);
-	confFile->setGroup("Desktop Entry");
+        // PARSE ALL DESKTOP FILES
+        m_openViews = m_visibleViews;
 
-	data->dock = m_area->createDockWidget(confFile->readEntry("Name",i18n("Unknown")),0);
-	data->module = loadModule(data->dock,data->file,data->libName,data);
+        if (m_buttons.count() > 0)
+        {
+                for (uint i = 0; i < m_buttons.count(); i++)
+                {
+                        Sidebar_ButtonInfo *bi = m_buttons.at(i);
+                        if (m_style == 0)
+                        {
+                                if (bi->dock)
+                                {
+                                        m_noUpdate = true;
+                                        if (bi->dock->isVisibleTo(this))
+                                        {
+                                              showHidePage(i);
+                                        }
 
-	if (data->module == 0)
-	{
-		delete data->dock;
-		data->dock = 0;
-		ret = false;
-	} else {
-		data->dock->setWidget(data->module->getWidget());
-		data->dock->setEnableDocking(KDockWidget::DockTop|
-		KDockWidget::DockBottom/*|KDockWidget::DockDesktop*/);
-		data->dock->setDockSite(KDockWidget::DockTop|KDockWidget::DockBottom);
-		connectModule(data->module);
-		connect(this, SIGNAL(fileSelection(const KFileItemList&)),
-			data->module, SLOT(openPreview(const KFileItemList&)));
+                                        delete bi->module;
+                                        delete bi->dock;
+                                }
 
-		connect(this, SIGNAL(fileMouseOver(const KFileItem&)),
-			data->module, SLOT(openPreviewOnMouseOver(const KFileItem&)));
-	}
+                                m_buttonBar->removeTab(i);
+                        }
+                        else
+                        {
+                                m_noUpdate = true;
+                                disconnect(m_tb, SIGNAL(currentChanged(int)), this, SLOT(showHidePage(int)));
+                                m_tb->removeItem(bi->module->getWidget());
+                                connect(m_tb, SIGNAL(currentChanged(int)), this, SLOT(showHidePage(int)));
+                                delete bi->module;
+
+                                m_menu->removeItem(i + 1000);
+                                delete bi->popupMenu;
+                        }
+                }
+        }
+        m_buttons.clear();
 
-	delete confFile;
-	return ret;
+        readConfig();
+        doLayout();
+        createButtons();
 }
 
-void Sidebar_Widget::showHidePage(int page)
+void Sidebar_Widget::finishRollBack()
 {
-	ButtonInfo *info = m_buttons.at(page);
-	if (!info->dock)
-	{
-		if (m_buttonBar->isTabRaised(page))
-		{
-			//SingleWidgetMode
-			if (m_singleWidgetMode)
-			{
-				if (m_latestViewed != -1)
-				{
-					m_noUpdate = true;
-					showHidePage(m_latestViewed);
-				}
-			}
-
-			if (!createView(info))
-			{
-				m_buttonBar->setTab(page,false);
-				return;
-			}
-
-			m_buttonBar->setTab(page,true);
-
-			connect(info->module,
-				SIGNAL(setIcon(const QString&)),
-				m_buttonBar->tab(page),
-				SLOT(setIcon(const QString&)));
-
-			connect(info->module,
-				SIGNAL(setCaption(const QString&)),
-				m_buttonBar->tab(page),
-				SLOT(setText(const QString&)));
-
-			if (m_singleWidgetMode)
-			{
-				m_area->setMainDockWidget(info->dock);
-				m_mainDockWidget->undock();
-			} else {
-				info->dock->manualDock(m_mainDockWidget,KDockWidget::DockTop,100);
-			}
-
-			info->dock->show();
-
-			if (m_hasStoredUrl)
-				info->module->openURL(m_storedUrl);
-			m_visibleViews<<info->file;
-			m_latestViewed=page;
-		}
-	} else {
-		if ((!info->dock->isVisibleTo(this)) && (m_buttonBar->isTabRaised(page))) {
-			//SingleWidgetMode
-			if (m_singleWidgetMode) {
-				if (m_latestViewed != -1) {
-					m_noUpdate = true;
-					showHidePage(m_latestViewed);
-				}
-			}
-
-			if (m_singleWidgetMode) {
-				m_area->setMainDockWidget(info->dock);
-				m_mainDockWidget->undock();
-			} else {
-				info->dock->manualDock(m_mainDockWidget,KDockWidget::DockTop,100);
-			}
-
-			info->dock->show();
-			m_latestViewed = page;
-			if (m_hasStoredUrl)
-				info->module->openURL(m_storedUrl);
-			m_visibleViews << info->file;
-			m_buttonBar->setTab(page,true);
-		} else {
-			m_buttonBar->setTab(page,false);
-			if (m_singleWidgetMode) {
-				m_area->setMainDockWidget(m_mainDockWidget);
-				m_mainDockWidget->show();
-			}
-			info->dock->undock();
-			m_latestViewed = -1;
-			m_visibleViews.remove(info->file);
-		}
-	}
-
-	if (!m_noUpdate)
-		collapseExpandSidebar();
-	m_noUpdate = false;
+        initialCopy();
+        QTimer::singleShot(0, this, SLOT(updateButtons()));
 }
 
-void Sidebar_Widget::collapseExpandSidebar()
+void Sidebar_Widget::activatedMenu(int id)
 {
-	if (!parentWidget())
-		return; // Can happen during destruction
-		
-	if (m_visibleViews.count()==0)
-	{
-		m_somethingVisible = false;
-		parentWidget()->setMaximumWidth(minimumSizeHint().width());
-		updateGeometry();
-		emit panelHasBeenExpanded(false);
-	} else {
-		m_somethingVisible = true;
-		parentWidget()->setMaximumWidth(32767);
-		updateGeometry();
-		emit panelHasBeenExpanded(true);
-	}
+        switch (id)
+        {
+                case 1:
+                {
+                        m_singleWidgetMode = !m_singleWidgetMode;
+                        if ((m_singleWidgetMode) && (m_visibleViews.count()>1))
+                        {
+                                int tmpViewID = m_latestViewed;
+                                Sidebar_ButtonInfo *bi;
+                                for (uint i = 0; i < m_buttons.count(); i++)
+                                {
+                                       bi = m_buttons.at(i);
+                                       if ((int) i != tmpViewID)
+                                        {
+                                                if (bi->dock && bi->dock->isVisibleTo(this))
+                                                {
+                                                        showHidePage(i);
+                                                }
+                                                
+                                        }
+                                        else
+                                        {
+                                                if (bi->dock)
+                                                {
+                                                        m_area->setMainDockWidget(bi->dock);
+                                                        m_mainDockWidget->undock();
+                                                }
+                                        }
+                                }
+
+                                m_latestViewed = tmpViewID;
+                       }
+                        else
+                        {
+                                if (!m_singleWidgetMode)
+                                {
+                                      int tmpLatestViewed = m_latestViewed;
+                                        m_area->setMainDockWidget(m_mainDockWidget);
+                                        m_mainDockWidget->setDockSite(KDockWidget::DockTop);
+                                        m_mainDockWidget->setEnableDocking(KDockWidget::DockNone);
+                                        m_mainDockWidget->show();
+                                        if ((tmpLatestViewed >= 0) && (tmpLatestViewed < (int)
+						m_buttons.count()))
+                                        {
+                                                Sidebar_ButtonInfo *bi = m_buttons.at(tmpLatestViewed);
+                                                if (bi && bi->dock)
+                                                {
+                                                        m_noUpdate=true;
+                                                        bi->dock->undock();
+                                                        bi->dock->setEnableDocking(KDockWidget::DockTop |
+                                                                                   KDockWidget::DockBottom /* | KDockWidget::DockDesktop */);
+                                                        kdDebug() << "Reconfiguring multi view mode" << endl;
+                                                        m_buttonBar->setTab(tmpLatestViewed, true);
+                                                        showHidePage(tmpLatestViewed);
+                                                }
+                                        }
+                                }
+                        }
+                        break;
+                }
+
+                case 2:
+                {
+                        m_showTabsLeft = ! m_showTabsLeft;
+                        doLayout();
+                        break;
+                }
+
+                case 3:
+                {
+                        m_showExtraButtons = ! m_showExtraButtons;
+                        if(m_showExtraButtons)
+                        {
+                                m_buttonBar->button(-1)->show();
+                        }
+                        else
+                        {
+                                KMessageBox::information(this,
+                                i18n("You have hidden the navigation panel configuration button. To make it visible again, click the right mouse button on any of the navigation panel buttons and select \"Show Configuration Button\"."));
+                                m_buttonBar->button(-1)->hide();
+                        }
+                        break;
+                }
+
+                case 4:
+                {
+                       bool isChecked = m_menu->isItemChecked(id);
+                       bool headerVisible = m_header->isVisible();
+                       if (!isChecked && !headerVisible)
+                       {
+                               m_header->show();
+                               m_showHeader = true;
+                       }
+                       else if (isChecked && headerVisible)
+                      {
+                               m_header->hide();
+                              m_showHeader = false;
+                      }
+
+                       m_menu->setItemChecked(id, m_showHeader);
+                      break;
+                }
+
+               /*case 5:
+               {
+                       bool isChecked = m_menu->isItemChecked(id);
+                       m_menu->setItemChecked(id, !isChecked);
+
+                       if (m_configTimer.isActive())
+                       {
+                               m_configTimer.stop();
+                               saveConfig();
+                       }
+
+                       m_config->writeEntry("SidebarStyle", !m_style);
+                       // reload widget
+                       return;
+               }*/
+
+                default:
+                        return;
+      }
+	m_configTimer.start(400, true);
 }
 
-QSize Sidebar_Widget::sizeHint() const
+void Sidebar_Widget::buttonPopupActivate(int id)
 {
-        if (m_somethingVisible)
-           return QSize(m_savedWidth,200);
-        return minimumSizeHint();
+       switch (id)
+        {
+                case 1: // Set a name for this sidebar tab
+                {
+                        bool ok;
+
+                        // Pop up the dialog asking the user for name.
+                        const QString name = KInputDialog::getText(i18n("Set Name"), i18n("Enter the name:"),
+                                                                   m_currentButton->displayName, &ok, this);
+
+                       if (ok)
+                       {
+                                // Write the name in the .desktop file of this side button.
+                                KSimpleConfig ksc(m_path + m_currentButton->file);
+                                ksc.setGroup("Desktop Entry");
+                                ksc.writeEntry("Name", name, true, false, true /*localized*/);
+                                ksc.sync();
+
+                                // Update the buttons with a QTimer (why?)
+                                QTimer::singleShot(0, this, SLOT(updateButtons()));
+                        }
+                        break;
+                }
+
+                case 2:
+                {
+                        KURLRequesterDlg *dlg = new KURLRequesterDlg(m_currentButton->url, i18n("Enter a URL:"), this, "url_dlg");
+                        dlg->fileDialog()->setMode(KFile::Directory);
+                        if (dlg->exec())
+                        {
+                                KSimpleConfig ksc(m_path + m_currentButton->file);
+                                ksc.setGroup("Desktop Entry");
+                                if (!dlg->selectedURL().isValid())
+                                {
+                                        KMessageBox::error(this, i18n("<qt><b>%1</b> does not exist</qt>").arg(dlg->selectedURL().url()));
+                                }
+                                else
+                                {
+                                        QString newurl= dlg->selectedURL().prettyURL();
+                                        // If we are going to set the name by 'set name', we don't set it here.
+                                        // ksc.writeEntry("Name",newurl);
+                                        ksc.writePathEntry("URL",newurl);
+                                        ksc.sync();
+                                        QTimer::singleShot(0 ,this, SLOT(updateButtons()));
+                                }
+                        }
+                        delete dlg;
+                        break;
+                }
+
+                case 3:
+                {
+                        KIconDialog kicd(this);
+                        kicd.setStrictIconSize(true);
+                        QString iconname = kicd.selectIcon(KIcon::Small);
+                        kdDebug() << "New Icon Name:" << iconname << endl;
+                        if (!iconname.isEmpty())
+                        {
+                                KSimpleConfig ksc(m_path + m_currentButton->file);
+                                ksc.setGroup("Desktop Entry");
+                                ksc.writeEntry("Icon", iconname);
+                                ksc.sync();
+                                QTimer::singleShot(0, this, SLOT(updateButtons()));
+                        }
+                        break;
+                }
+
+                case 4:
+                {
+                        if (KMessageBox::questionYesNo(this, i18n("<qt>Do you really want to remove the <b>%1</b> tab?</qt>").
+                                                       arg(m_currentButton->displayName)) == KMessageBox::Yes)
+                        {
+                                QFile f(m_path + m_currentButton->file);
+                                if (!f.remove())
+                                {
+                                        qDebug("Error, file not deleted");
+                                }
+                                QTimer::singleShot(0, this, SLOT(updateButtons()));
+                        }
+                        break;
+                }
+        }
+}
+
+void Sidebar_Widget::dockWidgetHasUndocked(KDockWidget *wid)
+{
+        kdDebug() << "Sidebar_Widget::dockWidgetHasUndocked(KDockWidget*)" << endl;
+        for (unsigned int i = 0; i < m_buttons.count(); i++)
+        {
+                Sidebar_ButtonInfo *button = m_buttons.at(i);
+                if (button->dock == wid)
+                {
+                        if (m_buttonBar->isTabRaised(i))
+                        {
+                                m_buttonBar->setTab(i, false);
+                                showHidePage(i);
+                        }
+                }
+        }
 }
 
-void Sidebar_Widget::dockWidgetHasUndocked(KDockWidget* wid)
+void Sidebar_Widget::aboutToShowConfigMenu()
 {
-	kdDebug()<<" Sidebar_Widget::dockWidgetHasUndocked(KDockWidget*)"<<endl;
-	for (unsigned int i=0;i<m_buttons.count();i++)
-	{
-		ButtonInfo *button = m_buttons.at(i);
-		if (button->dock==wid)
-		{
-			if (m_buttonBar->isTabRaised(i))
-			{
-				m_buttonBar->setTab(i,false);
-				showHidePage(i);
-			}
-		}
-	}
+        m_menu->setItemChecked(1, !m_singleWidgetMode);
+        m_menu->setItemChecked(2, m_showTabsLeft);
+        m_menu->setItemChecked(3, m_showExtraButtons);
 }
 
-KInstance  *Sidebar_Widget::getInstance()
+void Sidebar_Widget::aboutToShowButtonMenu()
 {
-	return ((KonqSidebar*)m_partParent)->getInstance();
-}
+        KPopupMenu *menu = (KPopupMenu *) sender();
 
-void Sidebar_Widget::submitFormRequest(const char *action,
-					const QString& url,
-					const QByteArray& formData,
-					const QString& /*target*/,
-					const QString& contentType,
-					const QString& /*boundary*/ )
-{
-KParts::URLArgs args;
-
-	args.setContentType("Content-Type: " + contentType);
-	args.postData = formData;
-	args.setDoPost(QCString(action).lower() == "post");
-	// boundary?
-	emit getExtension()->openURLRequest(KURL( url ), args);
+        int i;
+        QMenuItem *item = m_menu->findPopup(menu, &i);
+        i = item->id() - 1000;
+
+        m_currentButton = m_buttons.at(i);
+
+        if (!menu->count())
+        {
+                menu->insertTitle(SmallIcon(m_currentButton->iconName),
+                                  m_currentButton->displayName, 50);
+                menu->insertItem(SmallIconSet("www"), i18n("Set Name..."), 1);
+                menu->insertItem(SmallIconSet("www"), i18n("Set URL..."), 2);
+                menu->insertItem(SmallIconSet("image"), i18n("Set Icon..."), 3);
+                menu->insertSeparator();
+                menu->insertItem(SmallIconSet("remove"), i18n("Remove"), 4);
+
+                menu->setItemEnabled(2, !m_currentButton->url.isEmpty());
+        }
 }
 
-void Sidebar_Widget::openURLRequest( const KURL &url, const KParts::URLArgs &args)
+void Sidebar_Widget::saveConfig()
 {
-	getExtension()->openURLRequest(url,args);
+        m_config->writeEntry("SidebarStyle", m_style);
+        m_config->writeEntry("ShowHeader", m_showHeader);
+        m_config->writeEntry("SingleWidgetMode", m_singleWidgetMode);
+        m_config->writeEntry("ShowExtraButtons", m_showExtraButtons);
+        m_config->writeEntry("ShowTabsLeft", m_showTabsLeft);
+        m_config->writeEntry("HideTabs", m_hideTabs);
+        m_config->writeEntry("SavedWidth",m_savedWidth);
+        m_config->sync();
 }
 
-void Sidebar_Widget::createNewWindow( const KURL &url, const KParts::URLArgs &args)
+void Sidebar_Widget::readConfig()
 {
-	getExtension()->createNewWindow(url,args);
+        m_style = m_config->readNumEntry("SidebarStyle", 0);
+        m_showHeader = m_config->readBoolEntry("ShowHeader", true);
+        m_singleWidgetMode = m_config->readBoolEntry("SingleWidgetMode", true);
+        m_showExtraButtons = m_config->readBoolEntry("ShowExtraButtons", true);
+        m_showTabsLeft = m_config->readBoolEntry("ShowTabsLeft", true);
+        m_hideTabs = m_config->readBoolEntry("HideTabs", false);
+        if (m_initial)
+        {
+                m_openViews = m_config->readListEntry("OpenViews");
+                m_savedWidth = m_config->readNumEntry("SavedWidth", 200);
+                m_initial=false;
+        }
 }
 
-void Sidebar_Widget::createNewWindow( const KURL &url, const KParts::URLArgs &args,
-	const KParts::WindowArgs &windowArgs, KParts::ReadOnlyPart *&part )
+QSplitter *Sidebar_Widget::splitter() const
 {
-	getExtension()->createNewWindow(url,args,windowArgs,part);
+        if (m_universalMode) return 0;
+        QObject *p = parent();
+        if (!p) return 0;
+        p = p->parent();
+        return static_cast<QSplitter*>(p);
 }
 
-void Sidebar_Widget::enableAction( const char * name, bool enabled )
+bool Sidebar_Widget::addButton(const QString &desktoppath, int pos)
 {
- 	if (sender()->parent()->isA("ButtonInfo"))
-	{
-		ButtonInfo *btninfo = static_cast<ButtonInfo*>(sender()->parent());
-		if (btninfo)
-		{
-			QString n(name);
-			if (n == "copy")
-				btninfo->copy = enabled;
-			else if (n == "cut")
-				btninfo->cut = enabled;
-			else if (n == "paste")
-				btninfo->paste = enabled;
-			else if (n == "trash")
-				btninfo->trash = enabled;
-			else if (n == "del")
-				btninfo->del = enabled;
-			else if (n == "rename")
-				btninfo->rename = enabled;
-		}
-	}
-}
+        int lastbtn = m_buttons.count();
+        m_buttons.resize(m_buttons.size()+1);
 
+        KSimpleConfig *confFile;
 
-bool  Sidebar_Widget::doEnableActions()
-{
- 	if (!(sender()->parent()->isA("ButtonInfo")))
-	{
-		kdDebug()<<"Couldn't set active module, aborting"<<endl;
-		return false;
-	} else {
-		m_activeModule=static_cast<ButtonInfo*>(sender()->parent());
-		getExtension()->enableAction( "copy", m_activeModule->copy );
-		getExtension()->enableAction( "cut", m_activeModule->cut );
-		getExtension()->enableAction( "paste", m_activeModule->paste );
-		getExtension()->enableAction( "trash", m_activeModule->trash );
-		getExtension()->enableAction( "del", m_activeModule->del );
-		getExtension()->enableAction( "rename", m_activeModule->rename );
-		return true;
-	}
+        kdDebug() << "addButton: " << (m_path + desktoppath) << endl;
 
+        confFile = new KSimpleConfig(m_path+desktoppath, true);
+        confFile->setGroup("Desktop Entry");
+
+        QString icon = confFile->readEntry("Icon");
+        QString name = confFile->readEntry("Name");
+        QString comment = confFile->readEntry("Comment");
+        QString url = confFile->readPathEntry("URL",QString::null);
+        QString lib = confFile->readEntry("X-KDE-KonqSidebarModule");
+
+        delete confFile;
+
+        if (pos == -1)
+        {
+                if (m_style == 0)
+                {
+                        m_buttonBar->appendTab(SmallIcon(icon), lastbtn, name);
+                }
+                Sidebar_ButtonInfo *bi = new Sidebar_ButtonInfo(((KonqSidebar*) m_part),
+                                                                desktoppath,
+                                                                url,
+                                                                lib,
+                                                                name,
+                                                                icon,
+                                                                this);
+                /* int id = */ m_buttons.insert(lastbtn, bi);
+
+                if (m_style == 0)
+                {
+                        KMultiTabBarTab *tab = m_buttonBar->tab(lastbtn);
+                        tab->installEventFilter(this);
+                        connect(tab, SIGNAL(clicked(int)), this, SLOT(showHidePage(int)));
+
+                        // Set Whats This help
+                        // This uses the comments in the .desktop files
+                        QWhatsThis::add(tab, comment);
+                }
+                else {
+                        createView(bi);
+                        connect(bi->module,
+                                SIGNAL(setIcon(const QString&)),
+                                this,
+                                SLOT(setIcon(const QString&)));
+
+                        connect(bi->module,
+                                SIGNAL(setCaption(const QString&)),
+                                this,
+                                SLOT(setText(const QString&)));
+
+                        bi->popupMenu = new KPopupMenu(this);
+                        m_menu->insertItem(QIconSet(SmallIcon(bi->iconName)),
+                                        bi->displayName,
+                                        bi->popupMenu,
+                                        lastbtn + 1000,
+                                        m_menu->count() - 4);
+                        connect(bi->popupMenu, SIGNAL(aboutToShow()), this, SLOT(aboutToShowButtonMenu()));
+                        connect(bi->popupMenu, SIGNAL(activated(int)), this, SLOT(buttonPopupActivate(int)));
+
+                        // #TODO add QWhatsThis
+                }
+        }
+
+        return true;
+}
+
+bool Sidebar_Widget::createView(Sidebar_ButtonInfo *bi)
+{
+        bool ret = true;
+
+        KSimpleConfig confFile(bi->file, true);
+        confFile.setGroup("Desktop Entry");
+
+        if (m_style == 0)
+        {
+                bi->dock = m_area->createDockWidget(confFile.readEntry("Name", i18n("Unknown")), 0);
+        }
+        bi->module = loadModule(bi->dock, bi->file, bi->libName, bi);
+
+        if (bi->module == 0)
+        {
+                delete bi->dock;
+                bi->dock = 0;
+                ret = false;
+        } else
+        {
+                if (m_style == 0)
+                {
+                        bi->dock->setWidget(bi->module->getWidget());
+                        bi->dock->setEnableDocking(KDockWidget::DockTop |
+                                                   KDockWidget::DockBottom /* | KDockWidget::DockDesktop*/);
+                        bi->dock->setDockSite(KDockWidget::DockTop |
+                                              KDockWidget::DockBottom);
+                }
+                else
+                {
+                        m_tb->addItem(bi->module->getWidget(),
+                                      QIconSet(SmallIcon(bi->iconName)),
+                                      bi->displayName);
+                }
+
+                connectModule(bi->module);
+                connect(this, SIGNAL(fileSelection(const KFileItemList&)),
+                        bi->module, SLOT(openPreview(const KFileItemList&)));
+
+                connect(this, SIGNAL(fileMouseOver(const KFileItem&)),
+                        bi->module, SLOT(openPreviewOnMouseOver(const KFileItem&)));
+        }
+
+	return ret;
 }
 
-void Sidebar_Widget::popupMenu( const QPoint &global, const KFileItemList &items )
+KonqSidebarPlugin *Sidebar_Widget::loadModule(QWidget *parent,
+                                              QString &desktopName,
+                                              QString libName,
+                                              Sidebar_ButtonInfo *bi)
 {
-	if (doEnableActions())
-		getExtension()->popupMenu(global,items);
-}
+        KLibLoader *loader = KLibLoader::self();
+
+        // try to load the library
+        KLibrary *lib = loader->library(QFile::encodeName(libName));
+        if (lib)
+        {
+                // get the create_ function
+                QString factory("create_%1");
+                void *create = lib->symbol(QFile::encodeName(factory.arg(libName)));
+
+                if (create)
+                {
+                        // create the module
+                        KonqSidebarPlugin* (*func)(KInstance*, QObject*, QWidget*, QString&, const char*);
+                        func = (KonqSidebarPlugin* (*)(KInstance*, QObject*, QWidget*, QString&, const char*)) create;
+                        QString fullPath(m_path + desktopName);
+                        return (KonqSidebarPlugin*) func(getInstance(), bi, parent, fullPath, 0);
+                }
+        }
+        else
+        {
+                kdWarning() << "Module " << libName << " doesn't specify a library!" << endl;
+        }
 
+        return 0;
+}
 
-void Sidebar_Widget::popupMenu( KXMLGUIClient *client, const QPoint &global, const KFileItemList &items )
+void Sidebar_Widget::connectModule(QObject *mod)
 {
-	if (doEnableActions())
-		getExtension()->popupMenu(client,global,items);
+        if (mod->metaObject()->findSignal("started(KIO::Job*)") != -1)
+        {
+                connect(mod, SIGNAL(started(KIO::Job *)),
+                        this, SIGNAL(started(KIO::Job*)));
+        }
+
+        if (mod->metaObject()->findSignal("completed()") != -1)
+        {
+                connect(mod, SIGNAL(completed()),
+                        this, SIGNAL(completed()));
+        }
+
+        if (mod->metaObject()->findSignal("popupMenu(const QPoint&,const KURL&,const QString&,mode_t)") != -1)
+        {
+                connect(mod, SIGNAL(popupMenu(const QPoint&, const KURL&, const QString&, mode_t)),
+                        this,SLOT(popupMenu(const QPoint&, const KURL&, const QString&, mode_t)));
+        }
+
+        if (mod->metaObject()->findSignal("popupMenu(KXMLGUIClient*,const QPoint&,const KURL&,const QString&,mode_t)") != -1)
+        {
+                connect(mod, SIGNAL(popupMenu(KXMLGUIClient*, const QPoint&, const KURL&, const QString&, mode_t)),
+                        this, SLOT(popupMenu(KXMLGUIClient*, const QPoint&, const KURL&,const QString&, mode_t)));
+        }
+
+        if (mod->metaObject()->findSignal("popupMenu(const QPoint&,const KFileItemList&)") != -1)
+        {
+                connect(mod, SIGNAL(popupMenu(const QPoint&, const KFileItemList&)),
+                        this, SLOT(popupMenu(const QPoint&, const KFileItemList&)));
+        }
+
+        if (mod->metaObject()->findSignal("openURLRequest(const KURL&,const KParts::URLArgs&)") != -1)
+        {
+                connect(mod, SIGNAL(openURLRequest(const KURL&, const KParts::URLArgs&)),
+                        this, SLOT(openURLRequest(const KURL&, const KParts::URLArgs&)));
+        }
+
+        if (mod->metaObject()->findSignal("submitFormRequest(const char*,const QString&,const QByteArray&,const QString&,const QString&,const QString&)") != -1)
+        {
+                connect(mod, SIGNAL(submitFormRequest(const char*, const QString&, const QByteArray&, const QString&, const QString&, const QString&)),
+                        this, SLOT(submitFormRequest(const char*, const QString&, const QByteArray&, const QString&, const QString&, const QString&)));
+        }
+
+        if (mod->metaObject()->findSignal("enableAction(const char*,bool)") != -1)
+        {
+                connect(mod, SIGNAL(enableAction(const char*, bool)),
+                        this, SLOT(enableAction(const char*, bool)));
+        }
+
+        if (mod->metaObject()->findSignal("createNewWindow(const KURL&,const KParts::URLArgs&)") != -1)
+        {
+               connect(mod, SIGNAL(createNewWindow(const KURL&, const KParts::URLArgs&)),
+                        this, SLOT(createNewWindow(const KURL&, const KParts::URLArgs&)));
+        }
 }
 
-void Sidebar_Widget::popupMenu( const QPoint &global, const KURL &url,
-	const QString &mimeType, mode_t mode)
+void Sidebar_Widget::initialCopy()
 {
-	if (doEnableActions())
-		getExtension()->popupMenu(global,url,mimeType,mode);
+        kdDebug() << "Initial copy" << endl;
+
+        QStringList dirtreeDirs;
+       if (m_universalMode)
+        {
+               dirtreeDirs = KGlobal::dirs()->findDirs("data", "konqsidebartng/kicker_entries/");
+        }
+        else
+        {
+               dirtreeDirs = KGlobal::dirs()->findDirs("data", "konqsidebartng/entries/");
+        }
+
+        if (dirtreeDirs.last() == m_path)
+        {
+                return; // oups;
+        }
+
+        int nVersion = -1;
+        KSimpleConfig lcfg(m_path + ".version");
+        int lVersion = lcfg.readNumEntry("Version", 0);
+        for (QStringList::const_iterator ddit = dirtreeDirs.begin(); ddit != dirtreeDirs.end(); ++ddit) {
+                QString dirtreeDir = *ddit;
+                if (dirtreeDir == m_path) continue;
+
+                kdDebug() << "************************************ retrieving directory info:" << dirtreeDir << endl;
+
+               if (!dirtreeDir.isEmpty() && dirtreeDir != m_path)
+                {
+                        KSimpleConfig gcfg(dirtreeDir + ".version");
+                        int gversion = gcfg.readNumEntry("Version", 1);
+                        nVersion = (nVersion > gversion) ? nVersion : gversion;
+                        if (lVersion >= gversion)
+                       {
+                                continue;
+                        }
+
+                        QDir dir(m_path);
+                        QStringList entries = dir.entryList(QDir::Files);
+                                                                
+                        QStringList dirEntries = dir.entryList(QDir::Dirs | QDir::NoSymLinks);
+                        dirEntries.remove(".");
+                        dirEntries.remove("..");
+
+                        QDir globalDir(dirtreeDir);
+                        Q_ASSERT(globalDir.isReadable());
+                        // Only copy the entries that don't exist yet in the local dir
+                       QStringList globalDirEntries = globalDir.entryList();
+                        QStringList::ConstIterator eIt = globalDirEntries.begin();
+                        QStringList::ConstIterator eEnd = globalDirEntries.end();
+                        for (; eIt != eEnd; ++eIt)
+                        {
+                                // kdDebug(1201) << "KonqSidebarTree::scanDir dirtreeDir contains " << *eIt << endl;
+                               if (*eIt != "." && *eIt != ".." &&
+                                    !entries.contains(*eIt) &&
+                                   !dirEntries.contains(*eIt))
+                                {
+                                       // we don't have that one yet -> copy it.
+                                        QString cp("cp -R ");
+                                        cp += KProcess::quote(dirtreeDir + *eIt);
+                                       cp += " ";
+                                        cp += KProcess::quote(m_path);
+                                        kdDebug() << "SidebarWidget::intialCopy executing " << cp << endl;
+                                        ::system(QFile::encodeName(cp));
+                                }
+                        }
+                }
+
+              lcfg.writeEntry("Version", (nVersion > lVersion) ? nVersion : lVersion);
+              lcfg.sync();
+        }
 }
 
-void Sidebar_Widget::popupMenu( KXMLGUIClient *client,
-	const QPoint &global, const KURL &url,
-	const QString &mimeType, mode_t mode )
+void Sidebar_Widget::doLayout()
 {
-	if (doEnableActions())
-		getExtension()->popupMenu(client,global,url,mimeType,mode);
+        if (m_layout)
+        {
+                delete m_layout;
+        }
+
+        m_layout = new QHBoxLayout(this);
+        if (m_style == 0)
+       {
+                if  (m_showTabsLeft)
+                {
+                        m_layout->add(m_buttonBar);
+                        m_layout->add(m_area);
+                        m_buttonBar->setPosition(KMultiTabBar::Left);
+                }
+                else
+                {
+                        m_layout->add(m_area);
+                        m_layout->add(m_buttonBar);
+                        m_buttonBar->setPosition(KMultiTabBar::Right);
+                }
+        }
+        else
+        {
+                m_layout->add(m_widget);
+        }
+        m_layout->activate();
+
+        if (m_style == 0)
+        {
+                if (m_hideTabs)
+                {
+                     m_buttonBar->hide();
+                }
+                else
+                {
+                        m_buttonBar->show();
+                }
+        }
 }
 
-void Sidebar_Widget::connectModule(QObject *mod)
+void Sidebar_Widget::collapseExpandSidebar()
 {
-	if (mod->metaObject()->findSignal("started(KIO::Job*)") != -1) {
-		connect(mod,SIGNAL(started(KIO::Job *)),this, SIGNAL(started(KIO::Job*)));
-	}
+       if (!parentWidget())
+        {
+                return; // Can happen during destruction
+        }
 
-	if (mod->metaObject()->findSignal("completed()") != -1) {
-		connect(mod,SIGNAL(completed()),this,SIGNAL(completed()));
-	}
+        if (m_style == 0)
+        {
+                if (m_visibleViews.count() == 0)
+                {
+                        m_somethingVisible = false;
+                        parentWidget()->setMaximumWidth(minimumSizeHint().width());
+                }
+                else
+                {
+                        m_somethingVisible = true;
+                        parentWidget()->setMaximumWidth(32767);
+                }
+        }
 
-	if (mod->metaObject()->findSignal("popupMenu(const QPoint&,const KURL&,const QString&,mode_t)") != -1) {
-		connect(mod,SIGNAL(popupMenu( const QPoint &, const KURL &,
-			const QString &, mode_t)),this,SLOT(popupMenu( const
-			QPoint &, const KURL&, const QString &, mode_t)));
-	}
+        updateGeometry();
+        emit panelHasBeenExpanded(m_somethingVisible);
+}
 
-	if (mod->metaObject()->findSignal("popupMenu(KXMLGUIClient*,const QPoint&,const KURL&,const QString&,mode_t)") != -1) {
-		connect(mod,SIGNAL(popupMenu( KXMLGUIClient *, const QPoint &,
-			const KURL &,const QString &, mode_t)),this,
-			SLOT(popupMenu( KXMLGUIClient *, const QPoint &,
-			const KURL &,const QString &, mode_t)));
-	}
+bool Sidebar_Widget::doEnableActions()
+{
+        if (!(sender()->parent()->isA("Sidebar_ButtonInfo")))
+       {
+               kdDebug() << "Couldn't set active module, aborting" << endl;
+               return false;
+        }
+        else
+        {
+                m_activeButton = static_cast<Sidebar_ButtonInfo*>(sender()->parent());
+                getExtension()->enableAction("copy", m_activeButton->copy);
+                getExtension()->enableAction("cut", m_activeButton->cut);
+                getExtension()->enableAction("paste", m_activeButton->paste);
+                getExtension()->enableAction("trash", m_activeButton->trash);
+                getExtension()->enableAction("del", m_activeButton->del);
+                getExtension()->enableAction("rename", m_activeButton->rename);
+                return true;
+        }
+}
 
-	if (mod->metaObject()->findSignal("popupMenu(const QPoint&,const KFileItemList&)") != -1) {
-		connect(mod,SIGNAL(popupMenu( const QPoint &, const KFileItemList & )),
-			this,SLOT(popupMenu( const QPoint &, const KFileItemList & )));
-	}
+void Sidebar_Widget::setIcon(const QString &str)
+{
+        KonqSidebarPlugin *module = (KonqSidebarPlugin *) sender();
 
-	if (mod->metaObject()->findSignal("openURLRequest(const KURL&,const KParts::URLArgs&)") != -1) {
-		connect(mod,SIGNAL(openURLRequest( const KURL &, const KParts::URLArgs &)),
-			this,SLOT(openURLRequest( const KURL &, const KParts::URLArgs &)));
-	}
+       int index = m_tb->indexOf(module->getWidget());
 
-	if (mod->metaObject()->findSignal("submitFormRequest(const char*,const QString&,const QByteArray&,const QString&,const QString&,const QString&)") != -1) {
-		connect(mod,
-			SIGNAL(submitFormRequest(const char*,const QString&,const QByteArray&,const QString&,const QString&,const QString&)),
-			this,
-			SLOT(submitFormRequest(const char*,const QString&,const QByteArray&,const QString&,const QString&,const QString&)));
-	}
+        QIconSet is(SmallIcon(str));
+        m_tb->setItemIconSet(index, is);
 
-	if (mod->metaObject()->findSignal("enableAction(const char*,bool)") != -1) {
-		connect(mod,SIGNAL(enableAction( const char *, bool)),
-			this,SLOT(enableAction(const char *, bool)));
-	}
-
-	if (mod->metaObject()->findSignal("createNewWindow(const KURL&,const KParts::URLArgs&)") != -1) {
-		connect(mod,SIGNAL(createNewWindow( const KURL &, const KParts::URLArgs &)),
-			this,SLOT(createNewWindow( const KURL &, const KParts::URLArgs &)));
-	}
+        m_menu->changeItem(index + 1000, is, m_menu->text(index + 1000));
 }
 
+void Sidebar_Widget::setText(const QString &str)
+{
+        KonqSidebarPlugin *module = (KonqSidebarPlugin *) sender();
 
+        int index = m_tb->indexOf(module->getWidget());
+        m_tb->setItemLabel(index, str);
 
-Sidebar_Widget::~Sidebar_Widget()
-{
-        m_config->writeEntry("OpenViews", m_visibleViews);
-	if (m_configTimer.isActive())
-		saveConfig();
-	delete m_config;
-	m_noUpdate = true;
-	for (uint i=0;i<m_buttons.count();i++)
-	{
-		ButtonInfo *button = m_buttons.at(i);
-		if (button->dock)
-			button->dock->undock();
-	}
+        m_menu->changeItem(index + 1000, str);
 }
 
-void Sidebar_Widget::customEvent(QCustomEvent* ev)
-{
-	if (KonqFileSelectionEvent::test(ev))
-	{
-		emit fileSelection(static_cast<KonqFileSelectionEvent*>(ev)->selection());
-	} else if (KonqFileMouseOverEvent::test(ev)) {
-		if (!(static_cast<KonqFileMouseOverEvent*>(ev)->item())) {
-			emit fileMouseOver(KFileItem(KURL(),QString::null,KFileItem::Unknown));
-		} else {
-			emit fileMouseOver(*static_cast<KonqFileMouseOverEvent*>(ev)->item());
-		}
-	} 
+/**************************************************************/
+/*                      Sidebar_AddBackEnd                    */
+/**************************************************************/
+Sidebar_AddBackEnd::Sidebar_AddBackEnd(QWidget *parent,
+                                       QPopupMenu *addMenu,
+                                       const char *name)
+        : QObject(parent, name),
+         m_menu(addMenu)
+{
+        connect(m_menu, SIGNAL(aboutToShow()), this, SLOT(aboutToShowAddMenu()));
+        connect(m_menu, SIGNAL(activated(int)), this, SLOT(activatedAddMenu(int)));
+}
+
+void Sidebar_AddBackEnd::aboutToShowAddMenu()
+{
+        if (!m_menu)
+        {
+                return;
+        }
+
+        KStandardDirs *dirs = KGlobal::dirs();
+        QStringList list = dirs->findAllResources("data", "konqsidebartng/add/*.desktop", true, true);
+        m_libNames.setAutoDelete(true);
+        m_libNames.resize(0);
+        m_libParam.setAutoDelete(true);
+        m_libParam.resize(0);
+        m_menu->clear();
+        int i = 0;
+
+        for (QStringList::Iterator it = list.begin(); it != list.end(); ++it, i++)
+        {
+                KDesktopFile *confFile = new KDesktopFile(*it, true);
+                if (!confFile->tryExec())
+                {
+                        delete confFile;
+                        i--;
+                        continue;
+                }
+
+                if (static_cast<Sidebar_Widget *>(parent())->universalMode())
+                {
+                        if (confFile->readEntry("X-KDE-KonqSidebarUniversal").upper() != "TRUE")
+                        {
+                                delete confFile;
+                                i--;
+                                continue;
+                       }
+                }
+                else
+                {
+                        if (confFile->readEntry("X-KDE-KonqSidebarBrowser").upper() == "FALSE")
+                        {
+                                delete confFile;
+                                i--;
+                                continue;
+                        }
+                }
+
+                QString icon = confFile->readIcon();
+                if (!icon.isEmpty())
+                {
+                        m_menu->insertItem(SmallIcon(icon),
+                                         confFile->readEntry("Name"), i);
+                }
+                else
+                {
+                        m_menu->insertItem(confFile->readEntry("Name"), i);
+                }
+
+                m_libNames.resize(m_libNames.size() + 1);
+                m_libNames.insert(m_libNames.count(), new QString(confFile->readEntry("X-KDE-KonqSidebarAddModule")));
+                m_libParam.resize(m_libParam.size() + 1);
+                m_libParam.insert(m_libParam.count(), new QString(confFile->readEntry("X-KDE-KonqSidebarAddParam")));
+                delete confFile;
+        }
+
+        m_menu->insertSeparator();
+        m_menu->insertItem(i18n("Rollback to System Default"), i);
+}
+
+void Sidebar_AddBackEnd::doRollBack()
+{
+        QWidget *p = static_cast<QWidget *>(parent());
+        if (KMessageBox::questionYesNo(p, i18n("<qt>This removes all your entries from the sidebar and adds the system default ones.<BR><B>This procedure is irreversible</B><BR>Do you want to proceed?</qt>")) == KMessageBox::Yes)
+        {
+                KStandardDirs *dirs = KGlobal::dirs();
+                QString loc = dirs->saveLocation("data", "konqsidebartng/" + static_cast<Sidebar_Widget *>(parent())->currentProfile() + "/", true);
+                QDir dir(loc);
+                QStringList dirEntries = dir.entryList( QDir::Dirs | QDir::NoSymLinks );
+                dirEntries.remove(".");
+                dirEntries.remove("..");
+                for ( QStringList::Iterator it = dirEntries.begin(); it != dirEntries.end(); ++it )
+                {
+                        if ((*it) != "add")
+                        {
+                               KIO::NetAccess::del(KURL(loc + (*it)), p);
+                        }
+               }
+
+               emit initialCopyNeeded();
+        }
+}
+
+void Sidebar_AddBackEnd::activatedAddMenu(int id)
+{
+        kdDebug() << "activatedAddMenu: " << QString("%1").arg(id) << endl;
+        if (((uint) id) == m_libNames.size())
+        {
+                doRollBack();
+        }
+
+        if(((uint) id) >= m_libNames.size())
+        {
+                return;
+        }
+
+        KLibLoader *loader = KLibLoader::self();
+
+      // try to load the library
+        QString libname = *m_libNames.at(id);
+        KLibrary *lib = loader->library(QFile::encodeName(libname));
+       if (lib)
+      {
+                // get the create_ function
+                QString factory("add_");
+               factory = factory + (*m_libNames.at(id));
+                void *add = lib->symbol(QFile::encodeName(factory));
+
+                if (add)
+                {
+                        // call the add function
+                        bool (*func)(QString*, QString*, QMap<QString, QString> *);
+                     QMap<QString, QString> map;
+                        func = (bool (*)(QString*, QString*, QMap<QString, QString> *)) add;
+                        QString tmp;
+                       if (func(&tmp, m_libParam.at(id), &map))
+                        {
+                                Sidebar_Widget *sb = static_cast<Sidebar_Widget *>(parent());
+                                QString myFile = findFileName(tmp, sb->universalMode(), sb->currentProfile());
+                                if (!myFile.isEmpty())
+                                {
+                                        kdDebug() << "trying to save to file: "<< myFile << endl;
+                                        KSimpleConfig scf(myFile, false);
+                                        scf.setGroup("Desktop Entry");
+                                        for (QMap<QString,QString>::ConstIterator it = map.begin(); it != map.end(); ++it)
+                                        {
+                                                kdDebug() << "writing:" << it.key() << " / " << it.data() << endl;
+                                                scf.writePathEntry(it.key(), it.data());
+                                        }
+                                        scf.sync();
+                                        emit updateNeeded();
+
+                                }
+                                else
+                                {
+                                        kdWarning() << "No unique filename found" << endl;
+                                }
+                        }
+                        else
+                        {
+                                kdWarning() << "No new entry (error?)" << endl;
+                        }
+                }
+        }
+        else
+        {
+               kdWarning() << "libname:" << m_libNames.at(id) << " doesn't specify a library!" << endl;
+       }
+}
+
+static QString findFileName(QString &tmp, bool universal, const QString &profile)
+{
+        QString myFile, filename;
+        KStandardDirs *dirs = KGlobal::dirs();
+
+       if (universal)
+       {
+                dirs->saveLocation("data", "konqsidebartng/kicker_entries/", true);
+                tmp.prepend("/konqsidebartng/kicker_entries/");
+       }
+       else
+        {
+               dirs->saveLocation("data", "konqsidebartng/" + profile + "/entries/", true);
+              tmp.prepend("/konqsidebartng/" + profile + "/entries/");
+        }
+
+        filename = tmp.arg("");
+        myFile = locateLocal("data", filename);
+
+        if (QFile::exists(myFile))
+        {
+                for (ulong l = 0; l < ULONG_MAX; l++)
+                {
+                        filename = tmp.arg(l);
+                        myFile = locateLocal("data", filename);
+                        if (!QFile::exists(myFile))
+                        {
+                                break;
+                        }
+                        else
+                        {
+                                myFile = QString::null;
+                        }
+                }
+        }
+
+        return myFile;
 }
 
-void Sidebar_Widget::resizeEvent(QResizeEvent* ev)
+/**************************************************************/
+/*                      Sidebar_HeaderButton                  */
+/**************************************************************/
+void Sidebar_HeaderButton::enterEvent(QEvent *)
 {
-	if (m_somethingVisible && m_userMovedSplitter)
-	{
-		int newWidth = width();
-                QSplitter *split = splitter();
-		if (split && (m_savedWidth != newWidth))
-		{
-			QValueList<int> sizes = split->sizes();
-			if ((sizes.count() >= 2) && (sizes[1]))
-			{
-				m_savedWidth = newWidth;
-				updateGeometry();
-				m_configTimer.start(400, true);
-			}
-		}
-	}
-	m_userMovedSplitter = false;
-	QWidget::resizeEvent(ev);
+	m_drawBorder = !m_drawBorder;
+	repaint(false);
 }
 
-QSplitter *Sidebar_Widget::splitter() const
+void Sidebar_HeaderButton::leaveEvent(QEvent *)
 {
-	if (m_universalMode) return 0;
-	QObject *p = parent();
-	if (!p) return 0;
-	p = p->parent();
-	return static_cast<QSplitter*>(p);
+	m_drawBorder = !m_drawBorder;
+	repaint(false);
 }
 
-void Sidebar_Widget::userMovedSplitter()
+void Sidebar_HeaderButton::drawButton(QPainter *p)
 {
-	m_userMovedSplitter = true;
+	if (m_drawBorder || isDown())
+	{
+		return KPushButton::drawButton(p);
+	}
+	p->fillRect(rect(), colorGroup().background());
+	return KPushButton::drawButtonLabel(p);
 }
diff -purN kdebase-3.5.3.orig/konqueror/sidebar/sidebar_widget.h kdebase-3.5.3/konqueror/sidebar/sidebar_widget.h
--- kdebase-3.5.3.orig/konqueror/sidebar/sidebar_widget.h	2005-09-10 03:25:47.000000000 -0500
+++ kdebase-3.5.3/konqueror/sidebar/sidebar_widget.h	2006-07-17 20:19:36.000000000 -0500
@@ -32,188 +32,262 @@
 #include "konqsidebariface_p.h"
 
 class KDockWidget;
+class KPopupMenu;
+
 class QHBoxLayout;
+class QPopupMenu;
 class QSplitter;
-class QStringList;
+class QToolBox;
+
+class Sidebar_AddBackEnd;
+class Sidebar_ButtonInfo;
+class Sidebar_HeaderButton;
 
-class ButtonInfo: public QObject, public KonqSidebarIface
+class Sidebar_Widget: public QWidget
 {
 	Q_OBJECT
+
 public:
-	ButtonInfo(const QString& file_, class KonqSidebarIface *part, class KDockWidget *dock_,
-			const QString &url_,const QString &lib,
-			const QString &dispName_, const QString &iconName_,
-			QObject *parent)
-		: QObject(parent), file(file_), dock(dock_), URL(url_),
-		libName(lib), displayName(dispName_), iconName(iconName_), m_part(part)
-		{
-		copy = cut = paste = trash = del = rename =false;
-		}
+        Sidebar_Widget(QWidget *parent,
+                       KParts::ReadOnlyPart *part,
+                       const char *name,
+                       bool universalMode,
+                       const QString &currentProfile);
+        ~Sidebar_Widget();
+
+        KInstance *getInstance();
+        KParts::BrowserExtension *getExtension();
+
+        bool universalMode() const { return m_universalMode; }
+        QString currentProfile() const { return m_profile; }
+        bool openURL(const KURL &url);
+        void stdAction(const char *name);
+	QSize sizeHint() const;
 
-	~ButtonInfo() {}
+public slots:
 
-	QString file;
-	KDockWidget *dock;
-	KonqSidebarPlugin *module;
-	QString URL;
-	QString libName;
-	QString displayName;
-	QString iconName;
-	bool copy;
-	bool cut;
-	bool paste;
-	bool trash;
-	bool del;
-        bool rename;
-        KonqSidebarIface *m_part;
-	virtual bool universalMode() {return m_part->universalMode();}
-};
+        void addWebSideBar(const KURL& url, const QString& name);
 
+        /* The following public slots are wrappers for browserextension fields */
+
+        /* @internal
+         * @since 3.2
+         * ### KDE4 remove me
+         */
+        void submitFormRequest(const char*,
+                               const QString&,
+                               const QByteArray&,
+                               const QString&,
+                               const QString&,
+                               const QString&);
+
+        void openURLRequest(const KURL &url,
+                            const KParts::URLArgs &args = KParts::URLArgs());
+
+        void createNewWindow(const KURL &url,
+                             const KParts::URLArgs &args = KParts::URLArgs());
+        void createNewWindow(const KURL &url,
+                             const KParts::URLArgs &args,
+                             const KParts::WindowArgs &windowArgs,
+                             KParts::ReadOnlyPart *&part);
+
+        void popupMenu(const QPoint &global,
+                       const KFileItemList &items);
+        void popupMenu(KXMLGUIClient *client,
+                       const QPoint &global,
+                       const KFileItemList &items);
+        void popupMenu(const QPoint &global,
+                       const KURL &url,
+                       const QString &mimeType,
+                       mode_t mode = (mode_t) - 1);
+        void popupMenu(KXMLGUIClient *client,
+                       const QPoint &global,
+                       const KURL &url,
+                       const QString &mimeType,
+                       mode_t mode = (mode_t) - 1);
+
+        void enableAction(const char *name, bool enabled);
+        void userMovedSplitter();
+
+protected:
+        void customEvent(QCustomEvent*);
+        void resizeEvent(QResizeEvent*);
+        bool eventFilter(QObject*, QEvent*);
+        void mousePressEvent(QMouseEvent*);
 
-class addBackEnd: public QObject
-{
-	Q_OBJECT
-public:
-	addBackEnd(QWidget *parent,class QPopupMenu *addmenu, bool univeral, const QString &currentProfile, const char *name=0);
-	~addBackEnd(){;}
 protected slots:
-	void aboutToShowAddMenu();
-	void activatedAddMenu(int);
+        void showHidePage(int value);
+        void createButtons();
+        void updateButtons();
+        void finishRollBack();
+        void activatedMenu(int id);
+        void buttonPopupActivate(int);
+        void dockWidgetHasUndocked(KDockWidget*);
+        void aboutToShowConfigMenu();
+        void aboutToShowButtonMenu();
+        void saveConfig();
+
 signals:
-	void updateNeeded();
-	void initialCopyNeeded();
+        void started(KIO::Job *);
+        void completed();
+        void fileSelection(const KFileItemList &iems);
+        void fileMouseOver(const KFileItem &item);
+        void panelHasBeenExpanded(bool);
+
 private:
-	QGuardedPtr<class QPopupMenu> menu;
-	QPtrVector<QString> libNames;
-	QPtrVector<QString> libParam;
-	bool m_universal;
-	QString m_currentProfile;
-	void doRollBack();
-	QWidget *m_parent;
+        void setupGUI();
+        void changeStyle();
+        void readConfig();
+        void initialCopy();
+
+        QSplitter *splitter() const;
+        bool addButton(const QString &desktopPath, int pos = -1);
+        bool createView(Sidebar_ButtonInfo *bi);
+        KonqSidebarPlugin *loadModule(QWidget *parent,
+                                      QString &desktopName,
+                                      QString libName,
+                                      Sidebar_ButtonInfo *bi);
+        void connectModule(QObject *module);
+
+        void doLayout();
+        void collapseExpandSidebar();
+        bool doEnableActions();
+
+        KParts::ReadOnlyPart *m_part;
+        bool m_universalMode;
+        QString m_profile;
+        int m_style;
+
+        QHBoxLayout *m_layout;
+
+        // old sidebar
+        KDockArea *m_area;
+        KDockWidget *m_mainDockWidget;
+        KMultiTabBar *m_buttonBar;
+
+        // new sidebar
+        QWidget *m_widget;
+       QWidget *m_header;
+        QToolBox *m_tb;
+
+        QPopupMenu *m_menu;
+        QPopupMenu *m_addMenu;
+        KPopupMenu *m_buttonPopup;
+
+        QPtrVector<Sidebar_ButtonInfo> m_buttons;
+        QGuardedPtr<Sidebar_ButtonInfo> m_currentButton;
+        QGuardedPtr<Sidebar_ButtonInfo> m_activeButton;
+
+        KConfig *m_config;
+        QTimer m_configTimer;
+
+        KURL m_storedUrl;
+
+        int m_savedWidth;
+        int m_latestViewed;
+
+        bool m_userMovedSplitter;
+        bool m_hasStoredUrl;
+        bool m_singleWidgetMode;
+        bool m_showTabsLeft;
+        bool m_hideTabs;
+        bool m_showHeader;
+        bool m_showExtraButtons;
+        bool m_somethingVisible;
+        bool m_noUpdate;
+        bool m_initial;
+
+        QString m_path;
+        QString m_relPath;
+        QStringList m_visibleViews; // The views that are actually open
+        QStringList m_openViews;    // The views that should be opened
+
+        static bool s_skipInitialCopy;
+
+private slots:
+        void setIcon(const QString &);
+        void setText(const QString &);
 };
 
-class KDE_EXPORT Sidebar_Widget: public QWidget
+class Sidebar_AddBackEnd : public QObject
 {
-	Q_OBJECT
-public:
-	friend class ButtonInfo;
+        Q_OBJECT
 public:
-	Sidebar_Widget(QWidget *parent, KParts::ReadOnlyPart *par,
-						const char * name,bool universalMode, 
-						const QString &currentProfile);
-	~Sidebar_Widget();
-	bool openURL(const class KURL &url);
-	void stdAction(const char *handlestd);
-	//virtual KParts::ReadOnlyPart *getPart();
-	KParts::BrowserExtension *getExtension();
-        virtual QSize sizeHint() const;	
-
-public slots:
-	void addWebSideBar(const KURL& url, const QString& name);
-
-protected:
-	void customEvent(QCustomEvent* ev);
-	void resizeEvent(QResizeEvent* ev);
-	virtual bool eventFilter(QObject*,QEvent*);
-	virtual void mousePressEvent(QMouseEvent*);
+        Sidebar_AddBackEnd(QWidget *parent,
+                           QPopupMenu *addMenu,
+                           const char *name = 0);
+        ~Sidebar_AddBackEnd(){;}
 
 protected slots:
-	void showHidePage(int value);
-	void createButtons();
-	void updateButtons();
-	void finishRollBack();
-	void activatedMenu(int id);
-	void buttonPopupActivate(int);
-  	void dockWidgetHasUndocked(KDockWidget*);
-	void aboutToShowConfigMenu();
-	void saveConfig();
+        void aboutToShowAddMenu();
+        void activatedAddMenu(int);
 
 signals:
-	void started(KIO::Job *);
-	void completed();
-	void fileSelection(const KFileItemList& iems);
-	void fileMouseOver(const KFileItem& item);
+        void updateNeeded();
+        void initialCopyNeeded();
+
+private:
+        void doRollBack();
+
+        QGuardedPtr<QPopupMenu> m_menu;
+        QPtrVector<QString> m_libNames;
+        QPtrVector<QString> m_libParam;
+};
+
+class Sidebar_ButtonInfo : public QObject, public KonqSidebarIface
+{
+	Q_OBJECT
 
+	friend class Sidebar_Widget;
 public:
-	/* interface KonqSidebar_PluginInterface*/
-	KInstance  *getInstance();
-//        virtual void showError(QString &);      for later extension
-//        virtual void showMessage(QString &);    for later extension
-	/* end of interface implementation */
+	Sidebar_ButtonInfo(KonqSidebarIface *part_,
+			const QString& file_,
+			const QString &url_,
+			const QString &libName_,
+			const QString &dispName_,
+			const QString &iconName_,
+			QObject *parent)
+		: QObject(parent),
+		  part(part_),
+		  module(0),
+		  dock(0),
+		  popupMenu(0),
+		  file(file_),
+		  url(url_),
+		  libName(libName_),
+		  displayName(dispName_),
+		  iconName(iconName_)
+		{
+		  cut = copy = paste = rename = trash = del = false;
+		}
 
+	~Sidebar_ButtonInfo() {}
+
+	bool universalMode() { return part->universalMode(); }
 
- /* The following public slots are wrappers for browserextension fields */
-public slots:
-	void openURLRequest( const KURL &url, const KParts::URLArgs &args = KParts::URLArgs() );
-	/* @internal
-	 * @since 3.2
-	 * ### KDE4 remove me
-	 */
-	void submitFormRequest(const char*,const QString&,const QByteArray&,const QString&,const QString&,const QString&);
-  	void createNewWindow( const KURL &url, const KParts::URLArgs &args = KParts::URLArgs() );
-	void createNewWindow( const KURL &url, const KParts::URLArgs &args,
-             const KParts::WindowArgs &windowArgs, KParts::ReadOnlyPart *&part );
-
-	void popupMenu( const QPoint &global, const KFileItemList &items );
-  	void popupMenu( KXMLGUIClient *client, const QPoint &global, const KFileItemList &items );
-	void popupMenu( const QPoint &global, const KURL &url,
-		const QString &mimeType, mode_t mode = (mode_t)-1 );
-	void popupMenu( KXMLGUIClient *client,
-		const QPoint &global, const KURL &url,
-		const QString &mimeType, mode_t mode = (mode_t)-1 );
-	void enableAction( const char * name, bool enabled );
-	void userMovedSplitter();
-	
-private:
-	QSplitter *splitter() const;
-	bool addButton(const QString &desktoppath,int pos=-1);
-	bool createView(ButtonInfo *data);
-	KonqSidebarPlugin *loadModule(QWidget *par,QString &desktopName,QString lib_name,ButtonInfo *bi);
-	void readConfig();
-	void initialCopy();
-	void doLayout();
-	void connectModule(QObject *mod);
-	void collapseExpandSidebar();
-	bool doEnableActions();
-	bool m_universalMode;
-	bool m_userMovedSplitter;
 private:
-	KParts::ReadOnlyPart *m_partParent;
-	KDockArea *m_area;
-	KDockWidget *m_mainDockWidget;
-
-	KMultiTabBar *m_buttonBar;
-        QPtrVector<ButtonInfo> m_buttons;
-	QHBoxLayout *m_layout;
-	KPopupMenu *m_buttonPopup;
-	QPopupMenu *m_menu;
-	QGuardedPtr<ButtonInfo> m_activeModule;
-	QGuardedPtr<ButtonInfo> m_currentButton;
-	
-	KConfig *m_config;
-	QTimer m_configTimer;
-	
-	KURL m_storedUrl;
-	int m_savedWidth;
-	int m_latestViewed;
-
-	bool m_hasStoredUrl;
-	bool m_singleWidgetMode;
-	bool m_showTabsLeft;
-	bool m_hideTabs;
-	bool m_showExtraButtons;
-	bool m_somethingVisible;
-	bool m_noUpdate;
-	bool m_initial;
-
-	QString m_path;
-	QString m_relPath;
-	QString m_currentProfile;
-	QStringList m_visibleViews; // The views that are actually open
-	QStringList m_openViews; // The views that should be opened
+	KonqSidebarIface *part;
+	KonqSidebarPlugin *module;
 
-signals:
-	void panelHasBeenExpanded(bool);
+	// used by old sidebar
+	KDockWidget *dock;
+
+	// used by new sidebar
+	KPopupMenu *popupMenu;
+
+	QString file;
+	QString url;
+	QString libName;
+	QString displayName;
+	QString iconName;
+
+	bool cut;
+	bool copy;
+	bool paste;
+	bool rename;
+	bool trash;
+	bool del;
 };
 
 #endif
+
