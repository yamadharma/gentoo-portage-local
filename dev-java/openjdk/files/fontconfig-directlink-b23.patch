diff -Naur work_orig/o/jdk/make/sun/awt/Makefile work/o/jdk/make/sun/awt/Makefile
--- work_orig/o/jdk/make/sun/awt/Makefile	2008-01-12 20:54:45.000000000 -0500
+++ work/o/jdk/make/sun/awt/Makefile	2008-01-12 21:03:06.000000000 -0500
@@ -506,6 +506,11 @@
 LDFLAGS += -L$(OPENWIN_LIB)
 endif
 
+ifeq ($(DIRECT_LINK_FONTCONFIG), true)
+CPPFLAGS += -DDIRECT_LINK_FONTCONFIG
+LDFLAGS += -lfontconfig
+endif
+
 LDFLAGS += -L$(LIBDIR)/$(LIBARCH)/$(TSOBJDIR) \
 	   $(AWT_RUNPATH)
 
diff -Naur work_orig/o/jdk/make/sun/xawt/Makefile work/o/jdk/make/sun/xawt/Makefile
--- work_orig/o/jdk/make/sun/xawt/Makefile	2008-01-12 20:54:45.000000000 -0500
+++ work/o/jdk/make/sun/xawt/Makefile	2008-01-12 21:03:39.000000000 -0500
@@ -53,6 +53,11 @@
 dummy := $(shell $(MKDIR) -p $(LIB_LOCATION))
 endif
 
+ifeq ($(DIRECT_LINK_FONTCONFIG), true)
+CPPFLAGS += -DDIRECT_LINK_FONTCONFIG
+LDFLAGS += -lfontconfig
+endif
+
 # Since this library will be living in a subdirectory below the other libraries
 #   we need to add an extra runpath so that libraries in the upper directory
 #   are found at runtime.
diff -Naur work_orig/o/jdk/src/solaris/native/sun/awt/fontpath.c work/o/jdk/src/solaris/native/sun/awt/fontpath.c
--- work_orig/o/jdk/src/solaris/native/sun/awt/fontpath.c	2008-01-12 20:54:45.000000000 -0500
+++ work/o/jdk/src/solaris/native/sun/awt/fontpath.c	2008-01-12 21:02:24.000000000 -0500
@@ -612,6 +612,9 @@
 #include <link.h>
 #endif
 
+#ifdef DIRECT_LINK_FONTCONFIG
+# include <fontconfig/fontconfig.h>
+#else /* DIRECT_LINK_FONTCONFIG */
 #include "fontconfig.h"
 
 
@@ -735,11 +738,14 @@
 typedef FcFontSet* (*FcFontSetCreateFuncType)();
 typedef FcBool (*FcFontSetAddFuncType)(FcFontSet *s, FcPattern *font);
 
+#endif /* DIRECT_LINK_FONTCONFIG */
 
 static char **getFontConfigLocations() {
 
     char **fontdirs;
     int numdirs = 0;
+
+#ifndef DIRECT_LINK_FONTCONFIG
     FcInitLoadConfigFuncType FcInitLoadConfig;
     FcPatternBuildFuncType FcPatternBuild;
     FcObjectSetFuncType FcObjectSetBuild;
@@ -749,6 +755,7 @@
     FcPatternDestroyFuncType FcPatternDestroy;
     FcFontSetDestroyFuncType FcFontSetDestroy;
 
+
     FcConfig *fontconfig;
     FcPattern *pattern;
     FcObjectSet *objset;
@@ -789,6 +796,7 @@
         closeFontConfig(libfontconfig, JNI_FALSE);
         return NULL;
     }
+#endif
 
     /* Make calls into the fontconfig library to build a search for
      * outline fonts, and to get the set of full file paths from the matches.
@@ -831,7 +839,9 @@
     /* Free memory and close the ".so" */
     (*FcFontSetDestroy)(fontSet);
     (*FcPatternDestroy)(pattern);
+#ifndef DIRECT_LINK_FONTCONFIG
     closeFontConfig(libfontconfig, JNI_TRUE);
+#endif
     return fontdirs;
 }
 
@@ -849,6 +859,7 @@
 Java_sun_font_FontManager_getFontConfigAASettings
 (JNIEnv *env, jclass obj, jstring localeStr, jstring fcNameStr) {
 
+#ifndef DIRECT_LINK_FONTCONFIG
     FcNameParseFuncType FcNameParse;
     FcPatternAddStringFuncType FcPatternAddString;
     FcConfigSubstituteFuncType FcConfigSubstitute;
@@ -857,6 +868,7 @@
     FcPatternGetBoolFuncType FcPatternGetBool;
     FcPatternGetIntegerFuncType FcPatternGetInteger;
     FcPatternDestroyFuncType FcPatternDestroy;
+#endif
 
     FcPattern *pattern, *matchPattern;
     FcResult result;
@@ -875,6 +887,7 @@
     }
     locale = (*env)->GetStringUTFChars(env, localeStr, 0);
 
+#ifndef DIRECT_LINK_FONTCONFIG
     if ((libfontconfig = openFontConfig()) == NULL) {
         (*env)->ReleaseStringUTFChars (env, fcNameStr, (const char*)fcName);
         if (locale) {
@@ -914,7 +927,7 @@
         closeFontConfig(libfontconfig, JNI_FALSE);
         return -1;
     }
-
+#endif
 
     pattern = (*FcNameParse)((FcChar8 *)fcName);
     if (locale != NULL) {
@@ -938,7 +951,9 @@
     if (locale) {
         (*env)->ReleaseStringUTFChars (env, localeStr, (const char*)locale);
     }
+#ifndef DIRECT_LINK_FONTCONFIG
     closeFontConfig(libfontconfig, JNI_TRUE);
+#endif
 
     if (antialias == FcFalse) {
         return TEXT_AA_OFF;
@@ -960,6 +975,7 @@
 Java_sun_font_FontManager_getFontConfig
 (JNIEnv *env, jclass obj, jstring localeStr, jobjectArray fontInfoArray) {
 
+#ifndef DIRECT_LINK_FONTCONFIG
     FcNameParseFuncType FcNameParse;
     FcPatternAddStringFuncType FcPatternAddString;
     FcConfigSubstituteFuncType FcConfigSubstitute;
@@ -967,6 +983,7 @@
     FcFontMatchFuncType FcFontMatch;
     FcPatternGetStringFuncType FcPatternGetString;
     FcPatternDestroyFuncType FcPatternDestroy;
+#endif
 
     int i, arrlen;
     jobject fontInfoObj;
@@ -997,6 +1014,7 @@
         return;
     }
 
+#ifndef DIRECT_LINK_FONTCONFIG
     if ((libfontconfig = openFontConfig()) == NULL) {
         return;
     }
@@ -1024,6 +1042,7 @@
         closeFontConfig(libfontconfig, JNI_FALSE);
         return;
     }
+#endif
 
     locale = (*env)->GetStringUTFChars(env, localeStr, 0);
 
@@ -1073,5 +1092,7 @@
     if (locale) {
         (*env)->ReleaseStringUTFChars (env, localeStr, (const char*)locale);
     }
+#ifndef DIRECT_LINK_FONTCONFIG
     closeFontConfig(libfontconfig, JNI_TRUE);
+#endif
 }
