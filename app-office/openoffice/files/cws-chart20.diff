--- chart2/source/controller/chartapiwrapper/DataSeriesPointWrapper.cxx	2007-11-23 12:45:10.000000000 +0100
+++ chart2/source/controller/chartapiwrapper/DataSeriesPointWrapper.cxx	2008-02-21 16:59:25.000000000 +0100
@@ -729,12 +729,12 @@
 
     if( m_eType == DATA_SERIES )
     {
-        WrappedStatisticProperties::addWrappedPropertiesForSeries( aWrappedProperties );
+        WrappedStatisticProperties::addWrappedPropertiesForSeries( aWrappedProperties, m_spChart2ModelContact );
         aWrappedProperties.push_back( new WrappedAttachedAxisProperty( m_spChart2ModelContact ) );
     }
 
-    WrappedSymbolProperties::addWrappedPropertiesForSeries( aWrappedProperties, m_spChart2ModelContact );//for series and  points
-    WrappedDataCaptionProperties::addWrappedPropertiesForSeries( aWrappedProperties );//for series and  points
+    WrappedSymbolProperties::addWrappedPropertiesForSeries( aWrappedProperties, m_spChart2ModelContact );
+    WrappedDataCaptionProperties::addWrappedPropertiesForSeries( aWrappedProperties, m_spChart2ModelContact );
     
     //add unnamed fill properties (different inner names here)
 //     aWrappedProperties.push_back( new  WrappedUnnamedProperty( C2U( "FillGradient" ), C2U( "GradientName" ) ) );
--- chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.cxx	2007-05-22 19:21:26.000000000 +0200
+++ chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.cxx	2008-02-21 16:59:25.000000000 +0100
@@ -75,7 +75,8 @@
     virtual sal_Int32 getValueFromSeries( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& xSeriesPropertySet, sal_Int32 aNewValue ) const;
 
-    explicit WrappedDataCaptionProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedDataCaptionProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                         tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedDataCaptionProperty();
 };
 
@@ -120,12 +121,13 @@
 }
 
 void lcl_addWrappedProperties( std::vector< WrappedProperty* >& rList
-                                    , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+                                    , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact
+                                    , tSeriesOrDiagramPropertyType ePropertyType )
 {
     //if !spChart2ModelContact.get() is then the created properties do belong to a single series or single datapoint
     //otherwise they do belong to the whole diagram
     
-    rList.push_back( new WrappedDataCaptionProperty( spChart2ModelContact ) );
+    rList.push_back( new WrappedDataCaptionProperty( spChart2ModelContact, ePropertyType ) );
 }
 
 }//anonymous namespace
@@ -148,9 +150,10 @@
 //-----------------------------------------------------------------------------
 
 //static
-void WrappedDataCaptionProperties::addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList )
+void WrappedDataCaptionProperties::addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
+                                    , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
 {
-    lcl_addWrappedProperties( rList, ::boost::shared_ptr< Chart2ModelContact >() );
+    lcl_addWrappedProperties( rList, spChart2ModelContact, DATA_SERIES );
 }
 
 //-----------------------------------------------------------------------------
@@ -160,16 +163,18 @@
 void WrappedDataCaptionProperties::addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
                                     , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
 {
-    lcl_addWrappedProperties( rList, spChart2ModelContact );
+    lcl_addWrappedProperties( rList, spChart2ModelContact, DIAGRAM );
 }
 
 //-----------------------------------------------------------------------------
 //-----------------------------------------------------------------------------
 //-----------------------------------------------------------------------------
 
-WrappedDataCaptionProperty::WrappedDataCaptionProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedDataCaptionProperty::WrappedDataCaptionProperty(
+      ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact
+    , tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedSeriesOrDiagramProperty< sal_Int32 >( C2U("DataCaption")
-            , uno::makeAny( sal_Int32(0) ), spChart2ModelContact )
+            , uno::makeAny( sal_Int32(0) ), spChart2ModelContact, ePropertyType )
 {
 }
 WrappedDataCaptionProperty::~WrappedDataCaptionProperty()
--- chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.hxx	2007-05-22 19:21:36.000000000 +0200
+++ chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.hxx	2008-02-21 16:59:25.000000000 +0100
@@ -55,7 +55,8 @@
 {
 public:
     static void addProperties( ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
-    static void addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList );
+    static void addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
+                                    , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );
     static void addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
                                     , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );
 };
--- chart2/source/controller/chartapiwrapper/WrappedSeriesOrDiagramProperty.hxx	2007-08-17 14:12:42.000000000 +0200
+++ chart2/source/controller/chartapiwrapper/WrappedSeriesOrDiagramProperty.hxx	2008-02-21 16:59:25.000000000 +0100
@@ -53,6 +53,12 @@
 namespace wrapper
 {
 
+enum tSeriesOrDiagramPropertyType
+{
+    DATA_SERIES,
+    DIAGRAM
+};
+
 //PROPERTYTYPE is the type of the outer property
 
 template< typename PROPERTYTYPE >
@@ -63,11 +69,13 @@
     virtual void setValueToSeries( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& xSeriesPropertySet, PROPERTYTYPE aNewValue ) const =0;
 
     explicit WrappedSeriesOrDiagramProperty( const ::rtl::OUString& rName, const ::com::sun::star::uno::Any& rDefaulValue
-        , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+        , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact
+        , tSeriesOrDiagramPropertyType ePropertyType )
             : WrappedProperty(rName,::rtl::OUString())
             , m_spChart2ModelContact(spChart2ModelContact)
             , m_aOuterValue(rDefaulValue)
             , m_aDefaultValue(rDefaulValue)
+            , m_ePropertyType( ePropertyType )
     {
     }
     virtual ~WrappedSeriesOrDiagramProperty() {};
@@ -76,7 +84,8 @@
     {
         bool bHasDetectableInnerValue = false;
         rHasAmbiguousValue = false;
-        if( m_spChart2ModelContact.get() )
+        if( m_ePropertyType == DIAGRAM &&
+            m_spChart2ModelContact.get() )
         {
             ::std::vector< ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries > > aSeriesVector(
                 ::chart::DiagramHelper::getDataSeriesFromDiagram( m_spChart2ModelContact->getChart2Diagram() ) );
@@ -104,7 +113,8 @@
     }
     void setInnerValue( PROPERTYTYPE aNewValue ) const
     {
-        if( m_spChart2ModelContact.get() )
+        if( m_ePropertyType == DIAGRAM &&
+            m_spChart2ModelContact.get() )
         {
             ::std::vector< ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries > > aSeriesVector(
                 ::chart::DiagramHelper::getDataSeriesFromDiagram( m_spChart2ModelContact->getChart2Diagram() ) );
@@ -127,7 +137,7 @@
         if( ! (rOuterValue >>= aNewValue) )
             throw ::com::sun::star::lang::IllegalArgumentException( C2U("statistic property requires different type"), 0, 0 );
 
-        if( m_spChart2ModelContact.get() )
+        if( m_ePropertyType == DIAGRAM )
         {
             m_aOuterValue = rOuterValue;
 
@@ -148,7 +158,7 @@
     virtual ::com::sun::star::uno::Any getPropertyValue( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& xInnerPropertySet ) const
                             throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException)
     {
-        if( m_spChart2ModelContact.get() )
+        if( m_ePropertyType == DIAGRAM )
         {
             bool bHasAmbiguousValue = false;
             PROPERTYTYPE aValue;
@@ -176,9 +186,10 @@
     }
 
 protected:
-    ::boost::shared_ptr< Chart2ModelContact >   m_spChart2ModelContact;
-    mutable ::com::sun::star::uno::Any     m_aOuterValue;
-    ::com::sun::star::uno::Any             m_aDefaultValue;
+    ::boost::shared_ptr< Chart2ModelContact >  m_spChart2ModelContact;
+    mutable ::com::sun::star::uno::Any         m_aOuterValue;
+    ::com::sun::star::uno::Any                 m_aDefaultValue;
+    tSeriesOrDiagramPropertyType               m_ePropertyType;
 };
 
 } //namespace wrapper
--- chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.cxx	2007-07-25 10:29:19.000000000 +0200
+++ chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.cxx	2008-02-21 16:59:25.000000000 +0100
@@ -43,23 +43,15 @@
 #include "RegressionCurveHelper.hxx"
 #include "DiagramHelper.hxx"
 #include "ErrorBar.hxx"
+#include "StatisticsHelper.hxx"
 
-#ifndef _COM_SUN_STAR_BEANS_PROPERTYATTRIBUTE_HPP_
 #include <com/sun/star/beans/PropertyAttribute.hpp>
-#endif
-#ifndef _COM_SUN_STAR_CHART_CHARTERRORCATEGORY_HPP_
 #include <com/sun/star/chart/ChartErrorCategory.hpp>
-#endif
-#ifndef _COM_SUN_STAR_CHART_CHARTERRORINDICATORTYPE_HPP_
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 #include <com/sun/star/chart/ChartErrorIndicatorType.hpp>
-#endif
-#ifndef _COM_SUN_STAR_CHART_CHARTREGRESSIONCURVETYPE_HPP_
 #include <com/sun/star/chart/ChartRegressionCurveType.hpp>
-#endif
-
-#ifndef _COM_SUN_STAR_CHART2_ERRORBARSTYLE_HPP_
-#include <com/sun/star/chart2/ErrorBarStyle.hpp>
-#endif
+#include <com/sun/star/chart2/data/XDataProvider.hpp>
+#include <com/sun/star/chart2/data/XRangeXMLConversion.hpp>
 
 using namespace ::com::sun::star;
 using ::com::sun::star::uno::Any;
@@ -139,12 +131,58 @@
     return eRet;
 }
 
-chart2::ErrorBarStyle lcl_getErrorBarStyle( const uno::Reference< beans::XPropertySet >& xErrorBarProperties )
+sal_Int32 lcl_getErrorBarStyle( const uno::Reference< beans::XPropertySet >& xErrorBarProperties )
 {
-    chart2::ErrorBarStyle eStyle = chart2::ErrorBarStyle_NONE;
+    sal_Int32 nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
     if(xErrorBarProperties.is())
-        xErrorBarProperties->getPropertyValue( C2U( "ErrorBarStyle" )) >>= eStyle;
-    return eStyle;
+        xErrorBarProperties->getPropertyValue( C2U( "ErrorBarStyle" )) >>= nStyle;
+    return nStyle;
+}
+
+uno::Reference< chart2::data::XDataProvider > lcl_getDataProviderFromContact(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+{
+    uno::Reference< chart2::data::XDataProvider > xResult;
+    if( spChart2ModelContact.get())
+    {
+        uno::Reference< chart2::XChartDocument > xChartDoc(
+            spChart2ModelContact->getChart2Document());
+        if( xChartDoc.is())
+            xResult.set( xChartDoc->getDataProvider());
+    }
+    return xResult;
+}
+
+void lcl_ConvertRangeFromXML(
+    ::rtl::OUString & rInOutRange,
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+{
+    if( rInOutRange.getLength())
+    {
+        uno::Reference< chart2::data::XRangeXMLConversion > xConverter(
+            lcl_getDataProviderFromContact( spChart2ModelContact ), uno::UNO_QUERY );
+        if( xConverter.is())
+        {
+            ::rtl::OUString aResult = xConverter->convertRangeFromXML( rInOutRange );
+            rInOutRange = aResult;
+        }
+    }
+}
+
+void lcl_ConvertRangeToXML(
+    ::rtl::OUString & rInOutRange,
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+{
+    if( rInOutRange.getLength())
+    {
+        uno::Reference< chart2::data::XRangeXMLConversion > xConverter(
+            lcl_getDataProviderFromContact( spChart2ModelContact ), uno::UNO_QUERY );
+        if( xConverter.is())
+        {
+            ::rtl::OUString aResult = xConverter->convertRangeToXML( rInOutRange );
+            rInOutRange = aResult;
+        }
+    }
 }
 
 }//anonymous namespace
@@ -157,9 +195,10 @@
 class WrappedStatisticProperty : public WrappedSeriesOrDiagramProperty< PROPERTYTYPE >
 {
 public:
-    explicit WrappedStatisticProperty( const ::rtl::OUString& rName, const Any& rDefaulValue
-                              , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
-            : WrappedSeriesOrDiagramProperty< PROPERTYTYPE >(rName,rDefaulValue,spChart2ModelContact)
+    explicit WrappedStatisticProperty( const OUString& rName, const Any& rDefaulValue
+                              , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact
+                              , tSeriesOrDiagramPropertyType ePropertyType )
+            : WrappedSeriesOrDiagramProperty< PROPERTYTYPE >(rName,rDefaulValue,spChart2ModelContact,ePropertyType)
     {}
     virtual ~WrappedStatisticProperty() {};
 
@@ -178,7 +217,7 @@
             //default in new and old api are different
             xErrorBarProperties->setPropertyValue( C2U( "ShowPositiveError" ), uno::makeAny(sal_Bool(sal_False)) );
             xErrorBarProperties->setPropertyValue( C2U( "ShowNegativeError" ), uno::makeAny(sal_Bool(sal_False)) );
-            xErrorBarProperties->setPropertyValue( C2U( "ErrorBarStyle" ), uno::makeAny(chart2::ErrorBarStyle_NONE) );
+            xErrorBarProperties->setPropertyValue( C2U( "ErrorBarStyle" ), uno::makeAny(::com::sun::star::chart::ErrorBarStyle::NONE) );
             xSeriesPropertySet->setPropertyValue( C2U( "ErrorBarY" ), uno::makeAny( xErrorBarProperties ) );
         }
         return xErrorBarProperties;
@@ -196,16 +235,19 @@
     virtual double getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, double aNewValue ) const;
 
-    explicit WrappedConstantErrorLowProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedConstantErrorLowProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                              tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedConstantErrorLowProperty();
 
 private:
     mutable Any m_aOuterValue;
 };
 
-WrappedConstantErrorLowProperty::WrappedConstantErrorLowProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedConstantErrorLowProperty::WrappedConstantErrorLowProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedStatisticProperty< double >( C2U("ConstantErrorLow")
-            , uno::makeAny( double(0.0) ), spChart2ModelContact )
+            , uno::makeAny( double(0.0) ), spChart2ModelContact, ePropertyType  )
 {
 }
 WrappedConstantErrorLowProperty::~WrappedConstantErrorLowProperty()
@@ -219,7 +261,7 @@
     uno::Reference< beans::XPropertySet > xErrorBarProperties;
     if( xSeriesPropertySet.is() && ( xSeriesPropertySet->getPropertyValue( C2U( "ErrorBarY" )) >>= xErrorBarProperties ) && xErrorBarProperties.is())
     {
-        if( chart2::ErrorBarStyle_ABSOLUTE == lcl_getErrorBarStyle( xErrorBarProperties ) )
+        if( ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE == lcl_getErrorBarStyle( xErrorBarProperties ) )
             xErrorBarProperties->getPropertyValue( C2U( "NegativeError" )) >>= aRet;
         else
             m_aOuterValue >>= aRet;
@@ -232,7 +274,7 @@
     if( xErrorBarProperties.is() )
     {
         m_aOuterValue = uno::makeAny( aNewValue );
-        if( chart2::ErrorBarStyle_ABSOLUTE == lcl_getErrorBarStyle( xErrorBarProperties ) )
+        if( ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE == lcl_getErrorBarStyle( xErrorBarProperties ) )
         {
             xErrorBarProperties->setPropertyValue( C2U( "NegativeError" ), m_aOuterValue );
         }
@@ -248,16 +290,19 @@
     virtual double getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, double aNewValue ) const;
 
-    explicit WrappedConstantErrorHighProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedConstantErrorHighProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                               tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedConstantErrorHighProperty();
 
 private:
     mutable Any m_aOuterValue;
 };
 
-WrappedConstantErrorHighProperty::WrappedConstantErrorHighProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedConstantErrorHighProperty::WrappedConstantErrorHighProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedStatisticProperty< double >( C2U("ConstantErrorHigh")
-            , uno::makeAny( double(0.0) ), spChart2ModelContact )
+            , uno::makeAny( double(0.0) ), spChart2ModelContact, ePropertyType  )
 {
 }
 WrappedConstantErrorHighProperty::~WrappedConstantErrorHighProperty()
@@ -271,7 +316,7 @@
     uno::Reference< beans::XPropertySet > xErrorBarProperties;
     if( xSeriesPropertySet.is() && ( xSeriesPropertySet->getPropertyValue( C2U( "ErrorBarY" )) >>= xErrorBarProperties ) && xErrorBarProperties.is())
     {
-        if( chart2::ErrorBarStyle_ABSOLUTE == lcl_getErrorBarStyle( xErrorBarProperties ) )
+        if( ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE == lcl_getErrorBarStyle( xErrorBarProperties ) )
             xErrorBarProperties->getPropertyValue( C2U( "PositiveError" )) >>= aRet;
         else
             m_aOuterValue >>= aRet;
@@ -284,7 +329,7 @@
     if( xErrorBarProperties.is() )
     {
         m_aOuterValue = uno::makeAny( aNewValue );
-        if( chart2::ErrorBarStyle_ABSOLUTE == lcl_getErrorBarStyle( xErrorBarProperties ) )
+        if( ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE == lcl_getErrorBarStyle( xErrorBarProperties ) )
         {
             xErrorBarProperties->setPropertyValue( C2U( "PositiveError" ), m_aOuterValue );
         }
@@ -300,12 +345,15 @@
     virtual sal_Bool getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, sal_Bool aNewValue ) const;
 
-    explicit WrappedMeanValueProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedMeanValueProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                       tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedMeanValueProperty();
 };
 
-WrappedMeanValueProperty::WrappedMeanValueProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
-        : WrappedStatisticProperty< sal_Bool >( C2U("MeanValue"), uno::makeAny( sal_False ), spChart2ModelContact )
+WrappedMeanValueProperty::WrappedMeanValueProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
+        : WrappedStatisticProperty< sal_Bool >( C2U("MeanValue"), uno::makeAny( sal_False ), spChart2ModelContact, ePropertyType  )
 {
 }
 WrappedMeanValueProperty::~WrappedMeanValueProperty()
@@ -335,19 +383,23 @@
 //-----------------------------------------------------------------------------
 //-----------------------------------------------------------------------------
 //PROP_CHART_STATISTIC_ERROR_CATEGORY
+// deprecated, replaced by ErrorBarStyle
 class WrappedErrorCategoryProperty : public WrappedStatisticProperty< ::com::sun::star::chart::ChartErrorCategory >
 {
 public:
     virtual ::com::sun::star::chart::ChartErrorCategory getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, ::com::sun::star::chart::ChartErrorCategory aNewValue ) const;
 
-    explicit WrappedErrorCategoryProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedErrorCategoryProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                           tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedErrorCategoryProperty();
 };
 
-WrappedErrorCategoryProperty::WrappedErrorCategoryProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedErrorCategoryProperty::WrappedErrorCategoryProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedStatisticProperty< ::com::sun::star::chart::ChartErrorCategory >( C2U("ErrorCategory")
-            , uno::makeAny( ::com::sun::star::chart::ChartErrorCategory_NONE ), spChart2ModelContact )
+            , uno::makeAny( ::com::sun::star::chart::ChartErrorCategory_NONE ), spChart2ModelContact, ePropertyType  )
 {
 }
 WrappedErrorCategoryProperty::~WrappedErrorCategoryProperty()
@@ -361,31 +413,31 @@
     uno::Reference< beans::XPropertySet > xErrorBarProperties;
     if( xSeriesPropertySet.is() && ( xSeriesPropertySet->getPropertyValue( C2U( "ErrorBarY" )) >>= xErrorBarProperties ) && xErrorBarProperties.is())
     {
-        chart2::ErrorBarStyle eStyle = chart2::ErrorBarStyle_NONE;
-        xErrorBarProperties->getPropertyValue( C2U( "ErrorBarStyle" )) >>= eStyle;
-        switch(eStyle)
+        sal_Int32 nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
+        xErrorBarProperties->getPropertyValue( C2U( "ErrorBarStyle" )) >>= nStyle;
+        switch(nStyle)
         {
-            case chart2::ErrorBarStyle_NONE:
+            case ::com::sun::star::chart::ErrorBarStyle::NONE:
                 aRet = ::com::sun::star::chart::ChartErrorCategory_NONE;
                 break;
-            case chart2::ErrorBarStyle_VARIANCE:
+            case ::com::sun::star::chart::ErrorBarStyle::VARIANCE:
                 aRet = ::com::sun::star::chart::ChartErrorCategory_VARIANCE;
                 break;
-            case chart2::ErrorBarStyle_STANDARD_DEVIATION:
+            case ::com::sun::star::chart::ErrorBarStyle::STANDARD_DEVIATION:
                 aRet = ::com::sun::star::chart::ChartErrorCategory_STANDARD_DEVIATION;
                 break;
-            case chart2::ErrorBarStyle_ABSOLUTE:
+            case ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE:
                 aRet = ::com::sun::star::chart::ChartErrorCategory_CONSTANT_VALUE;
                 break;
-            case chart2::ErrorBarStyle_RELATIVE:
+            case ::com::sun::star::chart::ErrorBarStyle::RELATIVE:
                 aRet = ::com::sun::star::chart::ChartErrorCategory_PERCENT;
                 break;
-            case chart2::ErrorBarStyle_ERROR_MARGIN:
+            case ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN:
                 aRet = ::com::sun::star::chart::ChartErrorCategory_ERROR_MARGIN;
                 break;
-            case chart2::ErrorBarStyle_STANDARD_ERROR:
+            case ::com::sun::star::chart::ErrorBarStyle::STANDARD_ERROR:
                 break;
-            case chart2::ErrorBarStyle_FROM_DATA:
+            case ::com::sun::star::chart::ErrorBarStyle::FROM_DATA:
                 break;
             default:
                 break;
@@ -401,31 +453,31 @@
     uno::Reference< beans::XPropertySet > xErrorBarProperties( getOrCreateErrorBarProperties(xSeriesPropertySet) );
     if( xErrorBarProperties.is() )
     {
-        chart2::ErrorBarStyle eNewStyle = chart2::ErrorBarStyle_NONE;
+        sal_Int32 nNewStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
         switch(aNewValue)
         {
             case ::com::sun::star::chart::ChartErrorCategory_NONE:
-                eNewStyle = chart2::ErrorBarStyle_NONE;
+                nNewStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
                 break;
             case ::com::sun::star::chart::ChartErrorCategory_VARIANCE:
-                eNewStyle = chart2::ErrorBarStyle_VARIANCE;
+                nNewStyle = ::com::sun::star::chart::ErrorBarStyle::VARIANCE;
                 break;
             case ::com::sun::star::chart::ChartErrorCategory_STANDARD_DEVIATION:
-                eNewStyle = chart2::ErrorBarStyle_STANDARD_DEVIATION;
+                nNewStyle = ::com::sun::star::chart::ErrorBarStyle::STANDARD_DEVIATION;
                 break;
             case ::com::sun::star::chart::ChartErrorCategory_CONSTANT_VALUE:
-                eNewStyle = chart2::ErrorBarStyle_ABSOLUTE;
+                nNewStyle = ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE;
                 break;
             case ::com::sun::star::chart::ChartErrorCategory_PERCENT:
-                eNewStyle = chart2::ErrorBarStyle_RELATIVE;
+                nNewStyle = ::com::sun::star::chart::ErrorBarStyle::RELATIVE;
                 break;
             case ::com::sun::star::chart::ChartErrorCategory_ERROR_MARGIN:
-                eNewStyle = chart2::ErrorBarStyle_ERROR_MARGIN;
+                nNewStyle = ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN;
                 break;
             default:
                 break;
         }
-        xErrorBarProperties->setPropertyValue( C2U( "ErrorBarStyle" ), uno::makeAny(eNewStyle) );
+        xErrorBarProperties->setPropertyValue( C2U( "ErrorBarStyle" ), uno::makeAny(nNewStyle) );
     }
 }
 
@@ -439,16 +491,19 @@
     virtual double getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, double aNewValue ) const;
 
-    explicit WrappedPercentageErrorProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedPercentageErrorProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                             tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedPercentageErrorProperty();
 
 private:
     mutable Any m_aOuterValue;
 };
 
-WrappedPercentageErrorProperty::WrappedPercentageErrorProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedPercentageErrorProperty::WrappedPercentageErrorProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedStatisticProperty< double >( C2U("PercentageError")
-            , uno::makeAny( double(0.0) ), spChart2ModelContact )
+            , uno::makeAny( double(0.0) ), spChart2ModelContact, ePropertyType  )
 {
 }
 WrappedPercentageErrorProperty::~WrappedPercentageErrorProperty()
@@ -462,7 +517,7 @@
     uno::Reference< beans::XPropertySet > xErrorBarProperties;
     if( xSeriesPropertySet.is() && ( xSeriesPropertySet->getPropertyValue( C2U( "ErrorBarY" )) >>= xErrorBarProperties ) && xErrorBarProperties.is())
     {
-        if( chart2::ErrorBarStyle_RELATIVE == lcl_getErrorBarStyle( xErrorBarProperties ) )
+        if( ::com::sun::star::chart::ErrorBarStyle::RELATIVE == lcl_getErrorBarStyle( xErrorBarProperties ) )
             xErrorBarProperties->getPropertyValue( C2U( "PositiveError" )) >>= aRet;
         else
             m_aOuterValue >>= aRet;
@@ -475,7 +530,7 @@
     if( xErrorBarProperties.is() )
     {
         m_aOuterValue = uno::makeAny( aNewValue );
-        if( chart2::ErrorBarStyle_RELATIVE == lcl_getErrorBarStyle( xErrorBarProperties ) )
+        if( ::com::sun::star::chart::ErrorBarStyle::RELATIVE == lcl_getErrorBarStyle( xErrorBarProperties ) )
         {
             xErrorBarProperties->setPropertyValue( C2U( "PositiveError" ), m_aOuterValue );
             xErrorBarProperties->setPropertyValue( C2U( "NegativeError" ), m_aOuterValue );
@@ -493,16 +548,19 @@
     virtual double getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, double aNewValue ) const;
 
-    explicit WrappedErrorMarginProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedErrorMarginProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                         tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedErrorMarginProperty();
 
 private:
     mutable Any m_aOuterValue;
 };
 
-WrappedErrorMarginProperty::WrappedErrorMarginProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedErrorMarginProperty::WrappedErrorMarginProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedStatisticProperty< double >( C2U("ErrorMargin")
-            , uno::makeAny( double(0.0) ), spChart2ModelContact )
+            , uno::makeAny( double(0.0) ), spChart2ModelContact, ePropertyType  )
 {
 }
 WrappedErrorMarginProperty::~WrappedErrorMarginProperty()
@@ -516,7 +574,7 @@
     uno::Reference< beans::XPropertySet > xErrorBarProperties;
     if( xSeriesPropertySet.is() && ( xSeriesPropertySet->getPropertyValue( C2U( "ErrorBarY" )) >>= xErrorBarProperties ) && xErrorBarProperties.is())
     {
-        if( chart2::ErrorBarStyle_ERROR_MARGIN == lcl_getErrorBarStyle( xErrorBarProperties ) )
+        if( ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN == lcl_getErrorBarStyle( xErrorBarProperties ) )
             xErrorBarProperties->getPropertyValue( C2U( "PositiveError" )) >>= aRet;
         else
             m_aOuterValue >>= aRet;
@@ -529,7 +587,7 @@
     if( xErrorBarProperties.is() )
     {
         m_aOuterValue = uno::makeAny( aNewValue );
-        if( chart2::ErrorBarStyle_ERROR_MARGIN == lcl_getErrorBarStyle( xErrorBarProperties ) )
+        if( ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN == lcl_getErrorBarStyle( xErrorBarProperties ) )
         {
             xErrorBarProperties->setPropertyValue( C2U( "PositiveError" ), m_aOuterValue );
             xErrorBarProperties->setPropertyValue( C2U( "NegativeError" ), m_aOuterValue );
@@ -547,13 +605,16 @@
     virtual ::com::sun::star::chart::ChartErrorIndicatorType getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, ::com::sun::star::chart::ChartErrorIndicatorType aNewValue ) const;
 
-    explicit WrappedErrorIndicatorProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedErrorIndicatorProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                            tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedErrorIndicatorProperty();
 };
 
-WrappedErrorIndicatorProperty::WrappedErrorIndicatorProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedErrorIndicatorProperty::WrappedErrorIndicatorProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedStatisticProperty< ::com::sun::star::chart::ChartErrorIndicatorType >( C2U("ErrorIndicator")
-            , uno::makeAny( ::com::sun::star::chart::ChartErrorIndicatorType_NONE ), spChart2ModelContact )
+            , uno::makeAny( ::com::sun::star::chart::ChartErrorIndicatorType_NONE ), spChart2ModelContact, ePropertyType  )
 {
 }
 WrappedErrorIndicatorProperty::~WrappedErrorIndicatorProperty()
@@ -571,7 +632,7 @@
         sal_Bool bNegative = sal_False;
         xErrorBarProperties->getPropertyValue( C2U( "ShowPositiveError" )) >>= bPositive;
         xErrorBarProperties->getPropertyValue( C2U( "ShowNegativeError" )) >>= bNegative;
-        
+
         if( bPositive && bNegative )
             aRet = ::com::sun::star::chart::ChartErrorIndicatorType_TOP_AND_BOTTOM;
         else if( bPositive && !bNegative )
@@ -609,6 +670,195 @@
     }
 }
 
+
+//-----------------------------------------------------------------------------
+//-----------------------------------------------------------------------------
+//-----------------------------------------------------------------------------
+//PROP_CHART_STATISTIC_ERROR_BAR_STYLE
+// this is the new constant group that replaces the deprecated enum ChartErrorCategory
+class WrappedErrorBarStyleProperty : public WrappedStatisticProperty< sal_Int32 >
+{
+public:
+    virtual sal_Int32 getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
+    virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, sal_Int32 nNewValue ) const;
+
+    explicit WrappedErrorBarStyleProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact1,
+                                           tSeriesOrDiagramPropertyType ePropertyType );
+    virtual ~WrappedErrorBarStyleProperty();
+};
+
+WrappedErrorBarStyleProperty::WrappedErrorBarStyleProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
+        : WrappedStatisticProperty< sal_Int32 >( C2U("ErrorBarStyle")
+            , uno::makeAny( ::com::sun::star::chart::ErrorBarStyle::NONE ), spChart2ModelContact, ePropertyType  )
+{
+}
+WrappedErrorBarStyleProperty::~WrappedErrorBarStyleProperty()
+{
+}
+
+sal_Int32 WrappedErrorBarStyleProperty::getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const
+{
+    sal_Int32 nRet = ::com::sun::star::chart::ErrorBarStyle::NONE;
+    m_aDefaultValue >>= nRet;
+    uno::Reference< beans::XPropertySet > xErrorBarProperties;
+    if( xSeriesPropertySet.is() && ( xSeriesPropertySet->getPropertyValue( C2U( "ErrorBarY" )) >>= xErrorBarProperties ) && xErrorBarProperties.is())
+    {
+        xErrorBarProperties->getPropertyValue( C2U( "ErrorBarStyle" )) >>= nRet;
+    }
+    return nRet;
+}
+void WrappedErrorBarStyleProperty::setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, sal_Int32 nNewValue ) const
+{
+    if( !xSeriesPropertySet.is() )
+        return;
+
+    uno::Reference< beans::XPropertySet > xErrorBarProperties( getOrCreateErrorBarProperties(xSeriesPropertySet) );
+    if( xErrorBarProperties.is() )
+    {
+        xErrorBarProperties->setPropertyValue( C2U( "ErrorBarStyle" ), uno::makeAny( nNewValue ));
+    }
+}
+
+//-----------------------------------------------------------------------------
+//-----------------------------------------------------------------------------
+//-----------------------------------------------------------------------------
+//PROP_CHART_STATISTIC_ERROR_RANGE_POSITIVE
+class WrappedErrorBarRangePositiveProperty : public WrappedStatisticProperty< OUString >
+{
+public:
+    virtual OUString getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
+    virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, OUString aNewValue ) const;
+
+    explicit WrappedErrorBarRangePositiveProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                                   tSeriesOrDiagramPropertyType ePropertyType );
+    virtual ~WrappedErrorBarRangePositiveProperty();
+
+private:
+    mutable Any m_aOuterValue;
+};
+
+WrappedErrorBarRangePositiveProperty::WrappedErrorBarRangePositiveProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
+        : WrappedStatisticProperty< OUString >( C2U("ErrorBarRangePositive")
+            , uno::makeAny( OUString() ), spChart2ModelContact, ePropertyType  )
+{
+}
+WrappedErrorBarRangePositiveProperty::~WrappedErrorBarRangePositiveProperty()
+{
+}
+
+OUString WrappedErrorBarRangePositiveProperty::getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const
+{
+    OUString aRet;
+    m_aDefaultValue >>= aRet;
+    uno::Reference< chart2::data::XDataSource > xErrorBarDataSource;
+    if( xSeriesPropertySet.is() &&
+        ( xSeriesPropertySet->getPropertyValue( C2U( "ErrorBarY" )) >>= xErrorBarDataSource ) &&
+        xErrorBarDataSource.is())
+    {
+        uno::Reference< chart2::data::XDataSequence > xSeq(
+            StatisticsHelper::getErrorDataSequenceFromDataSource(
+                xErrorBarDataSource, true /* positive */, true /* y-error */ ));
+        if( xSeq.is())
+            aRet = xSeq->getSourceRangeRepresentation();
+        else
+            m_aOuterValue >>= aRet;
+    }
+    lcl_ConvertRangeToXML( aRet, m_spChart2ModelContact );
+    return aRet;
+}
+
+void WrappedErrorBarRangePositiveProperty::setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, OUString aNewValue ) const
+{
+    uno::Reference< beans::XPropertySet > xErrorBarProperties( getOrCreateErrorBarProperties(xSeriesPropertySet) );
+    if( xErrorBarProperties.is() )
+    {
+        uno::Reference< chart2::data::XDataProvider > xDataProvider(
+            lcl_getDataProviderFromContact( m_spChart2ModelContact ));
+        uno::Reference< chart2::data::XDataSource > xDataSource( xErrorBarProperties, uno::UNO_QUERY );
+        if( xDataSource.is() && xDataProvider.is())
+        {
+            OUString aXMLRange( aNewValue );
+            lcl_ConvertRangeFromXML( aNewValue, m_spChart2ModelContact );
+            StatisticsHelper::setErrorDataSequence(
+                xDataSource, xDataProvider, aNewValue, true /* positive */, true /* y-error */, &aXMLRange );
+            m_aOuterValue <<= aNewValue;
+        }
+    }
+}
+
+//-----------------------------------------------------------------------------
+//-----------------------------------------------------------------------------
+//-----------------------------------------------------------------------------
+//PROP_CHART_STATISTIC_ERROR_RANGE_NEGATIVE
+class WrappedErrorBarRangeNegativeProperty : public WrappedStatisticProperty< OUString >
+{
+public:
+    virtual OUString getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
+    virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, OUString aNewValue ) const;
+
+    explicit WrappedErrorBarRangeNegativeProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                                   tSeriesOrDiagramPropertyType ePropertyType );
+    virtual ~WrappedErrorBarRangeNegativeProperty();
+
+private:
+    mutable Any m_aOuterValue;
+};
+
+WrappedErrorBarRangeNegativeProperty::WrappedErrorBarRangeNegativeProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
+        : WrappedStatisticProperty< OUString >( C2U("ErrorBarRangeNegative")
+            , uno::makeAny( OUString() ), spChart2ModelContact, ePropertyType  )
+{
+}
+WrappedErrorBarRangeNegativeProperty::~WrappedErrorBarRangeNegativeProperty()
+{
+}
+
+OUString WrappedErrorBarRangeNegativeProperty::getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const
+{
+    OUString aRet;
+    m_aDefaultValue >>= aRet;
+    uno::Reference< chart2::data::XDataSource > xErrorBarDataSource;
+    if( xSeriesPropertySet.is() &&
+        ( xSeriesPropertySet->getPropertyValue( C2U( "ErrorBarY" )) >>= xErrorBarDataSource ) &&
+        xErrorBarDataSource.is())
+    {
+        uno::Reference< chart2::data::XDataSequence > xSeq(
+            StatisticsHelper::getErrorDataSequenceFromDataSource(
+                xErrorBarDataSource, false /* positive */, true /* y-error */ ));
+        if( xSeq.is())
+            aRet = xSeq->getSourceRangeRepresentation();
+        else
+            m_aOuterValue >>= aRet;
+    }
+    lcl_ConvertRangeToXML( aRet, m_spChart2ModelContact );
+    return aRet;
+}
+
+void WrappedErrorBarRangeNegativeProperty::setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, OUString aNewValue ) const
+{
+    uno::Reference< beans::XPropertySet > xErrorBarProperties( getOrCreateErrorBarProperties(xSeriesPropertySet) );
+    if( xErrorBarProperties.is() )
+    {
+        uno::Reference< chart2::data::XDataProvider > xDataProvider(
+            lcl_getDataProviderFromContact( m_spChart2ModelContact ));
+        uno::Reference< chart2::data::XDataSource > xDataSource( xErrorBarProperties, uno::UNO_QUERY );
+        if( xDataSource.is() && xDataProvider.is())
+        {
+            OUString aXMLRange( aNewValue );
+            lcl_ConvertRangeFromXML( aNewValue, m_spChart2ModelContact );
+            StatisticsHelper::setErrorDataSequence(
+                xDataSource, xDataProvider, aNewValue, false /* positive */, true /* y-error */, &aXMLRange );
+            m_aOuterValue <<= aNewValue;
+        }
+    }
+}
+
 //-----------------------------------------------------------------------------
 //-----------------------------------------------------------------------------
 //-----------------------------------------------------------------------------
@@ -619,13 +869,16 @@
     virtual ::com::sun::star::chart::ChartRegressionCurveType getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, ::com::sun::star::chart::ChartRegressionCurveType aNewValue ) const;
 
-    explicit WrappedRegressionCurvesProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedRegressionCurvesProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                              tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedRegressionCurvesProperty();
 };
 
-WrappedRegressionCurvesProperty::WrappedRegressionCurvesProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedRegressionCurvesProperty::WrappedRegressionCurvesProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedStatisticProperty< ::com::sun::star::chart::ChartRegressionCurveType >( C2U("RegressionCurves")
-        , lcl_getRegressionDefault(), spChart2ModelContact )
+        , lcl_getRegressionDefault(), spChart2ModelContact, ePropertyType  )
 {
 }
 WrappedRegressionCurvesProperty::~WrappedRegressionCurvesProperty()
@@ -677,7 +930,8 @@
     };
 
     explicit WrappedStatisticPropertySetProperty(
-        PropertySetType ePropertySetType, ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );
+        PropertySetType ePropertySetType, ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+        tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedStatisticPropertySetProperty();
 
 private:
@@ -686,14 +940,15 @@
 
 WrappedStatisticPropertySetProperty::WrappedStatisticPropertySetProperty(
     PropertySetType ePropertySetType
-    , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+    , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact
+    , tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedStatisticProperty< Reference< beans::XPropertySet > >(
             (ePropertySetType == PROPERTY_SET_TYPE_REGRESSION)
             ? C2U("DataRegressionProperties")
             : (ePropertySetType == PROPERTY_SET_TYPE_ERROR_BAR)
             ? C2U("DataErrorProperties")
             : C2U("DataMeanValueProperties")
-            , uno::Any(), spChart2ModelContact )
+            , uno::Any(), spChart2ModelContact, ePropertyType  )
         , m_eType( ePropertySetType )
 {
 }
@@ -745,35 +1000,43 @@
     PROP_CHART_STATISTIC_CONST_ERROR_HIGH,
     PROP_CHART_STATISTIC_MEAN_VALUE,
     PROP_CHART_STATISTIC_ERROR_CATEGORY,
+    PROP_CHART_STATISTIC_ERROR_BAR_STYLE,
     PROP_CHART_STATISTIC_PERCENT_ERROR,
     PROP_CHART_STATISTIC_ERROR_MARGIN,
     PROP_CHART_STATISTIC_ERROR_INDICATOR,
+    PROP_CHART_STATISTIC_ERROR_RANGE_POSITIVE,
+    PROP_CHART_STATISTIC_ERROR_RANGE_NEGATIVE,
     PROP_CHART_STATISTIC_REGRESSION_CURVES,
     PROP_CHART_STATISTIC_REGRESSION_PROPERTIES,
     PROP_CHART_STATISTIC_ERROR_PROPERTIES,
     PROP_CHART_STATISTIC_MEAN_VALUE_PROPERTIES
 };
 
+/** @parameter bDataSeriesProperty if true, this property is for a single data
+               series, if false, it is for the whole diagram, i.e. for all
+               series
+ */
 void lcl_addWrappedProperties( std::vector< WrappedProperty* >& rList
-            , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+            , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact
+            , tSeriesOrDiagramPropertyType ePropertyType )
 {
-    //if !spChart2ModelContact.get() then the created properties do belong to a single series
-    //otherwise they do belong to the whole diagram
-
-    rList.push_back( new WrappedConstantErrorLowProperty( spChart2ModelContact ) );
-    rList.push_back( new WrappedConstantErrorHighProperty( spChart2ModelContact ) );
-    rList.push_back( new WrappedMeanValueProperty( spChart2ModelContact ) );
-    rList.push_back( new WrappedErrorCategoryProperty( spChart2ModelContact ) );
-    rList.push_back( new WrappedPercentageErrorProperty( spChart2ModelContact ) );
-    rList.push_back( new WrappedErrorMarginProperty( spChart2ModelContact ) );
-    rList.push_back( new WrappedErrorIndicatorProperty( spChart2ModelContact ) );
-    rList.push_back( new WrappedRegressionCurvesProperty( spChart2ModelContact ) );
+    rList.push_back( new WrappedConstantErrorLowProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedConstantErrorHighProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedMeanValueProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedErrorCategoryProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedErrorBarStyleProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedPercentageErrorProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedErrorMarginProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedErrorIndicatorProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedErrorBarRangePositiveProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedErrorBarRangeNegativeProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedRegressionCurvesProperty( spChart2ModelContact, ePropertyType ) );
     rList.push_back( new WrappedStatisticPropertySetProperty(
-                         WrappedStatisticPropertySetProperty::PROPERTY_SET_TYPE_REGRESSION, spChart2ModelContact ) );
+                         WrappedStatisticPropertySetProperty::PROPERTY_SET_TYPE_REGRESSION, spChart2ModelContact, ePropertyType ) );
     rList.push_back( new WrappedStatisticPropertySetProperty(
-                         WrappedStatisticPropertySetProperty::PROPERTY_SET_TYPE_ERROR_BAR,  spChart2ModelContact ) );
+                         WrappedStatisticPropertySetProperty::PROPERTY_SET_TYPE_ERROR_BAR,  spChart2ModelContact, ePropertyType ) );
     rList.push_back( new WrappedStatisticPropertySetProperty(
-                         WrappedStatisticPropertySetProperty::PROPERTY_SET_TYPE_MEAN_VALUE, spChart2ModelContact ) );
+                         WrappedStatisticPropertySetProperty::PROPERTY_SET_TYPE_MEAN_VALUE, spChart2ModelContact, ePropertyType ) );
 }
 
 }//anonymous namespace
@@ -806,6 +1069,12 @@
                   beans::PropertyAttribute::BOUND
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
     rOutProperties.push_back(
+        Property( C2U( "ErrorBarStyle" ),
+                  PROP_CHART_STATISTIC_ERROR_BAR_STYLE,
+                  ::getCppuType( reinterpret_cast< sal_Int32 * >(0)),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+    rOutProperties.push_back(
         Property( C2U( "PercentageError" ),
                   PROP_CHART_STATISTIC_PERCENT_ERROR,
                   ::getCppuType( reinterpret_cast< double * >(0)),
@@ -824,6 +1093,18 @@
                   beans::PropertyAttribute::BOUND
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
     rOutProperties.push_back(
+        Property( C2U( "ErrorBarRangePositive" ),
+                  PROP_CHART_STATISTIC_ERROR_RANGE_POSITIVE,
+                  ::getCppuType( reinterpret_cast< OUString * >(0)),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+    rOutProperties.push_back(
+        Property( C2U( "ErrorBarRangeNegative" ),
+                  PROP_CHART_STATISTIC_ERROR_RANGE_NEGATIVE,
+                  ::getCppuType( reinterpret_cast< OUString * >(0)),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEDEFAULT ));
+    rOutProperties.push_back(
         Property( C2U( "RegressionCurves" ),
                   PROP_CHART_STATISTIC_REGRESSION_CURVES,
                   ::getCppuType( reinterpret_cast< const ::com::sun::star::chart::ChartRegressionCurveType * >(0)),
@@ -857,9 +1138,10 @@
 //-----------------------------------------------------------------------------
 
 //static
-void WrappedStatisticProperties::addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList )
+void WrappedStatisticProperties::addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
+                                    , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
 {
-    lcl_addWrappedProperties( rList, ::boost::shared_ptr< Chart2ModelContact >() );
+    lcl_addWrappedProperties( rList, spChart2ModelContact, DATA_SERIES );
 }
 
 //-----------------------------------------------------------------------------
@@ -869,7 +1151,7 @@
 void WrappedStatisticProperties::addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
                                     , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
 {
-    lcl_addWrappedProperties( rList, spChart2ModelContact );
+    lcl_addWrappedProperties( rList, spChart2ModelContact, DIAGRAM  );
 }
 
 //-----------------------------------------------------------------------------
--- chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.hxx	2007-05-22 19:24:18.000000000 +0200
+++ chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.hxx	2008-02-21 16:59:25.000000000 +0100
@@ -51,7 +51,8 @@
 {
 public:
     static void addProperties( ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
-    static void addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList );
+    static void addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
+                    , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );
     static void addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
                     , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );
 };
--- chart2/source/controller/chartapiwrapper/WrappedSymbolProperties.cxx	2007-08-17 14:12:54.000000000 +0200
+++ chart2/source/controller/chartapiwrapper/WrappedSymbolProperties.cxx	2008-02-21 16:59:25.000000000 +0100
@@ -111,11 +111,9 @@
     virtual beans::PropertyState getPropertyState( const Reference< beans::XPropertyState >& xInnerPropertyState ) const
                         throw (beans::UnknownPropertyException, uno::RuntimeException);
 
-    explicit WrappedSymbolTypeProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact, bool bIsDiagramProperty );//if !bIsDiagramProperty this property does belong to a single series and not to the whole diagram
+    explicit WrappedSymbolTypeProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                        tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedSymbolTypeProperty();
-
-private:
-    ::boost::shared_ptr< Chart2ModelContact >   m_spChart2ModelContactForUseForSingleSeriesOrPoint;
 };
 
 class WrappedSymbolBitmapURLProperty : public WrappedSeriesOrDiagramProperty< OUString >
@@ -124,7 +122,8 @@
     virtual OUString getValueFromSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet ) const;
     virtual void setValueToSeries( const Reference< beans::XPropertySet >& xSeriesPropertySet, OUString aNewGraphicURL ) const;
 
-    explicit WrappedSymbolBitmapURLProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedSymbolBitmapURLProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                             tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedSymbolBitmapURLProperty();
 };
 
@@ -142,7 +141,8 @@
     virtual beans::PropertyState getPropertyState( const Reference< beans::XPropertyState >& xInnerPropertyState ) const
                         throw (beans::UnknownPropertyException, uno::RuntimeException);
 
-    explicit WrappedSymbolSizeProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedSymbolSizeProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                        tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedSymbolSizeProperty();
 };
 
@@ -154,7 +154,8 @@
     virtual beans::PropertyState getPropertyState( const Reference< beans::XPropertyState >& xInnerPropertyState ) const
                         throw (beans::UnknownPropertyException, uno::RuntimeException);
 
-    explicit WrappedSymbolAndLinesProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact );//if !spChart2ModelContact.get() this property does belong to a single series and not to the whole diagram
+    explicit WrappedSymbolAndLinesProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+                                            tSeriesOrDiagramPropertyType ePropertyType );
     virtual ~WrappedSymbolAndLinesProperty();
 };
 
@@ -216,16 +217,12 @@
 
 void lcl_addWrappedProperties( std::vector< WrappedProperty* >& rList
                                     , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact
-                                    , bool bDiagramProperty )
+                                    , tSeriesOrDiagramPropertyType ePropertyType )
 {
-    //if !bDiagramProperty then the created properties do belong to a single series or single datapoint
-    //otherwise they do belong to the whole diagram
-    rList.push_back( new WrappedSymbolTypeProperty( spChart2ModelContact, bDiagramProperty ) );
-    if(!bDiagramProperty)
-        spChart2ModelContact.reset();
-    rList.push_back( new WrappedSymbolBitmapURLProperty( spChart2ModelContact ) );
-    rList.push_back( new WrappedSymbolSizeProperty( spChart2ModelContact ) );
-    rList.push_back( new WrappedSymbolAndLinesProperty( spChart2ModelContact ) );
+    rList.push_back( new WrappedSymbolTypeProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedSymbolBitmapURLProperty( spChart2ModelContact, ePropertyType ) );
+    rList.push_back( new WrappedSymbolSizeProperty( spChart2ModelContact, ePropertyType  ) );
+    rList.push_back( new WrappedSymbolAndLinesProperty( spChart2ModelContact, ePropertyType  ) );
 }
 
 }//anonymous namespace
@@ -272,7 +269,7 @@
 void WrappedSymbolProperties::addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
                                     , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
 {
-    lcl_addWrappedProperties( rList, spChart2ModelContact, false );
+    lcl_addWrappedProperties( rList, spChart2ModelContact, DATA_SERIES );
 }
 
 //-----------------------------------------------------------------------------
@@ -282,18 +279,20 @@
 void WrappedSymbolProperties::addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
                                     , ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
 {
-    lcl_addWrappedProperties( rList, spChart2ModelContact, true );
+    lcl_addWrappedProperties( rList, spChart2ModelContact, DIAGRAM );
 }
 
 //-----------------------------------------------------------------------------
 //-----------------------------------------------------------------------------
 //-----------------------------------------------------------------------------
 
-WrappedSymbolTypeProperty::WrappedSymbolTypeProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact, bool bIsDiagramProperty )
+WrappedSymbolTypeProperty::WrappedSymbolTypeProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedSeriesOrDiagramProperty< sal_Int32 >( C2U("SymbolType")
             , uno::makeAny( ::com::sun::star::chart::ChartSymbolType::NONE )
-            , bIsDiagramProperty ? spChart2ModelContact : ::boost::shared_ptr< Chart2ModelContact >() )
-        , m_spChart2ModelContactForUseForSingleSeriesOrPoint(spChart2ModelContact)
+            , spChart2ModelContact
+            , ePropertyType )
 {
 }
 WrappedSymbolTypeProperty::~WrappedSymbolTypeProperty()
@@ -326,7 +325,7 @@
                             throw ( beans::UnknownPropertyException, lang::WrappedTargetException, uno::RuntimeException)
 {
     //the old chart (< OOo 2.3) needs symbol-type="automatic" at the plot-area if any of the series should be able to have symbols
-    if( m_spChart2ModelContact.get() )//indicator for diagram properties
+    if( m_ePropertyType == DIAGRAM )
     {
         bool bHasAmbiguousValue = false;
         sal_Int32 aValue = 0;
@@ -361,16 +360,14 @@
     //different from the normal default and different from all sinlges series values
     //so we need to return PropertyState_DIRECT_VALUE for more cases
 
-    if( !m_spChart2ModelContact.get() )//single series or point
+    if( m_ePropertyType == DATA_SERIES && //single series or point
+        m_spChart2ModelContact.get())
     {
-        if( m_spChart2ModelContactForUseForSingleSeriesOrPoint.get() )
-        {
-            Reference< chart2::XDiagram > xDiagram( m_spChart2ModelContactForUseForSingleSeriesOrPoint->getChart2Diagram() );
-            Reference< chart2::XDataSeries > xSeries( xInnerPropertyState, uno::UNO_QUERY );
-            Reference< chart2::XChartType > xChartType( DiagramHelper::getChartTypeOfSeries( xDiagram, xSeries ) );
-            if( ChartTypeHelper::isSupportingSymbolProperties( xChartType, 2 ) )
-                return beans::PropertyState_DIRECT_VALUE;
-        }
+        Reference< chart2::XDiagram > xDiagram( m_spChart2ModelContact->getChart2Diagram() );
+        Reference< chart2::XDataSeries > xSeries( xInnerPropertyState, uno::UNO_QUERY );
+        Reference< chart2::XChartType > xChartType( DiagramHelper::getChartTypeOfSeries( xDiagram, xSeries ) );
+        if( ChartTypeHelper::isSupportingSymbolProperties( xChartType, 2 ) )
+            return beans::PropertyState_DIRECT_VALUE;
     }
     return WrappedProperty::getPropertyState( xInnerPropertyState );
 }
@@ -379,9 +376,11 @@
 //-----------------------------------------------------------------------------
 //-----------------------------------------------------------------------------
 
-WrappedSymbolBitmapURLProperty::WrappedSymbolBitmapURLProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedSymbolBitmapURLProperty::WrappedSymbolBitmapURLProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedSeriesOrDiagramProperty< OUString >( C2U("SymbolBitmapURL")
-            , uno::makeAny( OUString() ), spChart2ModelContact )
+            , uno::makeAny( OUString() ), spChart2ModelContact, ePropertyType  )
 {
 }
 
@@ -512,9 +511,11 @@
 
 }//end anonymous namespace
 
-WrappedSymbolSizeProperty::WrappedSymbolSizeProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedSymbolSizeProperty::WrappedSymbolSizeProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedSeriesOrDiagramProperty< awt::Size >( C2U("SymbolSize")
-            , uno::makeAny( awt::Size(250,250) ), spChart2ModelContact )
+            , uno::makeAny( awt::Size(250,250) ), spChart2ModelContact, ePropertyType  )
 {
 }
 
@@ -552,7 +553,7 @@
                         throw (beans::UnknownPropertyException, uno::RuntimeException)
 {
     //only export symbol size if necessary
-    if( m_spChart2ModelContact.get() )
+    if( m_ePropertyType == DIAGRAM )
         return beans::PropertyState_DEFAULT_VALUE;
 
     try
@@ -576,9 +577,11 @@
 //-----------------------------------------------------------------------------
 //-----------------------------------------------------------------------------
 
-WrappedSymbolAndLinesProperty::WrappedSymbolAndLinesProperty( ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact )
+WrappedSymbolAndLinesProperty::WrappedSymbolAndLinesProperty(
+    ::boost::shared_ptr< Chart2ModelContact > spChart2ModelContact,
+    tSeriesOrDiagramPropertyType ePropertyType )
         : WrappedSeriesOrDiagramProperty< sal_Bool >( C2U("Lines")
-            , uno::makeAny( sal_True ), spChart2ModelContact )
+            , uno::makeAny( sal_True ), spChart2ModelContact, ePropertyType  )
 {
 }
 
--- chart2/source/controller/dialogs/Bitmaps_HC.src	2008-02-18 16:40:22.000000000 +0100
+++ chart2/source/controller/dialogs/Bitmaps_HC.src	2008-02-21 16:59:25.000000000 +0100
@@ -446,52 +446,85 @@
 //---------------------
 //---------------------
 //error indicator
-Bitmap BMP_INDICATE_BOTH_VERTI_HC
+Image BMP_INDICATE_BOTH_VERTI_HC
 {
-	File = "errorbothverti_30_h.png" ;
+    ImageBitmap = Bitmap
+    {
+        File = "errorbothverti_30_h.png" ;
+    };
 };
-Bitmap BMP_INDICATE_DOWN_HC
+Image BMP_INDICATE_DOWN_HC
 {
-	File = "errordown_30_h.png" ;
+    ImageBitmap = Bitmap
+    {
+        File = "errordown_30_h.png" ;
+    };
 };
-Bitmap BMP_INDICATE_UP_HC
+Image BMP_INDICATE_UP_HC
 {
-	File = "errorup_30_h.png" ;
+    ImageBitmap = Bitmap
+    {
+        File = "errorup_30_h.png" ;
+    };
 };
-Bitmap BMP_INDICATE_BOTH_HORI_HC
+Image BMP_INDICATE_BOTH_HORI_HC
 {
-	File = "errorbothhori_30_h.png" ;
+    ImageBitmap = Bitmap
+    {
+        File = "errorbothhori_30_h.png" ;
+    };
 };
-Bitmap BMP_INDICATE_RIGHT_HC
+Image BMP_INDICATE_RIGHT_HC
 {
-	File = "errorright_30_h.png" ;
+    ImageBitmap = Bitmap
+    {
+        File = "errorright_30_h.png" ;
+    };
 };
-Bitmap BMP_INDICATE_LEFT_HC
+Image BMP_INDICATE_LEFT_HC
 {
-	File = "errorleft_30_h.png" ;
+    ImageBitmap = Bitmap
+    {
+        File = "errorleft_30_h.png" ;
+    };
 };
 
 //---------------------
 //regression curves
-Bitmap BMP_REGRESSION_NONE_HC
+Image BMP_REGRESSION_NONE_HC
 {
-	File = "regno_h.bmp" ;
+    ImageBitmap = Bitmap
+    {
+        File = "regno_h.bmp" ;
+    };
 };
-Bitmap BMP_REGRESSION_LINEAR_HC
+Image BMP_REGRESSION_LINEAR_HC
 {
-	File = "reglin_h.bmp" ;
+    ImageBitmap = Bitmap
+    {
+        File = "reglin_h.bmp" ;
+    };
 };
-Bitmap BMP_REGRESSION_LOG_HC
+Image BMP_REGRESSION_LOG_HC
 {
-	File = "reglog_h.bmp" ;
+    ImageBitmap = Bitmap
+    {
+        File = "reglog_h.bmp" ;
+    };
 };
-Bitmap BMP_REGRESSION_EXP_HC
+Image BMP_REGRESSION_EXP_HC
 {
-	File = "regexp_h.bmp" ;
+    ImageBitmap = Bitmap
+    {
+        File = "regexp_h.bmp" ;
+    };
 };
-Bitmap BMP_REGRESSION_POWER_HC
+Image BMP_REGRESSION_POWER_HC
 {
-	File = "regpow_h.bmp" ;
+    ImageBitmap = Bitmap
+    {
+        File = "regpow_h.bmp" ;
+    };
 };
 //---------------------
 Image IMG_SELECTRANGE_HC
--- chart2/source/controller/dialogs/Bitmaps.src	2008-02-18 16:39:50.000000000 +0100
+++ chart2/source/controller/dialogs/Bitmaps.src	2008-02-21 16:59:25.000000000 +0100
@@ -446,52 +446,85 @@
 //---------------------
 //---------------------
 //error indicator
-Bitmap BMP_INDICATE_BOTH_VERTI
+Image BMP_INDICATE_BOTH_VERTI
 {
-	File = "errorbothverti_30.png" ;
+	ImageBitmap = Bitmap
+	{
+        File = "errorbothverti_30.png" ;
+    };
 };
-Bitmap BMP_INDICATE_DOWN
+Image BMP_INDICATE_DOWN
 {
-	File = "errordown_30.png" ;
+	ImageBitmap = Bitmap
+	{
+        File = "errordown_30.png" ;
+    };
 };
-Bitmap BMP_INDICATE_UP
+Image BMP_INDICATE_UP
 {
-	File = "errorup_30.png" ;
+	ImageBitmap = Bitmap
+	{
+        File = "errorup_30.png" ;
+    };
 };
-Bitmap BMP_INDICATE_BOTH_HORI
+Image BMP_INDICATE_BOTH_HORI
 {
-	File = "errorbothhori_30.png" ;
+	ImageBitmap = Bitmap
+	{
+        File = "errorbothhori_30.png" ;
+    };
 };
-Bitmap BMP_INDICATE_RIGHT
+Image BMP_INDICATE_RIGHT
 {
-	File = "errorright_30.png" ;
+	ImageBitmap = Bitmap
+	{
+        File = "errorright_30.png" ;
+    };
 };
-Bitmap BMP_INDICATE_LEFT
+Image BMP_INDICATE_LEFT
 {
-	File = "errorleft_30.png" ;
+	ImageBitmap = Bitmap
+	{
+        File = "errorleft_30.png" ;
+    };
 };
 
 //---------------------
 //regression curves
-Bitmap BMP_REGRESSION_NONE
+Image BMP_REGRESSION_NONE
 {
-	File = "regno.bmp" ;
+	ImageBitmap = Bitmap
+	{
+        File = "regno.bmp" ;
+    };
 };
-Bitmap BMP_REGRESSION_LINEAR
+Image BMP_REGRESSION_LINEAR
 {
-	File = "reglin.bmp" ;
+	ImageBitmap = Bitmap
+	{
+        File = "reglin.bmp" ;
+    };
 };
-Bitmap BMP_REGRESSION_LOG
+Image BMP_REGRESSION_LOG
 {
-	File = "reglog.bmp" ;
+	ImageBitmap = Bitmap
+	{
+        File = "reglog.bmp" ;
+    };
 };
-Bitmap BMP_REGRESSION_EXP
+Image BMP_REGRESSION_EXP
 {
-	File = "regexp.bmp" ;
+	ImageBitmap = Bitmap
+	{
+        File = "regexp.bmp" ;
+    };
 };
-Bitmap BMP_REGRESSION_POWER
+Image BMP_REGRESSION_POWER
 {
-	File = "regpow.bmp" ;
+	ImageBitmap = Bitmap
+	{
+        File = "regpow.bmp" ;
+    };
 };
 //---------------------
 Image IMG_SELECTRANGE
--- chart2/source/controller/dialogs/DataBrowser.cxx	2008-02-18 16:40:38.000000000 +0100
+++ chart2/source/controller/dialogs/DataBrowser.cxx	2008-02-21 16:59:25.000000000 +0100
@@ -716,7 +716,7 @@
 {
     OSL_ASSERT( m_apDataBrowserModel.get());
     if( nColumnId > 0 )
-        return String( m_apDataBrowserModel->getRoleOfColumn( nColumnId - 1 ));
+        return String( m_apDataBrowserModel->getRoleOfColumn( static_cast< sal_Int32 >( nColumnId ) - 1 ));
     return String();
 }
 
@@ -768,7 +768,8 @@
     if(( nColumnId >= 1 ) && ( nRow >= 0 ) &&
         m_apDataBrowserModel.get())
 	{
-        fResult = m_apDataBrowserModel->getCellNumber( nColumnId - 1, nRow );
+        fResult = m_apDataBrowserModel->getCellNumber(
+            static_cast< sal_Int32 >( nColumnId ) - 1, nRow );
     }
 
 	return fResult;
--- chart2/source/controller/dialogs/DataBrowserModel.cxx	2007-07-25 10:30:25.000000000 +0200
+++ chart2/source/controller/dialogs/DataBrowserModel.cxx	2008-02-21 16:59:25.000000000 +0100
@@ -44,6 +44,7 @@
 #include "PropertyHelper.hxx"
 #include "ControllerLockGuard.hxx"
 #include "macros.hxx"
+#include "StatisticsHelper.hxx"
 
 #include <com/sun/star/container/XIndexReplace.hpp>
 #include <com/sun/star/chart2/XDataSeriesContainer.hpp>
@@ -60,6 +61,10 @@
 
 #include <algorithm>
 
+#if OSL_DEBUG_LEVEL > 1
+#include <cstdio>
+#endif
+
 using namespace ::com::sun::star;
 
 using ::com::sun::star::uno::Reference;
@@ -777,7 +782,8 @@
                             DataSeriesHelper::getNumberFormatKeyFromAxis(
                                 aSeries[nSeriesIdx], aCooSysSeq[nCooSysIdx], 1 );
 
-                        for( sal_Int32 nSeqIdx=0; nSeqIdx<aLSeqs.getLength(); ++nSeqIdx )
+                        sal_Int32 nSeqIdx=0;
+                        for( ; nSeqIdx<aLSeqs.getLength(); ++nSeqIdx )
                         {
                             if( ::std::find_if( aSharedSequences.begin(), aSharedSequences.end(),
                                              lcl_RepresentationsOfLSeqMatch( aLSeqs[nSeqIdx] )) == aSharedSequences.end())
@@ -805,6 +811,11 @@
                         {
                             (void)ex;
                         }
+
+                        // add ranges for error bars if present for a series
+                        if( StatisticsHelper::usesErrorBarRanges( aSeries[nSeriesIdx], /* bYError = */ true ))
+                            addErrorBarRanges( aSeries[nSeriesIdx], nNumberFormatKey, nSeqIdx, nHeaderEnd );
+
                         m_aHeaders.push_back(
                             tDataHeader(
                                 aSeries[nSeriesIdx],
@@ -812,6 +823,7 @@
                                 bSwapXAndYAxis,
                                 nHeaderStart,
                                 nHeaderEnd - 1 ));
+
                         nHeaderStart = nHeaderEnd;
 
                         ::std::sort( m_aColumns.begin() + nStartColIndex, m_aColumns.end(), implColumnLess() );
@@ -826,6 +838,84 @@
 {
 }
 
+void DataBrowserModel::addErrorBarRanges(
+    const Reference< chart2::XDataSeries > & xDataSeries,
+    sal_Int32 nNumberFormatKey,
+    sal_Int32 & rInOutSequenceIndex,
+    sal_Int32 & rInOutHeaderEnd )
+{
+    try
+    {
+        ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aSequences;
+
+        // x error bars
+        // ------------
+        Reference< chart2::data::XDataSource > xErrorSource(
+            StatisticsHelper::getErrorBars( xDataSeries, /* bYError = */ false ), uno::UNO_QUERY );
+
+        // positive x error bars
+        Reference< chart2::data::XLabeledDataSequence > xErrorLSequence(
+            StatisticsHelper::getErrorLabeledDataSequenceFromDataSource(
+                xErrorSource,
+                /* bPositiveValue = */ true,
+                /* bYError = */ false ));
+        if( xErrorLSequence.is())
+            aSequences.push_back( xErrorLSequence );
+
+        // negative x error bars
+        xErrorLSequence.set(
+            StatisticsHelper::getErrorLabeledDataSequenceFromDataSource(
+                xErrorSource,
+                /* bPositiveValue = */ false,
+                /* bYError = */ false ));
+        if( xErrorLSequence.is())
+            aSequences.push_back( xErrorLSequence );
+
+        // y error bars
+        // ------------
+        xErrorSource.set(
+            StatisticsHelper::getErrorBars( xDataSeries, /* bYError = */ true ), uno::UNO_QUERY );
+
+        // positive y error bars
+        xErrorLSequence.set(
+            StatisticsHelper::getErrorLabeledDataSequenceFromDataSource(
+                xErrorSource,
+                /* bPositiveValue = */ true,
+                /* bYError = */ true ));
+        if( xErrorLSequence.is())
+            aSequences.push_back( xErrorLSequence );
+
+        // negative y error bars
+        xErrorLSequence.set(
+            StatisticsHelper::getErrorLabeledDataSequenceFromDataSource(
+                xErrorSource,
+                /* bPositiveValue = */ false,
+                /* bYError = */ true ));
+        if( xErrorLSequence.is())
+            aSequences.push_back( xErrorLSequence );
+
+
+        for( ::std::vector< Reference< chart2::data::XLabeledDataSequence > >::const_iterator aIt( aSequences.begin());
+             aIt != aSequences.end(); ++aIt )
+        {
+            m_aColumns.push_back(
+                tDataColumn(
+                    xDataSeries,
+                    rInOutSequenceIndex,
+                    lcl_getUIRoleName( *aIt ),
+                    *aIt,
+                    NUMBER,
+                    nNumberFormatKey ));
+            ++rInOutSequenceIndex;
+            ++rInOutHeaderEnd;
+        }
+    }
+    catch( const uno::Exception & ex )
+    {
+        ASSERT_EXCEPTION( ex );
+    }
+}
+
 // static
 void DataBrowserModel::restoreModel(
     const Reference< chart2::XChartDocument > & xSource,
--- chart2/source/controller/dialogs/DataBrowserModel.hxx	2007-06-11 17:13:40.000000000 +0200
+++ chart2/source/controller/dialogs/DataBrowserModel.hxx	2008-02-21 16:59:25.000000000 +0100
@@ -175,6 +175,13 @@
     void updateFromModel();
     void applyToModel();
 
+    void addErrorBarRanges(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::XDataSeries > & xDataSeries,
+        sal_Int32 nNumberFormatKey,
+        sal_Int32 & rInOutSequenceIndex,
+        sal_Int32 & rInOutHeaderEnd );
+
     ::com::sun::star::uno::Reference<
             ::com::sun::star::chart2::data::XLabeledDataSequence >
         getCategories() const throw();
--- chart2/source/controller/dialogs/DialogModel.cxx	2007-08-17 14:13:20.000000000 +0200
+++ chart2/source/controller/dialogs/DialogModel.cxx	2008-02-21 16:59:25.000000000 +0100
@@ -103,7 +103,11 @@
     {
         aTranslationMap[ C2U( "categories" ) ] =   OUString( String( ::chart::SchResId( STR_DATA_ROLE_CATEGORIES )));
         aTranslationMap[ C2U( "error-bars-x" ) ] = OUString( String( ::chart::SchResId( STR_DATA_ROLE_X_ERROR )));
+        aTranslationMap[ C2U( "error-bars-x-positive" ) ] = OUString( String( ::chart::SchResId( STR_DATA_ROLE_X_ERROR_POSITIVE )));
+        aTranslationMap[ C2U( "error-bars-x-negative" ) ] = OUString( String( ::chart::SchResId( STR_DATA_ROLE_X_ERROR_NEGATIVE )));
         aTranslationMap[ C2U( "error-bars-y" ) ] = OUString( String( ::chart::SchResId( STR_DATA_ROLE_Y_ERROR )));
+        aTranslationMap[ C2U( "error-bars-y-positive" ) ] = OUString( String( ::chart::SchResId( STR_DATA_ROLE_Y_ERROR_POSITIVE )));
+        aTranslationMap[ C2U( "error-bars-y-negative" ) ] = OUString( String( ::chart::SchResId( STR_DATA_ROLE_Y_ERROR_NEGATIVE )));
         aTranslationMap[ C2U( "label" ) ] =        OUString( String( ::chart::SchResId( STR_DATA_ROLE_LABEL )));
         aTranslationMap[ C2U( "values-first" ) ] = OUString( String( ::chart::SchResId( STR_DATA_ROLE_FIRST )));
         aTranslationMap[ C2U( "values-last" ) ] =  OUString( String( ::chart::SchResId( STR_DATA_ROLE_LAST )));
@@ -144,16 +148,20 @@
     rOutMap.clear();
     sal_Int32 nIndex = 0;
 
-    rOutMap[ C2U( "label" ) ] =        ++nIndex;
-    rOutMap[ C2U( "categories" ) ] =   ++nIndex;
-    rOutMap[ C2U( "values-x" ) ] =     ++nIndex;
-    rOutMap[ C2U( "values-y" ) ] =     ++nIndex;
-    rOutMap[ C2U( "error-bars-x" ) ] = ++nIndex;
-    rOutMap[ C2U( "error-bars-y" ) ] = ++nIndex;
-    rOutMap[ C2U( "values-first" ) ] = ++nIndex;
-    rOutMap[ C2U( "values-min" ) ] =   ++nIndex;
-    rOutMap[ C2U( "values-max" ) ] =   ++nIndex;
-    rOutMap[ C2U( "values-last" ) ] =  ++nIndex;
+    rOutMap[ C2U( "label" ) ] =                 ++nIndex;
+    rOutMap[ C2U( "categories" ) ] =            ++nIndex;
+    rOutMap[ C2U( "values-x" ) ] =              ++nIndex;
+    rOutMap[ C2U( "values-y" ) ] =              ++nIndex;
+    rOutMap[ C2U( "error-bars-x" ) ] =          ++nIndex;
+    rOutMap[ C2U( "error-bars-x-positive" ) ] = ++nIndex;
+    rOutMap[ C2U( "error-bars-x-negative" ) ] = ++nIndex;
+    rOutMap[ C2U( "error-bars-y" ) ] =          ++nIndex;
+    rOutMap[ C2U( "error-bars-y-positive" ) ] = ++nIndex;
+    rOutMap[ C2U( "error-bars-y-negative" ) ] = ++nIndex;
+    rOutMap[ C2U( "values-first" ) ] =          ++nIndex;
+    rOutMap[ C2U( "values-min" ) ] =            ++nIndex;
+    rOutMap[ C2U( "values-max" ) ] =            ++nIndex;
+    rOutMap[ C2U( "values-last" ) ] =           ++nIndex;
 }
 
 struct lcl_DataSeriesContainerAppend : public
--- chart2/source/controller/dialogs/dlg_InsertErrorBars.cxx	2008-02-18 16:42:41.000000000 +0100
+++ chart2/source/controller/dialogs/dlg_InsertErrorBars.cxx	2008-02-21 16:59:25.000000000 +0100
@@ -63,16 +63,20 @@
 
 InsertErrorBarsDialog::InsertErrorBarsDialog(
     Window* pParent, const SfxItemSet& rMyAttrs,
+    const uno::Reference< chart2::XChartDocument > & xChartDocument,
     ErrorBarResources::tErrorBarType eType /* = ErrorBarResources::ERROR_BAR_Y */ ) :
         ModalDialog( pParent, SchResId( DLG_DATA_YERRORBAR )),
         rInAttrs( rMyAttrs ),
         aBtnOK( this, SchResId( BTN_OK )),
         aBtnCancel( this, SchResId( BTN_CANCEL )),
         aBtnHelp( this, SchResId( BTN_HELP )),
-        m_apErrorBarResources( new ErrorBarResources( this, rInAttrs, eType ))
+        m_apErrorBarResources( new ErrorBarResources(
+                                   this, this, rInAttrs,
+                                   /* bNoneAvailable = */ true, eType ))
 {
     FreeResource();
     this->SetText( String( SchResId( STR_PAGE_YERROR_BARS )));
+    m_apErrorBarResources->SetChartDocumentForRangeChoosing( xChartDocument );
 }
 
 InsertErrorBarsDialog::~InsertErrorBarsDialog()
--- chart2/source/controller/dialogs/dlg_InsertErrorBars.src	2008-02-18 16:43:01.000000000 +0100
+++ chart2/source/controller/dialogs/dlg_InsertErrorBars.src	2008-02-21 16:59:25.000000000 +0100
@@ -44,8 +44,8 @@
 // 	HelpID = SID_INSERT_STATISTICS ;
 	OutputSize = TRUE ;
 	SVLook = TRUE ;
-	Size = MAP_APPFONT ( 308 , 150 ) ;
+	Size = MAP_APPFONT ( 300 , 156 ) ;
 	Moveable = TRUE ;
-    BUTTONS_OK_CANCEL_HELP_STACKED(252)
-    RESOURCE_ERRORBARS( 252 - 6 )
+    BUTTONS_OK_CANCEL_HELP_STACKED( 244 )
+    RESOURCE_ERRORBARS( 244 - 6, 14 )
 };
--- chart2/source/controller/dialogs/dlg_ObjectProperties.cxx	2008-02-18 16:44:58.000000000 +0100
+++ chart2/source/controller/dialogs/dlg_ObjectProperties.cxx	2008-02-21 16:59:25.000000000 +0100
@@ -141,6 +141,7 @@
         , m_bCanAxisLabelsBeStaggered(false)
         , m_bHasNumberProperties(false)
         , m_bProvidesStartingAngle(false)
+        , m_xChartDocument( 0 )
 {
     rtl::OUString aParticleID = ObjectIdentifier::getParticleID( m_aObjectCID );
     m_bAffectsMultipleObjects = aParticleID.equals(C2U("ALLELEMENTS"));
@@ -159,6 +160,7 @@
 
 void ObjectPropertiesDialogParameter::init( const uno::Reference< frame::XModel >& xChartModel )
 {
+    m_xChartDocument.set( xChartModel, uno::UNO_QUERY );
     uno::Reference< XDiagram > xDiagram( ChartModelHelper::findDiagram( xChartModel ) );
     uno::Reference< XDataSeries > xSeries = ObjectIdentifier::getDataSeriesForCID( m_aObjectCID, xChartModel );
     uno::Reference< XChartType > xChartType = ChartModelHelper::getChartTypeOfSeries( xChartModel, xSeries );
@@ -184,6 +186,11 @@
     }
     m_bHasLineProperties     = true; //@todo ask object
 
+    if( OBJECTTYPE_DATA_ERRORS == m_eObjectType )
+        m_bHasStatisticProperties = true;
+    else if( OBJECTTYPE_DATA_CURVE == m_eObjectType )
+        m_bHasRegressionProperties = true;
+
     if( OBJECTTYPE_AXIS == m_eObjectType )
     {
         //show scale properties only for a single axis not for multiselection
@@ -273,6 +280,10 @@
 {
     return m_bProvidesStartingAngle;
 }
+uno::Reference< chart2::XChartDocument > ObjectPropertiesDialogParameter::getDocument() const
+{
+    return m_xChartDocument;
+}
 
 //const USHORT nNoArrowDlg          = 1100;
 const USHORT nNoArrowNoShadowDlg    = 1101;
@@ -351,8 +362,8 @@
             AddTabPage(RID_SVXPAGE_CHAR_NAME, String(SchResId(STR_PAGE_CHARACTERS)));
             AddTabPage(RID_SVXPAGE_CHAR_EFFECTS, String(SchResId(STR_PAGE_FONT_EFFECTS)));
             AddTabPage(TP_DATA_DESCR, String(SchResId(STR_OBJECT_DATALABELS)), DataLabelsTabPage::Create, NULL);
-            if( m_pParameter->HasStatisticProperties() )
-                AddTabPage(TP_YERRORBAR, String(SchResId(STR_PAGE_YERROR_BARS)), ErrorBarsTabPage::Create, NULL);
+//             if( m_pParameter->HasStatisticProperties() )
+//                 AddTabPage(TP_YERRORBAR, String(SchResId(STR_PAGE_YERROR_BARS)), ErrorBarsTabPage::Create, NULL);
             if( m_pParameter->HasGeometryProperties() )
                 AddTabPage(TP_LAYOUT, String(SchResId(STR_PAGE_LAYOUT)),SchLayoutTabPage::Create, NULL);
             if( m_pParameter->ProvidesSecondaryYAxis() || m_pParameter->ProvidesOverlapAndGapWidth() )
@@ -374,19 +385,22 @@
             break;
         }
 
-        case OBJECTTYPE_GRID:
-        case OBJECTTYPE_SUBGRID:
         case OBJECTTYPE_DATA_ERRORS:
         case OBJECTTYPE_DATA_ERRORS_X:
         case OBJECTTYPE_DATA_ERRORS_Y:
         case OBJECTTYPE_DATA_ERRORS_Z:
+            AddTabPage(TP_YERRORBAR, String(SchResId(STR_PAGE_YERROR_BARS)), ErrorBarsTabPage::Create, NULL);
+            AddTabPage(RID_SVXPAGE_LINE, String(SchResId(STR_PAGE_LINE)));
+            break;
+
+        case OBJECTTYPE_GRID:
+        case OBJECTTYPE_SUBGRID:
         case OBJECTTYPE_DATA_AVERAGE_LINE:
         case OBJECTTYPE_DATA_STOCK_RANGE:
             AddTabPage(RID_SVXPAGE_LINE, String(SchResId(STR_PAGE_LINE)));
             break;
 
         case OBJECTTYPE_DATA_CURVE:
-            OSL_ASSERT( m_pParameter->HasRegressionProperties());
             AddTabPage(TP_TRENDLINE, String(SchResId(STR_PAGE_TRENDLINE_TYPE)), TrendlineTabPage::Create, NULL);
             AddTabPage(RID_SVXPAGE_LINE, String(SchResId(STR_PAGE_LINE)));
             break;
@@ -535,6 +549,7 @@
             {
                 pTabPage->SetAxisMinorStepWidthForErrorBarDecimals( m_fAxisMinorStepWidthForErrorBarDecimals );
                 pTabPage->SetErrorBarType( ErrorBarResources::ERROR_BAR_Y );
+                pTabPage->SetChartDocumentForRangeChoosing( m_pParameter->getDocument());
             }
             break;
         }
--- chart2/source/controller/dialogs/RangeEdit.hxx	2007-09-18 16:53:38.000000000 +0200
+++ chart2/source/controller/dialogs/RangeEdit.hxx	1970-01-01 01:00:00.000000000 +0100
@@ -1,64 +0,0 @@
-/*************************************************************************
-*
-*  OpenOffice.org - a multi-platform office productivity suite
-*
-*  $RCSfile: RangeEdit.hxx,v $
-*
-*  $Revision: 1.2 $
-*
-*  last change: $Author: vg $ $Date: 2007/09/18 14:53:38 $
-*
-*  The Contents of this file are made available subject to
-*  the terms of GNU Lesser General Public License Version 2.1.
-*
-*
-*    GNU Lesser General Public License Version 2.1
-*    =============================================
-*    Copyright 2005 by Sun Microsystems, Inc.
-*    901 San Antonio Road, Palo Alto, CA 94303, USA
-*
-*    This library is free software; you can redistribute it and/or
-*    modify it under the terms of the GNU Lesser General Public
-*    License version 2.1, as published by the Free Software Foundation.
-*
-*    This library is distributed in the hope that it will be useful,
-*    but WITHOUT ANY WARRANTY; without even the implied warranty of
-*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-*    Lesser General Public License for more details.
-*
-*    You should have received a copy of the GNU Lesser General Public
-*    License along with this library; if not, write to the Free Software
-*    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
-*    MA  02111-1307  USA
-*
-************************************************************************/
-#ifndef CHART2RANGEEDIT_HXX
-#define CHART2RANGEEDIT_HXX
-
-#include <vcl/edit.hxx>
-#include <vcl/accel.hxx>
-#include <tools/link.hxx>
-
-//.............................................................................
-namespace chart
-{
-//.............................................................................
-
-class RangeEdit : public Edit
-{
-public:
-    explicit            RangeEdit( Window* pParent, const ResId& rResId);
-    virtual             ~RangeEdit();
-
-    // KeyInput method
-    void                SetKeyInputHdl( const Link& rKeyInputLink );
-    virtual void        KeyInput( const KeyEvent& rKEvt );
-
-private:
-    Link                m_aKeyInputLink;
-};
-
-//.............................................................................
-} //namespace chart
-//.............................................................................
-#endif
--- chart2/source/controller/dialogs/RangeSelectionHelper.hxx	2007-07-25 10:31:33.000000000 +0200
+++ chart2/source/controller/dialogs/RangeSelectionHelper.hxx	1970-01-01 01:00:00.000000000 +0100
@@ -1,98 +0,0 @@
-/*************************************************************************
- *
- *  OpenOffice.org - a multi-platform office productivity suite
- *
- *  $RCSfile: RangeSelectionHelper.hxx,v $
- *
- *  $Revision: 1.3 $
- *
- *  last change: $Author: rt $ $Date: 2007/07/25 08:31:33 $
- *
- *  The Contents of this file are made available subject to
- *  the terms of GNU Lesser General Public License Version 2.1.
- *
- *
- *    GNU Lesser General Public License Version 2.1
- *    =============================================
- *    Copyright 2005 by Sun Microsystems, Inc.
- *    901 San Antonio Road, Palo Alto, CA 94303, USA
- *
- *    This library is free software; you can redistribute it and/or
- *    modify it under the terms of the GNU Lesser General Public
- *    License version 2.1, as published by the Free Software Foundation.
- *
- *    This library is distributed in the hope that it will be useful,
- *    but WITHOUT ANY WARRANTY; without even the implied warranty of
- *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- *    Lesser General Public License for more details.
- *
- *    You should have received a copy of the GNU Lesser General Public
- *    License along with this library; if not, write to the Free Software
- *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- *    MA  02111-1307  USA
- *
- ************************************************************************/
-#ifndef CHART2_RANGESELECTIONHELPER_HXX
-#define CHART2_RANGESELECTIONHELPER_HXX
-
-#include <com/sun/star/chart2/XChartDocument.hpp>
-#include <com/sun/star/beans/PropertyValue.hpp>
-
-namespace com { namespace sun { namespace star {
-    namespace sheet{
-        class XRangeSelection;
-        class XRangeSelectionListener;
-        class XCellRangesAccess;
-    }
-}}}
-
-namespace chart
-{
-
-class RangeSelectionListenerParent;
-
-class RangeSelectionHelper
-{
-public:
-	explicit RangeSelectionHelper(
-        const ::com::sun::star::uno::Reference<
-            ::com::sun::star::chart2::XChartDocument > & xChartDocument );
-    ~RangeSelectionHelper();
-
-    bool hasRangeSelection();
-    ::com::sun::star::uno::Reference<
-            ::com::sun::star::sheet::XRangeSelection > getRangeSelection();
-    ::com::sun::star::uno::Reference<
-            ::com::sun::star::sheet::XCellRangesAccess > getCellRangesAccess();
-    void raiseRangeSelectionDocument();
-    bool chooseRange(
-        const ::rtl::OUString & aCurrentRange,
-        const ::rtl::OUString & aUIString,
-        RangeSelectionListenerParent & rListenerParent );
-    void stopRangeListening( bool bRemoveListener = true );
-    bool verifyCellRange( const ::rtl::OUString & rRangeStr );
-    bool verifyArguments( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& rArguments );
-    ::rtl::OUString getCellRangeContent( const ::rtl::OUString & rRangeStr );
-
-private:
-    ::com::sun::star::uno::Reference<
-            ::com::sun::star::sheet::XRangeSelection >
-        m_xRangeSelection;
-
-    ::com::sun::star::uno::Reference<
-            ::com::sun::star::chart2::XChartDocument >
-        m_xChartDocument;
-
-    ::com::sun::star::uno::Reference<
-            ::com::sun::star::sheet::XCellRangesAccess >
-        m_xCellRangesAccess;
-
-    ::com::sun::star::uno::Reference<
-            ::com::sun::star::sheet::XRangeSelectionListener >
-        m_xRangeSelectionListener;
-};
-
-} //  namespace chart
-
-// CHART2_RANGESELECTIONHELPER_HXX
-#endif
--- chart2/source/controller/dialogs/RangeSelectionListener.hxx	2007-05-22 19:29:36.000000000 +0200
+++ chart2/source/controller/dialogs/RangeSelectionListener.hxx	1970-01-01 01:00:00.000000000 +0100
@@ -1,95 +0,0 @@
-/*************************************************************************
- *
- *  OpenOffice.org - a multi-platform office productivity suite
- *
- *  $RCSfile: RangeSelectionListener.hxx,v $
- *
- *  $Revision: 1.2 $
- *
- *  last change: $Author: vg $ $Date: 2007/05/22 17:29:36 $
- *
- *  The Contents of this file are made available subject to
- *  the terms of GNU Lesser General Public License Version 2.1.
- *
- *
- *    GNU Lesser General Public License Version 2.1
- *    =============================================
- *    Copyright 2005 by Sun Microsystems, Inc.
- *    901 San Antonio Road, Palo Alto, CA 94303, USA
- *
- *    This library is free software; you can redistribute it and/or
- *    modify it under the terms of the GNU Lesser General Public
- *    License version 2.1, as published by the Free Software Foundation.
- *
- *    This library is distributed in the hope that it will be useful,
- *    but WITHOUT ANY WARRANTY; without even the implied warranty of
- *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- *    Lesser General Public License for more details.
- *
- *    You should have received a copy of the GNU Lesser General Public
- *    License along with this library; if not, write to the Free Software
- *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- *    MA  02111-1307  USA
- *
- ************************************************************************/
-#ifndef CHART2_RANGESELECTIONLISTENER_HXX
-#define CHART2_RANGESELECTIONLISTENER_HXX
-
-#include "ControllerLockGuard.hxx"
-
-#ifndef _CPPUHELPER_IMPLBASE1_HXX_
-#include <cppuhelper/implbase1.hxx>
-#endif
-
-#ifndef _COM_SUN_STAR_FRAME_XMODEL_HPP_
-#include <com/sun/star/frame/XModel.hpp>
-#endif
-#ifndef _COM_SUN_STAR_SHEET_XRANGESELECTIONLISTENER_HPP_
-#include <com/sun/star/sheet/XRangeSelectionListener.hpp>
-#endif
-
-namespace chart
-{
-
-class RangeSelectionListenerParent
-{
-public:
-    virtual void listeningFinished( const ::rtl::OUString & rNewRange ) = 0;
-    virtual void disposingRangeSelection() = 0;
-};
-
-// ----------------------------------------
-
-class RangeSelectionListener : public
-    ::cppu::WeakImplHelper1<
-        ::com::sun::star::sheet::XRangeSelectionListener >
-{
-public:
-	explicit RangeSelectionListener(
-        RangeSelectionListenerParent & rParent,
-        const ::rtl::OUString & rInitialRange,
-        const ::com::sun::star::uno::Reference<
-            ::com::sun::star::frame::XModel >& xModelToLockController );
-	virtual ~RangeSelectionListener();
-
-protected:
-    // ____ XRangeSelectionListener ____
-    virtual void SAL_CALL done( const ::com::sun::star::sheet::RangeSelectionEvent& aEvent )
-        throw (::com::sun::star::uno::RuntimeException);
-    virtual void SAL_CALL aborted( const ::com::sun::star::sheet::RangeSelectionEvent& aEvent )
-        throw (::com::sun::star::uno::RuntimeException);
-
-    // ____ XEventListener ____
-    virtual void SAL_CALL disposing( const ::com::sun::star::lang::EventObject& Source )
-        throw (::com::sun::star::uno::RuntimeException);
-
-private:
-    RangeSelectionListenerParent & m_rParent;
-    ::rtl::OUString m_aRange;
-    ControllerLockGuard m_aControllerLockGuard;
-};
-
-} //  namespace chart
-
-// CHART2_RANGESELECTIONLISTENER_HXX
-#endif
--- chart2/source/controller/dialogs/res_ErrorBar.cxx	2008-02-18 16:45:55.000000000 +0100
+++ chart2/source/controller/dialogs/res_ErrorBar.cxx	2008-02-26 11:58:17.000000000 +0100
@@ -42,10 +42,56 @@
 #include "Strings.hrc"
 #include "Bitmaps.hrc"
 #include "Bitmaps_HC.hrc"
+#include "RangeSelectionHelper.hxx"
+// for RANGE_SELECTION_INVALID_RANGE_BACKGROUND_COLOR
+#include "TabPageNotifiable.hxx"
 
-#ifndef INCLUDED_RTL_MATH_HXX
 #include <rtl/math.hxx>
-#endif
+#include <vcl/dialog.hxx>
+#include <svtools/stritem.hxx>
+
+using namespace ::com::sun::star;
+
+namespace
+{
+void lcl_enableRangeChoosing( bool bEnable, Dialog * pDialog )
+{
+    if( pDialog )
+    {
+        pDialog->Show( bEnable ? FALSE : TRUE );
+        pDialog->SetModalInputMode( bEnable ? FALSE : TRUE );
+    }
+}
+
+sal_uInt16 lcl_getLbEntryPosByErrorKind( SvxChartKindError eErrorKind )
+{
+    sal_uInt16 nResult = 0;
+    switch( eErrorKind )
+    {
+        // for these cases select the default in the list box
+        case CHERROR_NONE:
+        case CHERROR_PERCENT:
+        case CHERROR_CONST:
+        case CHERROR_RANGE:
+            nResult = CHART_LB_FUNCTION_STD_DEV;
+            break;
+        case CHERROR_VARIANT:
+            nResult = CHART_LB_FUNCTION_VARIANCE;
+            break;
+        case CHERROR_SIGMA:
+            nResult = CHART_LB_FUNCTION_STD_DEV;
+            break;
+        case CHERROR_BIGERROR:
+            nResult = CHART_LB_FUNCTION_ERROR_MARGIN;
+            break;
+        case CHERROR_STDERROR:
+            nResult = CHART_LB_FUNCTION_STD_ERROR;
+            break;
+    }
+    return nResult;
+}
+} // anonymous namespace
+
 
 //.............................................................................
 namespace chart
@@ -54,7 +100,7 @@
 
 // macro for selecting a normal or high contrast bitmap the stack variable
 // bIsHighContrast must exist and reflect the correct state
-#define SELECT_BITMAP(name) Bitmap( SchResId( bIsHighContrast ? name ## _HC : name ))
+#define SELECT_IMAGE(name) Image( SchResId( bIsHighContrast ? name ## _HC : name ))
 
 enum StatIndicator
 {
@@ -63,47 +109,82 @@
     INDICATE_DOWN
 };
 
-ErrorBarResources::ErrorBarResources( Window* pWindow, const SfxItemSet& rInAttrs,
+ErrorBarResources::ErrorBarResources( Window* pParent, Dialog * pParentDialog,
+                                      const SfxItemSet& rInAttrs, bool bNoneAvailable,
                                       tErrorBarType eType /* = ERROR_BAR_Y */ ) :
-    m_aFlErrorCategory (pWindow, SchResId (FL_ERROR)),
-    m_aRbtNone (pWindow, SchResId (RBT_NONE)),
-    m_aRbtVariant (pWindow, SchResId (RBT_VARIANT)),
-    m_aRbtSigma (pWindow, SchResId (RBT_SIGMA)),
-    m_aRbtPercent (pWindow, SchResId (RBT_PERCENT)),
-    m_aRbtBigError (pWindow, SchResId (RBT_BIGERROR)),
-    m_aRbtConst (pWindow, SchResId (RBT_CONST)),
-//     m_aRbtRange (pWindow, SchResId (RBT_RANGE)),
-    m_aMtrFldPercent (pWindow, SchResId (MTR_FLD_PERCENT)),
-    m_aMtrFldBigError (pWindow, SchResId (MTR_FLD_BIGERROR)),
-    m_aFTConstPlus (pWindow, SchResId (FT_PERCENT_PLUS)),
-    m_aMtrFldConstPlus (pWindow, SchResId (MTR_FLD_PLUS)),
-    m_aFTConstMinus (pWindow, SchResId (FT_PERCENT_MINUS)),
-    m_aMtrFldConstMinus (pWindow, SchResId (MTR_FLD_MINUS)),
-    m_aFLIndicate (pWindow, SchResId (FL_INDICATE)),
-    m_aIndicatorSet (pWindow, SchResId (CT_INDICATE)),
-    m_eErrorKind( CHERROR_NONE ),
-    m_eIndicate( CHINDICATE_BOTH ),
-    m_bErrorKindUnique( true ),
-    m_bIndicatorUnique( true ),
-    m_bPlusUnique( true ),
-    m_bMinusUnique( true ),
-    m_eErrorBarType( eType )
-{
-    m_aRbtNone.SetClickHdl(LINK(this, ErrorBarResources, RBtnClick));
-    m_aRbtVariant.SetClickHdl(LINK(this, ErrorBarResources, RBtnClick));
-    m_aRbtSigma.SetClickHdl(LINK(this, ErrorBarResources, RBtnClick));
-    m_aRbtPercent.SetClickHdl(LINK(this, ErrorBarResources, RBtnClick));
-    m_aRbtBigError.SetClickHdl(LINK(this, ErrorBarResources, RBtnClick));
-    m_aRbtConst.SetClickHdl(LINK(this, ErrorBarResources, RBtnClick));
 
-    FillValueSets();
+        m_aFlErrorCategory( pParent, SchResId( FL_ERROR )),
+        m_aRbNone( pParent, SchResId( RB_NONE )),
+        m_aRbConst( pParent, SchResId( RB_CONST )),
+        m_aRbPercent( pParent, SchResId( RB_PERCENT )),
+        m_aRbFunction( pParent, SchResId( RB_FUNCTION )),
+        m_aRbRange( pParent, SchResId( RB_RANGE )),
+        m_aLbFunction( pParent, SchResId( LB_FUNCTION )),
+
+        m_aFlParameters( pParent, SchResId( FL_PARAMETERS )),
+        m_aFtPositive( pParent, SchResId( FT_POSITIVE )),
+        m_aMfPositive( pParent, SchResId( MF_POSITIVE )),
+        m_aEdRangePositive( pParent, SchResId( ED_RANGE_POSITIVE )),
+        m_aIbRangePositive( pParent, SchResId( IB_RANGE_POSITIVE )),
+        m_aFtNegative( pParent, SchResId( FT_NEGATIVE )),
+        m_aMfNegative( pParent, SchResId( MF_NEGATIVE )),
+        m_aEdRangeNegative( pParent, SchResId( ED_RANGE_NEGATIVE )),
+        m_aIbRangeNegative( pParent, SchResId( IB_RANGE_NEGATIVE )),
+        m_aCbSyncPosNeg( pParent, SchResId( CB_SYN_POS_NEG )),
+
+        m_aFlIndicate( pParent, SchResId( FL_INDICATE )),
+        m_aRbBoth( pParent, SchResId( RB_BOTH )),
+        m_aRbPositive( pParent, SchResId( RB_POSITIVE )),
+        m_aRbNegative( pParent, SchResId( RB_NEGATIVE )),
+        m_aFiBoth( pParent, SchResId( FI_BOTH )),
+        m_aFiPositive( pParent, SchResId( FI_POSITIVE )),
+        m_aFiNegative( pParent, SchResId( FI_NEGATIVE )),
+
+        m_eErrorKind( CHERROR_NONE ),
+        m_eIndicate( CHINDICATE_BOTH ),
+        m_bErrorKindUnique( true ),
+        m_bIndicatorUnique( true ),
+        m_bPlusUnique( true ),
+        m_bMinusUnique( true ),
+        m_bRangePosUnique( true ),
+        m_bRangeNegUnique( true ),
+        m_bNoneAvailable( bNoneAvailable ),
+        m_eErrorBarType( eType ),
+        m_nConstDecimalDigits( 1 ),
+        m_nConstSpinSize( 1 ),
+        m_pParentWindow( pParent ),
+        m_pParentDialog( pParentDialog ),
+        m_pCurrentRangeChoosingField( 0 ),
+        m_bHasInternalDataProvider( true )
+{
+    if( m_bNoneAvailable )
+        m_aRbNone.SetClickHdl( LINK( this, ErrorBarResources, CategoryChosen ));
+    else
+        m_aRbNone.Hide();
 
-    m_aIndicatorSet.SetStyle (m_aIndicatorSet.GetStyle () /*| WB_ITEMBORDER | WB_DOUBLEBORDER*/ | WB_NAMEFIELD /*| WB_VSCROLL*/ );
-    m_aIndicatorSet.SetColCount(5);
-    m_aIndicatorSet.SetLineCount(1);
-    m_aIndicatorSet.SetExtraSpacing(2);
-    m_aIndicatorSet.SetSelectHdl(LINK(this, ErrorBarResources, SelectIndicate));
+    m_aRbConst.SetClickHdl( LINK( this, ErrorBarResources, CategoryChosen ));
+    m_aRbPercent.SetClickHdl( LINK( this, ErrorBarResources, CategoryChosen ));
+    m_aRbFunction.SetClickHdl( LINK( this, ErrorBarResources, CategoryChosen ));
+    m_aRbRange.SetClickHdl( LINK( this, ErrorBarResources, CategoryChosen ));
+    m_aLbFunction.SetSelectHdl( LINK( this, ErrorBarResources, CategoryChosen ));
+
+    m_aCbSyncPosNeg.Check( FALSE );
+    m_aCbSyncPosNeg.SetToggleHdl( LINK( this, ErrorBarResources, SynchronizePosAndNeg ));
+
+    m_aMfPositive.SetModifyHdl( LINK( this, ErrorBarResources, PosValueChanged ));
+    m_aEdRangePositive.SetModifyHdl( LINK( this, ErrorBarResources, RangeChanged ));
+    m_aEdRangeNegative.SetModifyHdl( LINK( this, ErrorBarResources, RangeChanged ));
+
+    m_aRbPositive.SetClickHdl( LINK( this, ErrorBarResources, IndicatorChanged ));
+    m_aRbNegative.SetClickHdl( LINK( this, ErrorBarResources, IndicatorChanged ));
+    m_aRbBoth.SetClickHdl( LINK( this, ErrorBarResources, IndicatorChanged ));
+
+    m_aIbRangePositive.SetClickHdl( LINK( this, ErrorBarResources, ChooseRange ));
+    m_aIbRangeNegative.SetClickHdl( LINK( this, ErrorBarResources, ChooseRange ));
+    m_aIbRangePositive.SetQuickHelpText( String( SchResId( STR_TIP_SELECT_RANGE )));
+    m_aIbRangeNegative.SetQuickHelpText( String( SchResId( STR_TIP_SELECT_RANGE )));
 
+    FillValueSets();
     Reset( rInAttrs );
 }
 
@@ -120,85 +201,307 @@
     }
 }
 
+void ErrorBarResources::SetChartDocumentForRangeChoosing(
+    const uno::Reference< chart2::XChartDocument > & xChartDocument )
+{
+    if( xChartDocument.is())
+        m_bHasInternalDataProvider = xChartDocument->hasInternalDataProvider();
+    m_apRangeSelectionHelper.reset( new RangeSelectionHelper( xChartDocument ));
+
+    // has internal data provider => rename "cell range" to "from data"
+    OSL_ASSERT( m_apRangeSelectionHelper.get());
+    if( m_bHasInternalDataProvider )
+    {
+        m_aRbRange.SetText( String( SchResId( STR_CONTROLTEXT_ERROR_BARS_FROM_DATA )));
+    }
+
+    if( m_aRbRange.IsChecked())
+    {
+        isRangeFieldContentValid( m_aEdRangePositive );
+        isRangeFieldContentValid( m_aEdRangeNegative );
+    }
+}
+
 void ErrorBarResources::SetAxisMinorStepWidthForErrorBarDecimals( double fMinorStepWidth )
 {
-    USHORT nDecimalDigits = 1;
     if( fMinorStepWidth < 0 )
-        fMinorStepWidth *= -1.0;
-    if( !::rtl::math::approxEqual(fMinorStepWidth,0.0) )
+        fMinorStepWidth = -fMinorStepWidth;
+
+    sal_Int32 nExponent = static_cast< sal_Int32 >( ::rtl::math::approxFloor( log10( fMinorStepWidth )));
+    if( nExponent <= 0 )
+    {
+        // one digit precision more
+        m_nConstDecimalDigits = static_cast< sal_uInt16 >( (-nExponent) + 1 );
+        m_nConstSpinSize = 10;
+    }
+    else
     {
-        sal_Int32 nExponent = static_cast< sal_Int32 >( ::rtl::math::approxFloor( log10( fMinorStepWidth ) ) );
-        if(nExponent<0)
-            nDecimalDigits = static_cast< sal_uInt16 >( -nExponent );
+        m_nConstDecimalDigits = 0;
+        m_nConstSpinSize = static_cast< sal_Int64 >( pow( 10.0, nExponent ));
     }
-    m_aMtrFldConstPlus.SetDecimalDigits(nDecimalDigits);
-    m_aMtrFldConstMinus.SetDecimalDigits(nDecimalDigits);
 }
 
-IMPL_LINK( ErrorBarResources, RBtnClick, Button *, pBtn )
+void ErrorBarResources::UpdateControlStates()
 {
-	m_aMtrFldPercent.Enable (pBtn == &m_aRbtPercent);
-	m_aMtrFldBigError.Enable (pBtn == &m_aRbtBigError);
-	m_aMtrFldConstPlus.Enable (pBtn == &m_aRbtConst);
-	m_aMtrFldConstMinus.Enable (pBtn == &m_aRbtConst);
-    m_aFTConstPlus.Enable (pBtn == &m_aRbtConst);
-    m_aFTConstMinus.Enable (pBtn == &m_aRbtConst);
+    // function
+    bool bIsFunction = m_aRbFunction.IsChecked();
+    m_aLbFunction.Enable( bIsFunction );
+
+    // range buttons
+    bool bShowRange = ( m_aRbRange.IsChecked());
+    bool bCanChooseRange =
+        ( bShowRange &&
+          m_apRangeSelectionHelper.get() &&
+          m_apRangeSelectionHelper->hasRangeSelection());
+
+    m_aMfPositive.Show( ! bShowRange );
+    m_aMfNegative.Show( ! bShowRange );
+
+    // use range but without range chooser => hide controls
+    m_aEdRangePositive.Show( bShowRange && ! m_bHasInternalDataProvider );
+    m_aIbRangePositive.Show( bCanChooseRange );
+    m_aEdRangeNegative.Show( bShowRange && ! m_bHasInternalDataProvider );
+    m_aIbRangeNegative.Show( bCanChooseRange );
+
+    bool bShowPosNegAndSync = ! (bShowRange && m_bHasInternalDataProvider);
+    m_aFtPositive.Show( bShowPosNegAndSync );
+    m_aFtNegative.Show( bShowPosNegAndSync );
+    m_aCbSyncPosNeg.Show( bShowPosNegAndSync );
+    m_aFlParameters.Show( bShowPosNegAndSync );
+
+    // unit for metric fields
+    bool bIsErrorMargin(
+        ( m_aRbFunction.IsChecked()) &&
+        ( m_aLbFunction.GetSelectEntryPos() == CHART_LB_FUNCTION_ERROR_MARGIN ));
+    bool bIsPercentage( m_aRbPercent.IsChecked() || bIsErrorMargin );
+    String aCustomUnit;
+
+    if( bIsPercentage )
+    {
+        aCustomUnit = String( RTL_CONSTASCII_USTRINGPARAM( " %" ));
+        m_aMfPositive.SetDecimalDigits( 1 );
+        m_aMfPositive.SetSpinSize( 10 );
+        m_aMfNegative.SetDecimalDigits( 1 );
+        m_aMfNegative.SetSpinSize( 10 );
+    }
+    else
+    {
+        m_aMfPositive.SetDecimalDigits( m_nConstDecimalDigits );
+        m_aMfPositive.SetSpinSize( m_nConstSpinSize );
+        m_aMfNegative.SetDecimalDigits( m_nConstDecimalDigits );
+        m_aMfNegative.SetSpinSize( m_nConstSpinSize );
+    }
+    m_aMfPositive.SetCustomUnitText( aCustomUnit );
+    m_aMfNegative.SetCustomUnitText( aCustomUnit );
+
+    // positive and negative value fields
+    bool bPosEnabled = ( m_aRbPositive.IsChecked() || m_aRbBoth.IsChecked());
+    bool bNegEnabled = ( m_aRbNegative.IsChecked() || m_aRbBoth.IsChecked());
+    if( !( bPosEnabled || bNegEnabled ))
+    {
+        // all three controls are not checked -> ambiguous state
+        bPosEnabled = true;
+        bNegEnabled = true;
+    }
+
+    // functions with only one parameter
+    bool bOneParameterCategory =
+        bIsErrorMargin || m_aRbPercent.IsChecked();
+    if( bOneParameterCategory )
+    {
+        m_aCbSyncPosNeg.Check();
+    }
+
+    if( m_aCbSyncPosNeg.IsChecked())
+    {
+        bPosEnabled = true;
+        bNegEnabled = false;
+    }
+
+    // all functions except error margin take no arguments
+    if( m_aRbFunction.IsChecked() &&
+        ( m_aLbFunction.GetSelectEntryPos() != CHART_LB_FUNCTION_ERROR_MARGIN ))
+    {
+        bPosEnabled = false;
+        bNegEnabled = false;
+    }
+
+    // enable/disable pos/neg fields
+    m_aFtPositive.Enable( bPosEnabled );
+    m_aFtNegative.Enable( bNegEnabled );
+    if( bShowRange )
+    {
+        m_aEdRangePositive.Enable( bPosEnabled );
+        m_aIbRangePositive.Enable( bPosEnabled );
+        m_aEdRangeNegative.Enable( bNegEnabled );
+        m_aIbRangeNegative.Enable( bNegEnabled );
+    }
+    else
+    {
+        m_aMfPositive.Enable( bPosEnabled );
+        m_aMfNegative.Enable( bNegEnabled );
+    }
+
+    m_aCbSyncPosNeg.Enable(
+        !bOneParameterCategory &&
+        ( bPosEnabled || bNegEnabled ));
 
-    m_aIndicatorSet.Show (pBtn != &m_aRbtNone);
-//     m_aFLIndicate.Show (pBtn != &m_aRbtNone);
+    // mark invalid entries in the range fields
+    if( bShowRange && ! m_bHasInternalDataProvider )
+    {
+        isRangeFieldContentValid( m_aEdRangePositive );
+        isRangeFieldContentValid( m_aEdRangeNegative );
+    }
+}
 
-	if (pBtn == &m_aRbtPercent) m_eErrorKind = CHERROR_PERCENT;
-    else if (pBtn == &m_aRbtBigError) m_eErrorKind = CHERROR_BIGERROR;
-    else if (pBtn == &m_aRbtConst) m_eErrorKind = CHERROR_CONST;
-    else if (pBtn == &m_aRbtNone) m_eErrorKind = CHERROR_NONE;
-    else if (pBtn == &m_aRbtVariant) m_eErrorKind = CHERROR_VARIANT;
-    else if (pBtn == &m_aRbtSigma) m_eErrorKind = CHERROR_SIGMA;
+IMPL_LINK( ErrorBarResources, CategoryChosen, void *,  )
+{
+    m_bErrorKindUnique = true;
+    SvxChartKindError eOldError = m_eErrorKind;
 
-    if( pBtn != &m_aRbtNone )
+    if( m_aRbNone.IsChecked())
+        m_eErrorKind = CHERROR_NONE;
+    else if( m_aRbConst.IsChecked())
+        m_eErrorKind = CHERROR_CONST;
+    else if( m_aRbPercent.IsChecked())
+        m_eErrorKind = CHERROR_PERCENT;
+    else if( m_aRbRange.IsChecked())
+        m_eErrorKind = CHERROR_RANGE;
+    else if( m_aRbFunction.IsChecked())
     {
-        if( m_eIndicate == CHINDICATE_NONE )
+        if( m_aLbFunction.GetSelectEntryCount() == 1 )
         {
-            m_bIndicatorUnique = true;
-            m_eIndicate = CHINDICATE_BOTH;
-            m_aIndicatorSet.SelectItem(INDICATE_BOTH + 1);
+            switch( m_aLbFunction.GetSelectEntryPos())
+            {
+                case CHART_LB_FUNCTION_STD_ERROR:
+                    m_eErrorKind = CHERROR_STDERROR; break;
+                case CHART_LB_FUNCTION_STD_DEV:
+                    m_eErrorKind = CHERROR_SIGMA; break;
+                case CHART_LB_FUNCTION_VARIANCE:
+                    m_eErrorKind = CHERROR_VARIANT; break;
+                case CHART_LB_FUNCTION_ERROR_MARGIN:
+                    m_eErrorKind = CHERROR_BIGERROR; break;
+                default:
+                    m_bErrorKindUnique = false;
+            }
         }
+        else
+            m_bErrorKindUnique = false;
+    }
+    else
+    {
+        OSL_ENSURE( false, "Unknown category chosen" );
+        m_bErrorKindUnique = false;
     }
 
-    m_bErrorKindUnique = true;
+    // changed to range
+    if( m_eErrorKind == CHERROR_RANGE &&
+        eOldError != CHERROR_RANGE )
+    {
+        m_aCbSyncPosNeg.Check(
+            (m_aEdRangePositive.GetText().Len() > 0) &&
+            m_aEdRangePositive.GetText().Equals(
+                m_aEdRangeNegative.GetText()));
+    }
+    // changed from range
+    else if( m_eErrorKind != CHERROR_RANGE &&
+        eOldError == CHERROR_RANGE )
+    {
+        m_aCbSyncPosNeg.Check(
+            m_aMfPositive.GetValue() == m_aMfNegative.GetValue());
+    }
 
-	return 0;
+    UpdateControlStates();
+    return 0;
 }
 
-IMPL_LINK( ErrorBarResources, SelectIndicate, void *, EMPTYARG )
+IMPL_LINK( ErrorBarResources, SynchronizePosAndNeg, void *, EMPTYARG )
 {
-	StatIndicator eSelection = (StatIndicator) m_aIndicatorSet.GetSelectItemId();
+    UpdateControlStates();
+    PosValueChanged( 0 );
+    return 0;
+}
 
-	switch (eSelection - 1)
-	{
-// 		case INDICATE_NONE :
-// 			m_eIndicate = CHINDICATE_NONE;
-// 			break;
+IMPL_LINK( ErrorBarResources, PosValueChanged, void *, EMPTYARG )
+{
+    if( m_aCbSyncPosNeg.IsChecked())
+    {
+        if( m_aRbRange.IsChecked())
+        {
+            m_aEdRangeNegative.SetText( m_aEdRangePositive.GetText());
+            m_bRangeNegUnique = m_bRangePosUnique;
+        }
+        else
+            m_aMfNegative.SetValue( m_aMfPositive.GetValue());
+    }
 
-		case INDICATE_BOTH :
-			m_eIndicate = CHINDICATE_BOTH;
-			break;
+    return 0;
+}
 
-		case INDICATE_UP :
-			m_eIndicate = CHINDICATE_UP;
-			break;
+IMPL_LINK( ErrorBarResources, IndicatorChanged, void *, EMPTYARG )
+{
+    m_bIndicatorUnique = true;
+    if( m_aRbBoth.IsChecked())
+        m_eIndicate = CHINDICATE_BOTH;
+    else if( m_aRbPositive.IsChecked())
+        m_eIndicate = CHINDICATE_UP;
+    else if( m_aRbNegative.IsChecked())
+        m_eIndicate = CHINDICATE_DOWN;
+    else
+        m_bIndicatorUnique = false;
 
-		case INDICATE_DOWN :
-			m_eIndicate = CHINDICATE_DOWN;
-			break;
-	}
+    UpdateControlStates();
+    return 0;
+}
 
-	m_aIndicatorSet.SelectItem( static_cast< sal_uInt16 >(eSelection));
-	m_aIndicatorSet.Show();
-//     m_aFLIndicate.Show();
+IMPL_LINK( ErrorBarResources, ChooseRange, RangeSelectionButton *, pButton )
+{
+    OSL_ASSERT( m_apRangeSelectionHelper.get());
+    if( ! m_apRangeSelectionHelper.get())
+        return 0;
+    OSL_ASSERT( m_pCurrentRangeChoosingField == 0 );
 
-    m_bIndicatorUnique = true;
+    ::rtl::OUString aUIString;
+    if( pButton == &m_aIbRangePositive )
+    {
+        m_pCurrentRangeChoosingField = &m_aEdRangePositive;
+        aUIString = ::rtl::OUString( String( SchResId( STR_DATA_SELECT_RANGE_FOR_POSITIVE_ERRORBARS )));
+    }
+    else
+    {
+        m_pCurrentRangeChoosingField = &m_aEdRangeNegative;
+        aUIString = ::rtl::OUString( String( SchResId( STR_DATA_SELECT_RANGE_FOR_NEGATIVE_ERRORBARS )));
+    }
 
-	return 0;
+    OSL_ASSERT( m_pParentDialog );
+    if( m_pParentDialog )
+    {
+        lcl_enableRangeChoosing( true, m_pParentDialog );
+        m_apRangeSelectionHelper->chooseRange(
+            m_pCurrentRangeChoosingField->GetText(),
+            aUIString, *this );
+    }
+    else
+        m_pCurrentRangeChoosingField = 0;
+
+    return 0;
+}
+
+IMPL_LINK( ErrorBarResources, RangeChanged, Edit *, pEdit )
+{
+    if( pEdit == & m_aEdRangePositive )
+    {
+        m_bRangePosUnique = true;
+        PosValueChanged( 0 );
+    }
+    else
+    {
+        m_bRangeNegUnique = true;
+    }
+
+    isRangeFieldContentValid( *pEdit );
+
+    return 0;
 }
 
 void ErrorBarResources::Reset(const SfxItemSet& rInAttrs)
@@ -206,6 +509,7 @@
 	const SfxPoolItem *pPoolItem = NULL;
     SfxItemState aState = SFX_ITEM_UNKNOWN;
 
+    // category
  	m_eErrorKind = CHERROR_NONE;
     aState = rInAttrs.GetItemState( SCHATTR_STAT_KIND_ERROR, TRUE, &pPoolItem );
     m_bErrorKindUnique = ( aState != SFX_ITEM_DONTCARE );
@@ -213,38 +517,49 @@
     if( aState == SFX_ITEM_SET )
         m_eErrorKind = ((const SvxChartKindErrorItem*) pPoolItem)->GetValue();
 
+    m_aLbFunction.SelectEntryPos( lcl_getLbEntryPosByErrorKind( m_eErrorKind ));
+
     if( m_bErrorKindUnique )
     {
-        m_aRbtNone.Check    ( m_eErrorKind == CHERROR_NONE );
-        m_aRbtVariant.Check ( m_eErrorKind == CHERROR_VARIANT );
-        m_aRbtSigma.Check   ( m_eErrorKind == CHERROR_SIGMA );
-        m_aRbtPercent.Check ( m_eErrorKind == CHERROR_PERCENT );
-        m_aRbtBigError.Check( m_eErrorKind == CHERROR_BIGERROR );
-        m_aRbtConst.Check   ( m_eErrorKind == CHERROR_CONST );
+        switch( m_eErrorKind )
+        {
+            case CHERROR_NONE:
+                m_aRbNone.Check();
+                break;
+            case CHERROR_PERCENT:
+                m_aRbPercent.Check();
+                break;
+            case CHERROR_CONST:
+                m_aRbConst.Check();
+                break;
+            case CHERROR_STDERROR:
+            case CHERROR_VARIANT:
+            case CHERROR_SIGMA:
+            case CHERROR_BIGERROR:
+                m_aRbFunction.Check();
+                break;
+            case CHERROR_RANGE:
+                m_aRbRange.Check();
+                break;
+        }
     }
     else
     {
-        m_aRbtNone.Check    ( FALSE );
-        m_aRbtVariant.Check ( FALSE );
-        m_aRbtSigma.Check   ( FALSE );
-        m_aRbtPercent.Check ( FALSE );
-        m_aRbtBigError.Check( FALSE );
-        m_aRbtConst.Check   ( FALSE );
+        m_aRbNone.Check( FALSE );
+        m_aRbConst.Check( FALSE );
+        m_aRbPercent.Check( FALSE );
+        m_aRbFunction.Check( FALSE );
     }
 
-    m_aIndicatorSet.Show(m_eErrorKind != CHERROR_NONE);
-//     m_aFLIndicate.Show(m_eErrorKind != CHERROR_NONE);
-
-    //-----
-
+    // parameters
     aState = rInAttrs.GetItemState( SCHATTR_STAT_CONSTPLUS, TRUE, &pPoolItem );
     m_bPlusUnique = ( aState != SFX_ITEM_DONTCARE );
     double fPlusValue = 0.0;
     if( aState == SFX_ITEM_SET )
     {
         fPlusValue = ((const SvxDoubleItem*) pPoolItem)->GetValue();
-        sal_Int32 nPlusValue = static_cast< sal_Int32 >( fPlusValue * pow(10.0,m_aMtrFldConstPlus.GetDecimalDigits()) );
-		m_aMtrFldConstPlus.SetValue( nPlusValue );
+        sal_Int32 nPlusValue = static_cast< sal_Int32 >( fPlusValue * pow(10.0,m_aMfPositive.GetDecimalDigits()) );
+		m_aMfPositive.SetValue( nPlusValue );
     }
 
     aState = rInAttrs.GetItemState( SCHATTR_STAT_CONSTMINUS, TRUE, &pPoolItem );
@@ -253,26 +568,15 @@
     if( aState == SFX_ITEM_SET )
     {
         fMinusValue = ((const SvxDoubleItem*) pPoolItem)->GetValue();
-        sal_Int32 nMinusValue = static_cast< sal_Int32 >( fMinusValue * pow(10.0,m_aMtrFldConstMinus.GetDecimalDigits()) );
-		m_aMtrFldConstMinus.SetValue( nMinusValue );
-    }
+        sal_Int32 nMinusValue = static_cast< sal_Int32 >( fMinusValue * pow(10.0,m_aMfNegative.GetDecimalDigits()) );
+		m_aMfNegative.SetValue( nMinusValue );
 
-    if( m_bPlusUnique && m_bMinusUnique )
-    {
-        sal_Int32 nAvg = static_cast< sal_Int32 >( ((fPlusValue + fMinusValue)/ 2.0) * pow(10.0,m_aMtrFldPercent.GetDecimalDigits()) );
-        m_aMtrFldBigError.SetDecimalDigits( m_aMtrFldPercent.GetDecimalDigits() );
-        m_aMtrFldPercent.SetValue(  nAvg );
-        m_aMtrFldBigError.SetValue( nAvg );
+        if( m_eErrorKind != CHERROR_RANGE &&
+            fPlusValue == fMinusValue )
+            m_aCbSyncPosNeg.Check();
     }
 
-    m_aMtrFldPercent.Enable (m_eErrorKind == CHERROR_PERCENT);
-    m_aMtrFldBigError.Enable (m_eErrorKind == CHERROR_BIGERROR);
-    m_aMtrFldConstPlus.Enable (m_eErrorKind == CHERROR_CONST);
-    m_aMtrFldConstMinus.Enable (m_eErrorKind == CHERROR_CONST);
-    m_aFTConstPlus.Enable (m_eErrorKind == CHERROR_CONST);
-    m_aFTConstMinus.Enable (m_eErrorKind == CHERROR_CONST);
-
-
+    // indicator
     aState = rInAttrs.GetItemState( SCHATTR_STAT_INDICATE, TRUE, &pPoolItem );
     m_bIndicatorUnique = ( aState != SFX_ITEM_DONTCARE );
     if( aState == SFX_ITEM_SET)
@@ -283,22 +587,46 @@
         switch( m_eIndicate )
         {
             case CHINDICATE_NONE :
-                // no longer used
-                OSL_ENSURE( false, "CHINDICATE_NONE no longer supported" );
-                break;
+                // no longer used, use both as default
+                m_eIndicate = CHINDICATE_BOTH;
+                // fall-through intended to BOTH
             case CHINDICATE_BOTH :
-                m_aIndicatorSet.SelectItem(INDICATE_BOTH + 1);
-                break;
+                m_aRbBoth.Check(); break;
             case CHINDICATE_UP :
-                m_aIndicatorSet.SelectItem(INDICATE_UP + 1);
-                break;
+                m_aRbPositive.Check(); break;
             case CHINDICATE_DOWN :
-                m_aIndicatorSet.SelectItem(INDICATE_DOWN + 1);
-                break;
-        }                                                             \
+                m_aRbNegative.Check(); break;
+        }
     }
     else
-        m_aIndicatorSet.SetNoSelection();
+    {
+        m_aRbBoth.Check( FALSE );
+        m_aRbPositive.Check( FALSE );
+        m_aRbNegative.Check( FALSE );
+    }
+
+    // ranges
+    aState = rInAttrs.GetItemState( SCHATTR_STAT_RANGE_POS, TRUE, &pPoolItem );
+    m_bRangePosUnique = ( aState != SFX_ITEM_DONTCARE );
+    if( aState == SFX_ITEM_SET )
+    {
+        String sRangePositive = (static_cast< const SfxStringItem * >( pPoolItem ))->GetValue();
+        m_aEdRangePositive.SetText( sRangePositive );
+    }
+
+    aState = rInAttrs.GetItemState( SCHATTR_STAT_RANGE_NEG, TRUE, &pPoolItem );
+    m_bRangeNegUnique = ( aState != SFX_ITEM_DONTCARE );
+    if( aState == SFX_ITEM_SET )
+    {
+        String sRangeNegative = (static_cast< const SfxStringItem * >( pPoolItem ))->GetValue();
+        m_aEdRangeNegative.SetText( sRangeNegative );
+        if( m_eErrorKind == CHERROR_RANGE &&
+            sRangeNegative.Len() > 0 &&
+            sRangeNegative.Equals( m_aEdRangePositive.GetText()))
+            m_aCbSyncPosNeg.Check();
+    }
+
+    UpdateControlStates();
 }
 
 BOOL ErrorBarResources::FillItemSet(SfxItemSet& rOutAttrs) const
@@ -310,26 +638,47 @@
 
     if( m_bErrorKindUnique )
     {
-        switch( m_eErrorKind )
+        if( m_eErrorKind == CHERROR_RANGE )
         {
-            case CHERROR_PERCENT :
-                rOutAttrs.Put (SvxDoubleItem ((double) m_aMtrFldPercent.GetValue () / double(pow(10.0,m_aMtrFldPercent.GetDecimalDigits())), SCHATTR_STAT_PERCENT));
-                break;
-
-            case CHERROR_BIGERROR :
-                rOutAttrs.Put (SvxDoubleItem ((double) m_aMtrFldBigError.GetValue () / double(pow(10.0,m_aMtrFldBigError.GetDecimalDigits())), SCHATTR_STAT_BIGERROR));
-                break;
-
-            case CHERROR_CONST :
-                rOutAttrs.Put (SvxDoubleItem ((double) m_aMtrFldConstPlus.GetValue () / double(pow(10.0,m_aMtrFldConstPlus.GetDecimalDigits())), SCHATTR_STAT_CONSTPLUS));
-                rOutAttrs.Put (SvxDoubleItem ((double) m_aMtrFldConstMinus.GetValue () / double(pow(10.0,m_aMtrFldConstMinus.GetDecimalDigits())), SCHATTR_STAT_CONSTMINUS));
-                break;
+            String aPosRange;
+            String aNegRange;
+            if( m_bHasInternalDataProvider )
+            {
+                // the strings aPosRange/aNegRange have to be set to a non-empty
+                // arbitrary string to generate error-bar sequences
+                aPosRange.Assign( sal_Unicode('x'));
+                aNegRange = aPosRange;
+            }
+            else
+            {
+                aPosRange = m_aEdRangePositive.GetText();
+                if( m_aCbSyncPosNeg.IsChecked())
+                    aNegRange = aPosRange;
+                else
+                    aNegRange = m_aEdRangeNegative.GetText();
+            }
+
+            if( m_bRangePosUnique )
+                rOutAttrs.Put( SfxStringItem( SCHATTR_STAT_RANGE_POS, aPosRange ));
+            if( m_bRangeNegUnique )
+                rOutAttrs.Put( SfxStringItem( SCHATTR_STAT_RANGE_NEG, aNegRange ));
+        }
+        else if( m_eErrorKind == CHERROR_CONST ||
+                 m_eErrorKind == CHERROR_PERCENT ||
+                 m_eErrorKind == CHERROR_BIGERROR )
+        {
+            double fPosValue = static_cast< double >( m_aMfPositive.GetValue()) /
+                pow( 10.0, m_aMfPositive.GetDecimalDigits());
+            double fNegValue = 0.0;
+
+            if( m_aCbSyncPosNeg.IsChecked())
+                fNegValue = fPosValue;
+            else
+                fNegValue = static_cast< double >( m_aMfNegative.GetValue()) /
+                    pow( 10.0, m_aMfNegative.GetDecimalDigits());
 
-            case CHERROR_NONE:
-            case CHERROR_VARIANT:
-            case CHERROR_SIGMA:
-                // nothing
-                break;
+            rOutAttrs.Put( SvxDoubleItem( fPosValue, SCHATTR_STAT_CONSTPLUS ));
+            rOutAttrs.Put( SvxDoubleItem( fNegValue, SCHATTR_STAT_CONSTMINUS ));
         }
     }
 
@@ -338,52 +687,90 @@
 
 void ErrorBarResources::FillValueSets()
 {
-    bool bIsHighContrast = ( true && m_aRbtConst.GetDisplayBackground().GetColor().IsDark() );
+    bool bIsHighContrast = ( true && m_aRbConst.GetDisplayBackground().GetColor().IsDark() );
+
+    // do not scale images, show then centered
+//     m_aFiPositive.SetStyle( (m_aFiPositive.GetStyle() & (~WB_SCALE)) | WB_CENTER );
+//     m_aFiNegative.SetStyle( (m_aFiNegative.GetStyle() & (~WB_SCALE)) | WB_CENTER );
+//     m_aFiBoth.SetStyle( (m_aFiBoth.GetStyle() & (~WB_SCALE)) | WB_CENTER );
 
-    if( m_aIndicatorSet.GetItemCount() == 0 )
+    if( m_eErrorBarType == ERROR_BAR_Y )
     {
-        if( m_eErrorBarType == ERROR_BAR_Y )
-        {
-            m_aIndicatorSet.InsertItem( INDICATE_BOTH + 1, SELECT_BITMAP( BMP_INDICATE_BOTH_VERTI ),
-                                        String(SchResId(STR_INDICATE_BOTH)));
-            m_aIndicatorSet.InsertItem( INDICATE_DOWN + 1, SELECT_BITMAP( BMP_INDICATE_DOWN ),
-                                        String(SchResId(STR_INDICATE_DOWN)));
-            m_aIndicatorSet.InsertItem( INDICATE_UP + 1, SELECT_BITMAP( BMP_INDICATE_UP ),
-                                        String(SchResId(STR_INDICATE_UP)));
-        }
-        else if( m_eErrorBarType == ERROR_BAR_X )
-        {
-            m_aIndicatorSet.InsertItem( INDICATE_BOTH + 1, SELECT_BITMAP( BMP_INDICATE_BOTH_HORI ),
-                                        String(SchResId(STR_INDICATE_BOTH)));
-            m_aIndicatorSet.InsertItem( INDICATE_DOWN + 1, SELECT_BITMAP( BMP_INDICATE_LEFT ),
-                                        String(SchResId(STR_INDICATE_DOWN)));
-            m_aIndicatorSet.InsertItem( INDICATE_UP + 1, SELECT_BITMAP( BMP_INDICATE_RIGHT ),
-                                        String(SchResId(STR_INDICATE_UP)));
-        }
-        else
-        {
-            OSL_ENSURE( false,  "error bar type not handled" );
-        }
+        m_aFiNegative.SetImage( SELECT_IMAGE( BMP_INDICATE_DOWN ));
+        m_aFiPositive.SetImage( SELECT_IMAGE( BMP_INDICATE_UP ));
+        m_aFiBoth.SetImage( SELECT_IMAGE( BMP_INDICATE_BOTH_VERTI ));
+    }
+    else if( m_eErrorBarType == ERROR_BAR_X )
+    {
+        m_aFiNegative.SetImage( SELECT_IMAGE( BMP_INDICATE_LEFT ));
+        m_aFiPositive.SetImage( SELECT_IMAGE( BMP_INDICATE_RIGHT ));
+        m_aFiBoth.SetImage( SELECT_IMAGE( BMP_INDICATE_BOTH_HORI ));
+    }
+}
+
+void ErrorBarResources::listeningFinished(
+    const ::rtl::OUString & rNewRange )
+{
+    OSL_ASSERT( m_apRangeSelectionHelper.get());
+    if( ! m_apRangeSelectionHelper.get())
+        return;
+
+    // rNewRange becomes invalid after removing the listener
+    ::rtl::OUString aRange( rNewRange );
+
+//     m_rDialogModel.startControllerLockTimer();
+
+    // stop listening
+    m_apRangeSelectionHelper->stopRangeListening();
+
+    // change edit field
+    if( m_pParentWindow )
+    {
+        m_pParentWindow->ToTop();
+        m_pParentWindow->GrabFocus();
+    }
+
+    if( m_pCurrentRangeChoosingField )
+    {
+        m_pCurrentRangeChoosingField->SetText( String( aRange ));
+        m_pCurrentRangeChoosingField->GrabFocus();
+        PosValueChanged( 0 );
+    }
+
+    m_pCurrentRangeChoosingField = 0;
+
+    UpdateControlStates();
+    OSL_ASSERT( m_pParentDialog );
+    if( m_pParentDialog )
+        lcl_enableRangeChoosing( false, m_pParentDialog );
+}
+
+void ErrorBarResources::disposingRangeSelection()
+{
+    OSL_ASSERT( m_apRangeSelectionHelper.get());
+    if( m_apRangeSelectionHelper.get())
+        m_apRangeSelectionHelper->stopRangeListening( false );
+}
+
+bool ErrorBarResources::isRangeFieldContentValid( Edit & rEdit )
+{
+    ::rtl::OUString aRange( rEdit.GetText());
+    bool bIsValid = ( aRange.getLength() == 0 ) ||
+        ( m_apRangeSelectionHelper.get() &&
+          m_apRangeSelectionHelper->verifyCellRange( aRange ));
+
+    if( bIsValid || !rEdit.IsEnabled())
+    {
+        rEdit.SetControlForeground();
+        rEdit.SetControlBackground();
     }
     else
     {
-        if( m_eErrorBarType == ERROR_BAR_Y )
-        {
-            m_aIndicatorSet.SetItemImage( INDICATE_BOTH + 1, SELECT_BITMAP( BMP_INDICATE_BOTH_VERTI ));
-            m_aIndicatorSet.SetItemImage( INDICATE_DOWN + 1, SELECT_BITMAP( BMP_INDICATE_DOWN ));
-            m_aIndicatorSet.SetItemImage( INDICATE_UP + 1, SELECT_BITMAP( BMP_INDICATE_UP ));
-        }
-        else if( m_eErrorBarType == ERROR_BAR_X )
-        {
-            m_aIndicatorSet.SetItemImage( INDICATE_BOTH + 1, SELECT_BITMAP( BMP_INDICATE_BOTH_HORI ));
-            m_aIndicatorSet.SetItemImage( INDICATE_DOWN + 1, SELECT_BITMAP( BMP_INDICATE_LEFT ));
-            m_aIndicatorSet.SetItemImage( INDICATE_UP + 1, SELECT_BITMAP( BMP_INDICATE_RIGHT ));
-        }
-        else
-        {
-            OSL_ENSURE( false,  "error bar type not handled" );
-        }
+        rEdit.SetControlBackground( RANGE_SELECTION_INVALID_RANGE_BACKGROUND_COLOR );
+        rEdit.SetControlForeground( RANGE_SELECTION_INVALID_RANGE_FOREGROUND_COLOR );
     }
+
+    return bIsValid;
 }
 
 //.............................................................................
--- chart2/source/controller/dialogs/res_ErrorBar_IDs.hrc	2008-02-18 16:46:22.000000000 +0100
+++ chart2/source/controller/dialogs/res_ErrorBar_IDs.hrc	2008-02-21 16:59:26.000000000 +0100
@@ -34,18 +34,38 @@
  ************************************************************************/
 
 #define FL_ERROR 1
-#define RBT_NONE 1
-#define RBT_VARIANT 2
-#define RBT_SIGMA 3
-#define RBT_PERCENT 4
-#define RBT_BIGERROR 5
-#define RBT_CONST 6
-#define RBT_RANGE 7
-#define MTR_FLD_PERCENT 1
-#define MTR_FLD_BIGERROR 2
-#define MTR_FLD_PLUS 3
-#define MTR_FLD_MINUS 4
-#define FT_PERCENT_PLUS 1
-#define FT_PERCENT_MINUS 2
-#define FL_INDICATE 3
-#define CT_INDICATE 1
+#define FL_INDICATE 2
+#define FL_PARAMETERS 3
+
+#define FT_POSITIVE 1
+#define FT_NEGATIVE 2
+
+#define RB_NONE 1
+#define RB_CONST 2
+#define RB_PERCENT 3
+#define RB_FUNCTION 4
+#define RB_BOTH 5
+#define RB_POSITIVE 6
+#define RB_NEGATIVE 7
+#define RB_RANGE 8
+
+#define ED_RANGE_POSITIVE 1
+#define ED_RANGE_NEGATIVE 2
+
+#define FI_BOTH 1
+#define FI_POSITIVE 2
+#define FI_NEGATIVE 3
+#define IB_RANGE_POSITIVE 4
+#define IB_RANGE_NEGATIVE 5
+
+#define LB_FUNCTION 1
+
+#define MF_POSITIVE 1
+#define MF_NEGATIVE 2
+
+#define CB_SYN_POS_NEG 1
+
+#define CHART_LB_FUNCTION_STD_ERROR     0
+#define CHART_LB_FUNCTION_STD_DEV       1
+#define CHART_LB_FUNCTION_VARIANCE      2
+#define CHART_LB_FUNCTION_ERROR_MARGIN  3
--- chart2/source/controller/dialogs/res_ErrorBar_tmpl.hrc	2008-02-18 16:46:33.000000000 +0100
+++ chart2/source/controller/dialogs/res_ErrorBar_tmpl.hrc	2008-02-26 11:58:17.000000000 +0100
@@ -37,168 +37,185 @@
 
 #include "res_ErrorBar_IDs.hrc"
 
-#define RESOURCE_ERRORBARS(availablewidth) \
+#define RESOURCE_ERRORBARS(availablewidth, yoffset) \
 FixedLine FL_ERROR \
 { \
-	Pos = MAP_APPFONT ( 6 , 6  ) ; \
-	Size = MAP_APPFONT ( 140 , 8 ) ; \
-	Text [ en-US ] = "Error category" ; \
+    Pos = MAP_APPFONT ( 6 , 6  ) ; \
+    Size = MAP_APPFONT ( 116 , 8 ) ; \
+    Text [ en-US ] = "Error Category" ; \
 }; \
-RadioButton RBT_NONE \
+RadioButton RB_NONE \
 { \
     HelpID = HID_SCH_STATISTIK_NO_ERROR; \
-	Pos = MAP_APPFONT ( 12 , 20  ) ; \
-	Size = MAP_APPFONT ( 75 , 10 ) ; \
-	Text [ en-US ] = "~No function" ; \
-	TabStop = TRUE ; \
-}; \
-RadioButton RBT_VARIANT \
-{ \
-    HelpID = HID_SCH_STATISTIK_VARIANT; \
-	Pos = MAP_APPFONT ( 12 , 36  ) ; \
-	Size = MAP_APPFONT ( 75 , 10 ) ; \
-	Text [ en-US ] = "~Variance" ; \
-	TabStop = TRUE ; \
-}; \
-RadioButton RBT_SIGMA \
-{ \
-    HelpID = HID_SCH_STATISTIK_SIGMA; \
-	Pos = MAP_APPFONT ( 12 , 52  ) ; \
-	Size = MAP_APPFONT ( 75 , 10 ) ; \
-	Text [ en-US ] = "~Standard deviation" ; \
-	TabStop = TRUE ; \
+    Pos = MAP_APPFONT ( 12 , 20  ) ; \
+    Size = MAP_APPFONT ( 110 , 10 ) ; \
+    Text [ en-US ] = "~None" ; \
+    TabStop = TRUE ; \
 }; \
-RadioButton RBT_PERCENT \
+RadioButton RB_CONST \
 { \
-    HelpID = HID_SCH_STATISTIK_PERCENT; \
-	Pos = MAP_APPFONT ( 12 , 68  ) ; \
-	Size = MAP_APPFONT ( 75 , 10 ) ; \
-	Text [ en-US ] = "~Percentage" ; \
-	TabStop = TRUE ; \
-}; \
-RadioButton RBT_BIGERROR \
-{ \
-    HelpID = HID_SCH_STATISTIK_BIGERROR; \
-	Pos = MAP_APPFONT ( 12 , 84  ) ; \
-	Size = MAP_APPFONT ( 75 , 10 ) ; \
-	Text [ en-US ] = "~Error margin" ; \
-	TabStop = TRUE ; \
+    HelpID = HID_SCH_STATISTIK_CONSTERROR; \
+    Pos = MAP_APPFONT ( 12 , 20 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 110 , 10 ) ; \
+    Text [ en-US ] = "~Constant Value" ; \
+    TabStop = TRUE ; \
 }; \
-RadioButton RBT_CONST \
+RadioButton RB_PERCENT \
 { \
-    HelpID = HID_SCH_STATISTIK_CONSTERROR; \
-	Pos = MAP_APPFONT ( 12 , 100  ) ; \
-	Size = MAP_APPFONT ( 75 , 10 ) ; \
-	Text [ en-US ] = "~Constant value" ; \
-	TabStop = TRUE ; \
-}; \
-MetricField MTR_FLD_PERCENT \
-{ \
-    HelpID = HID_SCH_STATISTIK_PERCENT_VALUE; \
-	Border = TRUE ; \
-	Pos = MAP_APPFONT ( 100 , 67  ) ; \
-	Size = MAP_APPFONT ( 40 , 12 ) ; \
-	TabStop = TRUE ; \
-	Repeat = TRUE ; \
-	Spin = TRUE ; \
-	Minimum = 0 ; \
-	Maximum = 10000 ; \
-	StrictFormat = TRUE ; \
-	Unit = FUNIT_CUSTOM ; \
-	CustomUnitText = " %" ; \
-	First = 100 ; \
-	Last = 10000 ; \
-	SpinSize = 100 ; \
-	DecimalDigits = 2 ; \
-}; \
-MetricField MTR_FLD_BIGERROR \
-{ \
-    HelpID = HID_SCH_STATISTIK_BIGERROR_VALUE; \
-	Border = TRUE ; \
-	Pos = MAP_APPFONT ( 100 , 83  ) ; \
-	Size = MAP_APPFONT ( 40 , 12 ) ; \
-	TabStop = TRUE ; \
-	Repeat = TRUE ; \
-	Spin = TRUE ; \
-	Minimum = 0 ; \
-	Maximum = 10000 ; \
-	StrictFormat = TRUE ; \
-	Unit = FUNIT_CUSTOM ; \
-	CustomUnitText  = " %" ; \
-	First = 100 ; \
-	Last = 10000 ; \
-	SpinSize = 100 ; \
-	DecimalDigits = 2 ; \
-}; \
-FixedText FT_PERCENT_PLUS \
-{ \
-	Pos = MAP_APPFONT ( 92 , 101  ) ; \
-	Size = MAP_APPFONT ( 8 , 8 ) ; \
-	Text [ en-US ] = "+" ; \
-}; \
-MetricField MTR_FLD_PLUS \
-{ \
-    HelpID = HID_SCH_STATISTIK_PLUS_VALUE; \
-	Border = TRUE ; \
-	Pos = MAP_APPFONT ( 100 , 99  ) ; \
-	Size = MAP_APPFONT ( 40 , 12 ) ; \
-	TabStop = TRUE ; \
-	Repeat = TRUE ; \
-	Spin = TRUE ; \
+    HelpID = HID_SCH_STATISTIK_PERCENT; \
+    Pos = MAP_APPFONT ( 12 , 34 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 110 , 10 ) ; \
+    Text [ en-US ] = "~Percentage" ; \
+    TabStop = TRUE ; \
+}; \
+RadioButton RB_FUNCTION \
+{ \
+    Pos = MAP_APPFONT ( 12 , 48 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 12 , 10 ) ; \
+    Text [ en-US ] = "" ; \
+    TabStop = TRUE ; \
+}; \
+RadioButton RB_RANGE \
+{ \
+    Pos = MAP_APPFONT( 12, 62 + yoffset ) ; \
+    Size = MAP_APPFONT( 110, 10 ) ; \
+    Text [ en-US ] = "Cell ~Range" ; \
+    TabStop = TRUE ; \
+}; \
+ListBox LB_FUNCTION \
+{ \
+    Pos = MAP_APPFONT ( 22 , 46 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 94 , 59 ) ; \
+    DropDown = TRUE; \
+    Border = TRUE; \
+    StringList [ en-US ] = \
+		{ \
+			< "Standard Error" ; CHART_LB_FUNCTION_STD_ERROR ; >; \
+			< "Standard Deviation" ; CHART_LB_FUNCTION_STD_DEV ; >; \
+			< "Variance" ; CHART_LB_FUNCTION_VARIANCE ; >; \
+			< "Error Margin" ; CHART_LB_FUNCTION_ERROR_MARGIN ; >; \
+		}; \
+}; \
+FixedLine FL_PARAMETERS \
+{ \
+    Pos = MAP_APPFONT ( 6 , 82 + yoffset  ) ; \
+    Size = MAP_APPFONT ( availablewidth - 12, 8 ) ; \
+    Text [ en-US ] = "Parameters" ; \
+}; \
+FixedText FT_POSITIVE \
+{ \
+    Pos = MAP_APPFONT ( 12 , 94 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 46 , 8 ) ; \
+    Text [ en-US ] = "P~ositive (+)"; \
+}; \
+MetricField MF_POSITIVE \
+{ \
+    Border = TRUE ; \
+    Pos = MAP_APPFONT ( 60 , 92 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 56 , 12 ) ; \
+    TabStop = TRUE ; \
+    Repeat = TRUE ; \
+    Spin = TRUE ; \
 	Minimum = 0 ; \
-	Maximum = 100000000 ; \
-	StrictFormat = TRUE ; \
-	Unit = FUNIT_CUSTOM ; \
-	First = 0 ; \
-	Last = 100000000 ; \
-	SpinSize = 1 ; \
-	DecimalDigits = 3 ; \
-}; \
-FixedText FT_PERCENT_MINUS \
-{ \
-    Pos = MAP_APPFONT ( 92 , 117  ) ; \
-	Size = MAP_APPFONT ( 8 , 8 ) ; \
-	Text [ en-US ] = "-"; \
-}; \
-MetricField MTR_FLD_MINUS \
-{ \
-    HelpID = HID_SCH_STATISTIK_MINUS_VALUE; \
-	Border = TRUE ; \
-	Pos = MAP_APPFONT ( 100 , 115  ) ; \
-	Size = MAP_APPFONT ( 40 , 12 ) ; \
-	TabStop = TRUE ; \
-	Repeat = TRUE ; \
-	Spin = TRUE ; \
+    StrictFormat = TRUE ; \
+    Unit = FUNIT_CUSTOM ; \
+    SpinSize = 100 ; \
+    DecimalDigits = 2 ; \
+}; \
+Edit ED_RANGE_POSITIVE \
+{ \
+    Border = TRUE ; \
+    Hide = TRUE; \
+    Pos = MAP_APPFONT ( 60 , 92 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 90 , 12 ) ; \
+}; \
+ImageButton IB_RANGE_POSITIVE \
+{ \
+    Hide = TRUE; \
+    Pos = MAP_APPFONT ( 152 , 91 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 14 , 14 ) ; \
+    TabStop = TRUE ; \
+}; \
+FixedText FT_NEGATIVE \
+{ \
+    Pos = MAP_APPFONT ( 12 , 110 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 46 , 8 ) ; \
+    Text [ en-US ] = "~Negative (-)"; \
+}; \
+MetricField MF_NEGATIVE \
+{ \
+    Border = TRUE ; \
+    Pos = MAP_APPFONT ( 60 , 108 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 56 , 12 ) ; \
+    TabStop = TRUE ; \
+    Repeat = TRUE ; \
+    Spin = TRUE ; \
 	Minimum = 0 ; \
-	Maximum = 100000000 ; \
-	StrictFormat = TRUE ; \
-	Unit = FUNIT_CUSTOM ; \
-	First = 0 ; \
-	Last = 100000000 ; \
-	SpinSize = 1 ; \
-	DecimalDigits = 3 ; \
+    StrictFormat = TRUE ; \
+    Unit = FUNIT_CUSTOM ; \
+    SpinSize = 100 ; \
+    DecimalDigits = 2 ; \
+}; \
+Edit ED_RANGE_NEGATIVE \
+{ \
+    Border = TRUE ; \
+    Hide = TRUE; \
+    Pos = MAP_APPFONT ( 60 , 108 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 90 , 12 ) ; \
+}; \
+ImageButton IB_RANGE_NEGATIVE \
+{ \
+    Hide = TRUE; \
+    Pos = MAP_APPFONT ( 152 , 107 + yoffset  ) ; \
+    Size = MAP_APPFONT ( 14 , 14 ) ; \
+    TabStop = TRUE ; \
+}; \
+CheckBox CB_SYN_POS_NEG \
+{ \
+    HelpId = HID_SCH_TRENDLINE_SHOW_EQUATION; \
+    Pos = MAP_APPFONT ( 12 , 126 + yoffset  ); \
+    Size = MAP_APPFONT ( 80 , 10 ); \
+    TabStop = TRUE; \
+    Text[ en-US ] = "Same value for both"; \
 }; \
 FixedLine FL_INDICATE \
 { \
-	Pos = MAP_APPFONT ( 150 , 6  ) ; \
-	Size = MAP_APPFONT ( availablewidth - 150 , 8 ) ; \
-	Text [ en-US ] = "Error ~indicator" ; \
-}; \
-Control CT_INDICATE \
-{ \
-    HelpId = HID_SCH_CT_INDICATE ; \
-	Border = TRUE ; \
-	Pos = MAP_APPFONT ( 150 , 20  ) ; \
-	Size = MAP_APPFONT ( 76 , 36 ) ; \
-	TabStop = TRUE ; \
+    Pos = MAP_APPFONT ( 130 , 6  ) ; \
+    Size = MAP_APPFONT ( availablewidth - 136 , 8 ) ; \
+    Text [ en-US ] = "Error Indicator" ; \
+}; \
+RadioButton RB_BOTH \
+{ \
+    Pos = MAP_APPFONT ( 154 , 22  ); \
+    Size = MAP_APPFONT ( 90 , 10 ); \
+    Text[ en-US ] = "Positive ~and Negative"; \
+}; \
+RadioButton RB_POSITIVE \
+{ \
+    Pos = MAP_APPFONT ( 154 , 43  ); \
+    Size = MAP_APPFONT ( 90 , 10 ); \
+    Text[ en-US ] = "Pos~itive"; \
+}; \
+RadioButton RB_NEGATIVE \
+{ \
+    Pos = MAP_APPFONT ( 154 , 64  ); \
+    Size = MAP_APPFONT ( 90 , 10 ); \
+    Text[ en-US ] = "Ne~gative"; \
+}; \
+FixedImage FI_BOTH \
+{ \
+    Pos = MAP_APPFONT ( 134 , 18  ); \
+    Size = MAP_APPFONT ( 18 , 18 ); \
+}; \
+FixedImage FI_POSITIVE \
+{ \
+    Pos = MAP_APPFONT ( 134 , 39  ); \
+    Size = MAP_APPFONT ( 18 , 18 ); \
+}; \
+FixedImage FI_NEGATIVE \
+{ \
+    Pos = MAP_APPFONT ( 134 , 60  ); \
+    Size = MAP_APPFONT ( 18 , 18 ); \
 };
 
-// RadioButton RBT_RANGE \
-// { \
-// 	Pos = MAP_APPFONT ( 12 , 116  ) ; \
-// 	Size = MAP_APPFONT ( 75 , 10 ) ; \
-// 	Text [ en-US ] = "~Range" ; \
-// 	TabStop = TRUE ; \
-// }; \
-
 #endif
--- chart2/source/controller/dialogs/res_Trendline.cxx	2008-02-18 16:48:09.000000000 +0100
+++ chart2/source/controller/dialogs/res_Trendline.cxx	2008-02-21 16:59:26.000000000 +0100
@@ -50,18 +50,10 @@
 
 // macro for selecting a normal or high contrast bitmap the stack variable
 // bIsHighContrast must exist and reflect the correct state
-#define SELECT_BITMAP(name) Bitmap( SchResId( bIsHighContrast ? name ## _HC : name ))
+#define SELECT_IMAGE(name) Image( SchResId( bIsHighContrast ? name ## _HC : name ))
 
 namespace
 {
-void lcl_InterpolateFixedBitmap( FixedBitmap & rBitmap )
-{
-    Bitmap aBmp( rBitmap.GetBitmap() );
-    Size aSize = rBitmap.GetSizePixel();
-    aBmp.Scale( aSize, BMP_SCALE_INTERPOLATE );
-    rBitmap.SetBitmap( aBmp );
-}
-
 template< class T >
     long lcl_getRightEdge( T & rControl )
 {
@@ -107,11 +99,11 @@
         m_aRBExponential( pParent, SchResId( RB_EXPONENTIAL )),
         m_aRBPower( pParent, SchResId( RB_POWER )),
 
-        m_aFBNone( pParent, SchResId( FB_NONE )),
-        m_aFBLinear( pParent, SchResId( FB_LINEAR )),
-        m_aFBLogarithmic( pParent, SchResId( FB_LOGARITHMIC )),
-        m_aFBExponential( pParent, SchResId( FB_EXPONENTIAL )),
-        m_aFBPower( pParent, SchResId( FB_POWER )),
+        m_aFINone( pParent, SchResId( FI_NONE )),
+        m_aFILinear( pParent, SchResId( FI_LINEAR )),
+        m_aFILogarithmic( pParent, SchResId( FI_LOGARITHMIC )),
+        m_aFIExponential( pParent, SchResId( FI_EXPONENTIAL )),
+        m_aFIPower( pParent, SchResId( FI_POWER )),
 
         m_aFLEquation( pParent, SchResId( FL_EQUATION )),
         m_aCBShowEquation( pParent, SchResId( CB_SHOW_EQUATION )),
@@ -122,16 +114,8 @@
 {
     FillValueSets();
 
-    lcl_InterpolateFixedBitmap( m_aFBLinear );
-    lcl_InterpolateFixedBitmap( m_aFBLogarithmic );
-    lcl_InterpolateFixedBitmap( m_aFBExponential );
-    lcl_InterpolateFixedBitmap( m_aFBPower );
-
     if( m_bNoneAvailable )
-    {
         m_aRBNone.SetClickHdl( LINK(this, TrendlineResources, SelectTrendLine ));
-        lcl_InterpolateFixedBitmap( m_aFBNone );
-    }
     else
         m_aRBNone.Hide();
 
@@ -211,7 +195,7 @@
 	const SfxPoolItem *pPoolItem = NULL;
     SfxItemState aState = SFX_ITEM_UNKNOWN;
 
-	aState = rInAttrs.GetItemState( SCHATTR_STAT_REGRESSTYPE, TRUE, &pPoolItem );
+	aState = rInAttrs.GetItemState( SCHATTR_REGRESSION_TYPE, TRUE, &pPoolItem );
     m_bTrendLineUnique = ( aState != SFX_ITEM_DONTCARE );
     if( aState == SFX_ITEM_SET )
     {
@@ -273,7 +257,7 @@
 BOOL TrendlineResources::FillItemSet(SfxItemSet& rOutAttrs) const
 {
     if( m_bTrendLineUnique )
-        rOutAttrs.Put( SvxChartRegressItem( m_eTrendLineType, SCHATTR_STAT_REGRESSTYPE ));
+        rOutAttrs.Put( SvxChartRegressItem( m_eTrendLineType, SCHATTR_REGRESSION_TYPE ));
     if( m_aCBShowEquation.GetState() != STATE_DONTKNOW )
         rOutAttrs.Put( SfxBoolItem( SCHATTR_REGRESSION_SHOW_EQUATION, m_aCBShowEquation.IsChecked() ));
     if( m_aCBShowCorrelationCoeff.GetState() != STATE_DONTKNOW )
@@ -286,11 +270,11 @@
     bool bIsHighContrast = ( true && m_aFLType.GetDisplayBackground().GetColor().IsDark() );
 
     if( m_bNoneAvailable )
-        m_aFBNone.SetBitmap( SELECT_BITMAP( BMP_REGRESSION_NONE ));
-    m_aFBLinear.SetBitmap( SELECT_BITMAP( BMP_REGRESSION_LINEAR ));
-    m_aFBLogarithmic.SetBitmap( SELECT_BITMAP( BMP_REGRESSION_LOG ));
-    m_aFBExponential.SetBitmap( SELECT_BITMAP( BMP_REGRESSION_EXP ));
-    m_aFBPower.SetBitmap( SELECT_BITMAP( BMP_REGRESSION_POWER ));
+        m_aFINone.SetImage( SELECT_IMAGE( BMP_REGRESSION_NONE ));
+    m_aFILinear.SetImage( SELECT_IMAGE( BMP_REGRESSION_LINEAR ));
+    m_aFILogarithmic.SetImage( SELECT_IMAGE( BMP_REGRESSION_LOG ));
+    m_aFIExponential.SetImage( SELECT_IMAGE( BMP_REGRESSION_EXP ));
+    m_aFIPower.SetImage( SELECT_IMAGE( BMP_REGRESSION_POWER ));
 }
 
 void TrendlineResources::UpdateControlStates()
--- chart2/source/controller/dialogs/res_Trendline.hxx	2008-02-18 16:48:19.000000000 +0100
+++ chart2/source/controller/dialogs/res_Trendline.hxx	2008-02-21 16:59:26.000000000 +0100
@@ -66,11 +66,11 @@
     RadioButton m_aRBExponential;
     RadioButton m_aRBPower;
 
-    FixedBitmap m_aFBNone;
-    FixedBitmap m_aFBLinear;
-    FixedBitmap m_aFBLogarithmic;
-    FixedBitmap m_aFBExponential;
-    FixedBitmap m_aFBPower;
+    FixedImage  m_aFINone;
+    FixedImage  m_aFILinear;
+    FixedImage  m_aFILogarithmic;
+    FixedImage  m_aFIExponential;
+    FixedImage  m_aFIPower;
 
     FixedLine m_aFLEquation;
     CheckBox m_aCBShowEquation;
--- chart2/source/controller/dialogs/res_Trendline_IDs.hrc	2008-02-18 16:48:31.000000000 +0100
+++ chart2/source/controller/dialogs/res_Trendline_IDs.hrc	2008-02-21 16:59:26.000000000 +0100
@@ -36,11 +36,11 @@
 #define FL_TYPE 1
 #define FL_EQUATION 2
 
-#define FB_NONE 1
-#define FB_LINEAR 2
-#define FB_LOGARITHMIC 3
-#define FB_EXPONENTIAL 4
-#define FB_POWER 5
+#define FI_NONE 1
+#define FI_LINEAR 2
+#define FI_LOGARITHMIC 3
+#define FI_EXPONENTIAL 4
+#define FI_POWER 5
 
 #define RB_NONE 1
 #define RB_LINEAR 2
--- chart2/source/controller/dialogs/res_Trendline_tmpl.hrc	2008-02-18 16:48:43.000000000 +0100
+++ chart2/source/controller/dialogs/res_Trendline_tmpl.hrc	2008-02-21 16:59:26.000000000 +0100
@@ -80,50 +80,30 @@
     Size = MAP_APPFONT( 100, 10 ); \
     Text[ en-US ] = "~Power"; \
 }; \
-FixedBitmap FB_NONE \
+FixedImage FI_NONE \
 { \
-    OutputSize = TRUE ; \
-    Scale = TRUE; \
-    Border = FALSE; \
     Pos = MAP_APPFONT( 10, 18 ); \
-    Size = MAP_APPFONT( 16, 17 ); \
-    Fixed = Bitmap { File = "regno.png" ; }; \
+    Size = MAP_APPFONT( 18, 18 ); \
 }; \
-FixedBitmap FB_LINEAR \
+FixedImage FI_LINEAR \
 { \
-    OutputSize = TRUE ; \
-    Scale = TRUE; \
-    Border = FALSE; \
     Pos = MAP_APPFONT( 10, 18 + yoffset ); \
-    Size = MAP_APPFONT( 16, 17 ); \
-    Fixed = Bitmap { File = "reglin.png" ; }; \
+    Size = MAP_APPFONT( 18, 18 ); \
 }; \
-FixedBitmap FB_LOGARITHMIC \
+FixedImage FI_LOGARITHMIC \
 { \
-    OutputSize = TRUE ; \
-    Scale = TRUE; \
-    Border = FALSE; \
     Pos = MAP_APPFONT( 10, 40 + yoffset ); \
-    Size = MAP_APPFONT( 16, 17 ); \
-    Fixed = Bitmap { File = "reglog.png" ; }; \
+    Size = MAP_APPFONT( 18, 18 ); \
 }; \
-FixedBitmap FB_EXPONENTIAL \
+FixedImage FI_EXPONENTIAL \
 { \
-    OutputSize = TRUE ; \
-    Scale = TRUE; \
-    Border = FALSE; \
     Pos = MAP_APPFONT( 10, 62 + yoffset ); \
-    Size = MAP_APPFONT( 16, 17 ); \
-    Fixed = Bitmap { File = "regexp.png" ; }; \
+    Size = MAP_APPFONT( 18, 18 ); \
 }; \
-FixedBitmap FB_POWER \
+FixedImage FI_POWER \
 { \
-    OutputSize = TRUE ; \
-    Scale = TRUE; \
-    Border = FALSE; \
     Pos = MAP_APPFONT( 10, 84 + yoffset ); \
-    Size = MAP_APPFONT( 16, 17 ); \
-    Fixed = Bitmap { File = "regpow.png" ; }; \
+    Size = MAP_APPFONT( 18, 18 ); \
 }; \
 FixedLine FL_EQUATION \
 { \
--- chart2/source/controller/dialogs/Strings.src	2008-02-18 16:41:31.000000000 +0100
+++ chart2/source/controller/dialogs/Strings.src	2008-02-21 16:59:25.000000000 +0100
@@ -469,11 +469,27 @@
 {
 	Text [ en-US ] = "X-Error-Bars" ;
 };
+String STR_DATA_ROLE_X_ERROR_POSITIVE
+{
+	Text [ en-US ] = "Positive X-Error-Bars" ;
+};
+String STR_DATA_ROLE_X_ERROR_NEGATIVE
+{
+	Text [ en-US ] = "Negative X-Error-Bars" ;
+};
 
 String STR_DATA_ROLE_Y_ERROR
 {
 	Text [ en-US ] = "Y-Error-Bars" ;
 };
+String STR_DATA_ROLE_Y_ERROR_POSITIVE
+{
+	Text [ en-US ] = "Positive Y-Error-Bars" ;
+};
+String STR_DATA_ROLE_Y_ERROR_NEGATIVE
+{
+	Text [ en-US ] = "Negative Y-Error-Bars" ;
+};
 
 String STR_DATA_ROLE_FIRST
 {
@@ -512,7 +528,7 @@
 
 String STR_DATA_SELECT_RANGE_FOR_SERIES
 {
-	Text [ en-US ] = "Choose range for %VALUETYPE of %SERIESNAME" ;
+	Text [ en-US ] = "Select Range for %VALUETYPE of %SERIESNAME" ;
 };
 
 String STR_DATA_SELECT_RANGE_FOR_CATEGORIES
@@ -524,6 +540,14 @@
 {
 	Text [ en-US ] = "Select Range for data labels" ;
 };
+String STR_DATA_SELECT_RANGE_FOR_POSITIVE_ERRORBARS
+{
+    Text [ en-US ] = "Select Range for Positive Error Bars" ;
+};
+String STR_DATA_SELECT_RANGE_FOR_NEGATIVE_ERRORBARS
+{
+    Text [ en-US ] = "Select Range for Negative Error Bars" ;
+};
 
 String STR_DATA_EDITOR_INCORRECT_INPUT
 {
--- chart2/source/controller/dialogs/Strings_Statistic.src	2008-02-18 16:42:01.000000000 +0100
+++ chart2/source/controller/dialogs/Strings_Statistic.src	2008-02-26 11:58:17.000000000 +0100
@@ -48,6 +48,12 @@
 	Text [ en-US ] = "Positive" ;
 };
 
+// used for own data in error bar dialog
+String STR_CONTROLTEXT_ERROR_BARS_FROM_DATA
+{
+    Text [ en-US ] = "From Data Table" ;
+};
+
 //------------------------------------------------------------------------
 //------------------------------------------------------------------------
 
--- chart2/source/controller/dialogs/tp_ErrorBars.cxx	2008-02-18 16:49:09.000000000 +0100
+++ chart2/source/controller/dialogs/tp_ErrorBars.cxx	2008-02-21 16:59:26.000000000 +0100
@@ -39,6 +39,9 @@
 #include "tp_ErrorBars.hxx"
 #include "ResId.hxx"
 #include "TabPages.hrc"
+#include "TabPageNotifiable.hxx"
+
+using namespace ::com::sun::star;
 
 //.............................................................................
 namespace chart
@@ -47,7 +50,11 @@
 
 ErrorBarsTabPage::ErrorBarsTabPage( Window* pParent, const SfxItemSet& rInAttrs ) :
         SfxTabPage( pParent, SchResId( TP_YERRORBAR ), rInAttrs ),
-        m_aErrorBarResources( this, rInAttrs )
+        m_aErrorBarResources(
+            this,
+            // the parent is the tab control, of which the parent is the dialog
+            dynamic_cast< Dialog * >( pParent->GetParent() ),
+            rInAttrs, /* bNoneAvailable = */ false )
 {
     FreeResource();
 }
@@ -90,6 +97,12 @@
     m_aErrorBarResources.SetErrorBarType( eNewType );
 }
 
+void ErrorBarsTabPage::SetChartDocumentForRangeChoosing(
+    const uno::Reference< chart2::XChartDocument > & xChartDocument )
+{
+    m_aErrorBarResources.SetChartDocumentForRangeChoosing( xChartDocument );
+}
+
 //.............................................................................
 } //namespace chart
 //.............................................................................
--- chart2/source/controller/dialogs/tp_ErrorBars.hxx	2008-02-18 16:49:29.000000000 +0100
+++ chart2/source/controller/dialogs/tp_ErrorBars.hxx	2008-02-21 16:59:26.000000000 +0100
@@ -52,6 +52,9 @@
 
     void SetAxisMinorStepWidthForErrorBarDecimals( double fMinorStepWidth );
     void SetErrorBarType( ErrorBarResources::tErrorBarType eNewType );
+    void SetChartDocumentForRangeChoosing(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::XChartDocument > & xChartDocument );
 
     static SfxTabPage* Create( Window* pParent, const SfxItemSet& rInAttrs );
     virtual BOOL FillItemSet( SfxItemSet& rOutAttrs );
--- chart2/source/controller/dialogs/tp_ErrorBars.src	2008-02-18 16:49:40.000000000 +0100
+++ chart2/source/controller/dialogs/tp_ErrorBars.src	2008-02-21 16:59:26.000000000 +0100
@@ -42,5 +42,5 @@
 // 	HelpID = HID_SCH_STAT ;
 	SVLook = TRUE ;
 	Size = MAP_APPFONT ( 260 , 185 ) ;
-	RESOURCE_ERRORBARS( 260 - 12 )
+	RESOURCE_ERRORBARS( 260 - 12, 0 )
 };
--- chart2/source/controller/inc/dlg_InsertErrorBars.hxx	2008-02-18 16:54:31.000000000 +0100
+++ chart2/source/controller/inc/dlg_InsertErrorBars.hxx	2008-02-21 16:59:26.000000000 +0100
@@ -52,6 +52,8 @@
 {
 public:
     InsertErrorBarsDialog( Window* pParent, const SfxItemSet& rMyAttrs,
+                           const ::com::sun::star::uno::Reference<
+                               ::com::sun::star::chart2::XChartDocument > & xChartDocument,
                            ErrorBarResources::tErrorBarType eType = ErrorBarResources::ERROR_BAR_Y );
     virtual ~InsertErrorBarsDialog();
 
--- chart2/source/controller/inc/dlg_ObjectProperties.hxx	2008-02-18 16:55:10.000000000 +0100
+++ chart2/source/controller/inc/dlg_ObjectProperties.hxx	2008-02-21 16:59:26.000000000 +0100
@@ -77,6 +77,9 @@
     bool HasNumberProperties() const;
     bool ProvidesStartingAngle() const;
 
+    ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartDocument >
+        getDocument() const;
+
 private:
 	rtl::OUString	m_aObjectCID;
 	ObjectType		m_eObjectType;
@@ -96,6 +99,8 @@
 	bool m_bCanAxisLabelsBeStaggered;
     bool m_bHasNumberProperties;
     bool m_bProvidesStartingAngle;
+
+    ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartDocument > m_xChartDocument;
 };
 
 /*************************************************************************
--- chart2/source/controller/inc/ErrorBarItemConverter.hxx	1970-01-01 01:00:00.000000000 +0100
+++ chart2/source/controller/inc/ErrorBarItemConverter.hxx	2008-02-21 23:12:04.000000000 +0100
@@ -0,0 +1,92 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: ErrorBarItemConverter.hxx,v $
+ *
+ *  $Revision: 1.1.2.1 $
+ *
+ *  last change: $Author: bm $ $Date: 2008/02/21 22:12:04 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef CHART_STATISTICSITEMCONVERTER_HXX
+#define CHART_STATISTICSITEMCONVERTER_HXX
+
+#include "ItemConverter.hxx"
+#include "GraphicPropertyItemConverter.hxx"
+#include "chartview/NumberFormatterWrapper.hxx"
+
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+
+#include <vector>
+#include <boost/shared_ptr.hpp>
+
+class SdrModel;
+
+namespace chart
+{
+namespace wrapper
+{
+
+class ErrorBarItemConverter :
+        public ::comphelper::ItemConverter
+{
+public:
+    ErrorBarItemConverter(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::frame::XModel > & xChartModel,
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::beans::XPropertySet > & rPropertySet,
+        SfxItemPool& rItemPool,
+        SdrModel& rDrawModel,
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::lang::XMultiServiceFactory > & xNamedPropertyContainerFactory );
+    virtual ~ErrorBarItemConverter();
+
+    virtual void FillItemSet( SfxItemSet & rOutItemSet ) const;
+    virtual bool ApplyItemSet( const SfxItemSet & rItemSet );
+
+protected:
+    virtual const USHORT * GetWhichPairs() const;
+    virtual bool GetItemProperty( tWhichIdType nWhichId, tPropertyNameWithMemberId & rOutProperty ) const;
+
+    virtual void FillSpecialItem( USHORT nWhichId, SfxItemSet & rOutItemSet ) const
+        throw( ::com::sun::star::uno::Exception );
+    virtual bool ApplySpecialItem( USHORT nWhichId, const SfxItemSet & rItemSet )
+        throw( ::com::sun::star::uno::Exception );
+
+private:
+    ::boost::shared_ptr< ItemConverter >  m_spGraphicConverter;
+    ::com::sun::star::uno::Reference<
+            ::com::sun::star::frame::XModel >  m_xModel;
+};
+
+} //  namespace wrapper
+} //  namespace chart
+
+// CHART_STATISTICSITEMCONVERTER_HXX
+#endif
--- chart2/source/controller/inc/RangeEdit.hxx	1970-01-01 01:00:00.000000000 +0100
+++ chart2/source/controller/inc/RangeEdit.hxx	2008-02-21 17:00:39.000000000 +0100
@@ -0,0 +1,64 @@
+/*************************************************************************
+*
+*  OpenOffice.org - a multi-platform office productivity suite
+*
+*  $RCSfile: RangeEdit.hxx,v $
+*
+*  $Revision: 1.1.2.1 $
+*
+*  last change: $Author: bm $ $Date: 2008/02/21 16:00:39 $
+*
+*  The Contents of this file are made available subject to
+*  the terms of GNU Lesser General Public License Version 2.1.
+*
+*
+*    GNU Lesser General Public License Version 2.1
+*    =============================================
+*    Copyright 2005 by Sun Microsystems, Inc.
+*    901 San Antonio Road, Palo Alto, CA 94303, USA
+*
+*    This library is free software; you can redistribute it and/or
+*    modify it under the terms of the GNU Lesser General Public
+*    License version 2.1, as published by the Free Software Foundation.
+*
+*    This library is distributed in the hope that it will be useful,
+*    but WITHOUT ANY WARRANTY; without even the implied warranty of
+*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+*    Lesser General Public License for more details.
+*
+*    You should have received a copy of the GNU Lesser General Public
+*    License along with this library; if not, write to the Free Software
+*    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+*    MA  02111-1307  USA
+*
+************************************************************************/
+#ifndef CHART2RANGEEDIT_HXX
+#define CHART2RANGEEDIT_HXX
+
+#include <vcl/edit.hxx>
+#include <vcl/accel.hxx>
+#include <tools/link.hxx>
+
+//.............................................................................
+namespace chart
+{
+//.............................................................................
+
+class RangeEdit : public Edit
+{
+public:
+    explicit            RangeEdit( Window* pParent, const ResId& rResId);
+    virtual             ~RangeEdit();
+
+    // KeyInput method
+    void                SetKeyInputHdl( const Link& rKeyInputLink );
+    virtual void        KeyInput( const KeyEvent& rKEvt );
+
+private:
+    Link                m_aKeyInputLink;
+};
+
+//.............................................................................
+} //namespace chart
+//.............................................................................
+#endif
--- chart2/source/controller/inc/RangeSelectionHelper.hxx	1970-01-01 01:00:00.000000000 +0100
+++ chart2/source/controller/inc/RangeSelectionHelper.hxx	2008-02-21 17:00:48.000000000 +0100
@@ -0,0 +1,98 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: RangeSelectionHelper.hxx,v $
+ *
+ *  $Revision: 1.1.2.1 $
+ *
+ *  last change: $Author: bm $ $Date: 2008/02/21 16:00:48 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef CHART2_RANGESELECTIONHELPER_HXX
+#define CHART2_RANGESELECTIONHELPER_HXX
+
+#include <com/sun/star/chart2/XChartDocument.hpp>
+#include <com/sun/star/beans/PropertyValue.hpp>
+
+namespace com { namespace sun { namespace star {
+    namespace sheet{
+        class XRangeSelection;
+        class XRangeSelectionListener;
+        class XCellRangesAccess;
+    }
+}}}
+
+namespace chart
+{
+
+class RangeSelectionListenerParent;
+
+class RangeSelectionHelper
+{
+public:
+	explicit RangeSelectionHelper(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::XChartDocument > & xChartDocument );
+    ~RangeSelectionHelper();
+
+    bool hasRangeSelection();
+    ::com::sun::star::uno::Reference<
+            ::com::sun::star::sheet::XRangeSelection > getRangeSelection();
+    ::com::sun::star::uno::Reference<
+            ::com::sun::star::sheet::XCellRangesAccess > getCellRangesAccess();
+    void raiseRangeSelectionDocument();
+    bool chooseRange(
+        const ::rtl::OUString & aCurrentRange,
+        const ::rtl::OUString & aUIString,
+        RangeSelectionListenerParent & rListenerParent );
+    void stopRangeListening( bool bRemoveListener = true );
+    bool verifyCellRange( const ::rtl::OUString & rRangeStr );
+    bool verifyArguments( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& rArguments );
+    ::rtl::OUString getCellRangeContent( const ::rtl::OUString & rRangeStr );
+
+private:
+    ::com::sun::star::uno::Reference<
+            ::com::sun::star::sheet::XRangeSelection >
+        m_xRangeSelection;
+
+    ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::XChartDocument >
+        m_xChartDocument;
+
+    ::com::sun::star::uno::Reference<
+            ::com::sun::star::sheet::XCellRangesAccess >
+        m_xCellRangesAccess;
+
+    ::com::sun::star::uno::Reference<
+            ::com::sun::star::sheet::XRangeSelectionListener >
+        m_xRangeSelectionListener;
+};
+
+} //  namespace chart
+
+// CHART2_RANGESELECTIONHELPER_HXX
+#endif
--- chart2/source/controller/inc/RangeSelectionListener.hxx	1970-01-01 01:00:00.000000000 +0100
+++ chart2/source/controller/inc/RangeSelectionListener.hxx	2008-02-21 17:01:01.000000000 +0100
@@ -0,0 +1,95 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: RangeSelectionListener.hxx,v $
+ *
+ *  $Revision: 1.1.4.2 $
+ *
+ *  last change: $Author: bm $ $Date: 2008/02/21 16:01:01 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef CHART2_RANGESELECTIONLISTENER_HXX
+#define CHART2_RANGESELECTIONLISTENER_HXX
+
+#include "ControllerLockGuard.hxx"
+
+#ifndef _CPPUHELPER_IMPLBASE1_HXX_
+#include <cppuhelper/implbase1.hxx>
+#endif
+
+#ifndef _COM_SUN_STAR_FRAME_XMODEL_HPP_
+#include <com/sun/star/frame/XModel.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SHEET_XRANGESELECTIONLISTENER_HPP_
+#include <com/sun/star/sheet/XRangeSelectionListener.hpp>
+#endif
+
+namespace chart
+{
+
+class RangeSelectionListenerParent
+{
+public:
+    virtual void listeningFinished( const ::rtl::OUString & rNewRange ) = 0;
+    virtual void disposingRangeSelection() = 0;
+};
+
+// ----------------------------------------
+
+class RangeSelectionListener : public
+    ::cppu::WeakImplHelper1<
+        ::com::sun::star::sheet::XRangeSelectionListener >
+{
+public:
+	explicit RangeSelectionListener(
+        RangeSelectionListenerParent & rParent,
+        const ::rtl::OUString & rInitialRange,
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::frame::XModel >& xModelToLockController );
+	virtual ~RangeSelectionListener();
+
+protected:
+    // ____ XRangeSelectionListener ____
+    virtual void SAL_CALL done( const ::com::sun::star::sheet::RangeSelectionEvent& aEvent )
+        throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL aborted( const ::com::sun::star::sheet::RangeSelectionEvent& aEvent )
+        throw (::com::sun::star::uno::RuntimeException);
+
+    // ____ XEventListener ____
+    virtual void SAL_CALL disposing( const ::com::sun::star::lang::EventObject& Source )
+        throw (::com::sun::star::uno::RuntimeException);
+
+private:
+    RangeSelectionListenerParent & m_rParent;
+    ::rtl::OUString m_aRange;
+    ControllerLockGuard m_aControllerLockGuard;
+};
+
+} //  namespace chart
+
+// CHART2_RANGESELECTIONLISTENER_HXX
+#endif
--- chart2/source/controller/inc/res_ErrorBar.hxx	2008-02-18 16:55:20.000000000 +0100
+++ chart2/source/controller/inc/res_ErrorBar.hxx	2008-02-29 23:15:35.000000000 +0100
@@ -38,17 +38,29 @@
 #include <vcl/button.hxx>
 #include <vcl/fixed.hxx>
 #include <vcl/field.hxx>
+#include <vcl/lstbox.hxx>
 #include <svtools/valueset.hxx>
 #include <svtools/itemset.hxx>
 #include <svx/chrtitem.hxx>
 #include "chartview/ChartSfxItemIds.hxx"
+#include "RangeSelectionButton.hxx"
+#include "RangeSelectionListener.hxx"
+#include "RangeEdit.hxx"
+
+#include <com/sun/star/chart2/XChartDocument.hpp>
+
+#include <memory>
+
+class Dialog;
 
 //.............................................................................
 namespace chart
 {
 //.............................................................................
 
-class ErrorBarResources
+class RangeSelectionHelper;
+
+class ErrorBarResources : public RangeSelectionListenerParent
 {
 public:
     enum tErrorBarType
@@ -57,48 +69,90 @@
         ERROR_BAR_Y
     };
 
-    ErrorBarResources( Window* pParent, const SfxItemSet& rInAttrst, tErrorBarType eType = ERROR_BAR_Y );
+    ErrorBarResources(
+        Window* pParent, Dialog * pParentDialog, const SfxItemSet& rInAttrst,
+        bool bNoneAvailable,
+        tErrorBarType eType = ERROR_BAR_Y );
     virtual ~ErrorBarResources();
 
     void SetAxisMinorStepWidthForErrorBarDecimals( double fMinorStepWidth );
     void SetErrorBarType( tErrorBarType eNewType );
-
+    void SetChartDocumentForRangeChoosing(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::XChartDocument > & xChartDocument );
     void Reset(const SfxItemSet& rInAttrs);
     BOOL FillItemSet(SfxItemSet& rOutAttrs) const;
 
     void FillValueSets();
 
-private:
-    FixedLine       m_aFlErrorCategory;
-    RadioButton     m_aRbtNone;
-    RadioButton     m_aRbtVariant;
-    RadioButton     m_aRbtSigma;
-    RadioButton     m_aRbtPercent;
-    RadioButton     m_aRbtBigError;
-    RadioButton     m_aRbtConst;
-//     RadioButton     m_aRbtRange;
-    MetricField     m_aMtrFldPercent;
-    MetricField     m_aMtrFldBigError;
-    FixedText       m_aFTConstPlus;
-    MetricField     m_aMtrFldConstPlus;
-    FixedText       m_aFTConstMinus;
-    MetricField     m_aMtrFldConstMinus;
-    FixedLine       m_aFLIndicate;
-    ValueSet        m_aIndicatorSet;
-
-    SvxChartKindError   m_eErrorKind;
-    SvxChartIndicate    m_eIndicate;
-    SvxChartRegress     m_eTrendLineType;
-
-    bool                m_bErrorKindUnique;
-    bool                m_bIndicatorUnique;
-    bool                m_bPlusUnique;
-    bool                m_bMinusUnique;
+    // ____ RangeSelectionListenerParent ____
+    virtual void listeningFinished( const ::rtl::OUString & rNewRange );
+    virtual void disposingRangeSelection();
 
-    tErrorBarType       m_eErrorBarType;
+private:
+    // category
+    FixedLine            m_aFlErrorCategory;
+    RadioButton          m_aRbNone;
+    RadioButton          m_aRbConst;
+    RadioButton          m_aRbPercent;
+    RadioButton          m_aRbFunction;
+    RadioButton          m_aRbRange;
+    ListBox              m_aLbFunction;
+
+    // parameters
+    FixedLine            m_aFlParameters;
+    FixedText            m_aFtPositive;
+    MetricField          m_aMfPositive;
+    RangeEdit            m_aEdRangePositive;
+    RangeSelectionButton m_aIbRangePositive;
+    FixedText            m_aFtNegative;
+    MetricField          m_aMfNegative;
+    RangeEdit            m_aEdRangeNegative;
+    RangeSelectionButton m_aIbRangeNegative;
+    CheckBox             m_aCbSyncPosNeg;
+
+    // indicator
+    FixedLine            m_aFlIndicate;
+    RadioButton          m_aRbBoth;
+    RadioButton          m_aRbPositive;
+    RadioButton          m_aRbNegative;
+    FixedImage           m_aFiBoth;
+    FixedImage           m_aFiPositive;
+    FixedImage           m_aFiNegative;
+
+    SvxChartKindError    m_eErrorKind;
+    SvxChartIndicate     m_eIndicate;
+    SvxChartRegress      m_eTrendLineType;
+
+    bool                 m_bErrorKindUnique;
+    bool                 m_bIndicatorUnique;
+    bool                 m_bPlusUnique;
+    bool                 m_bMinusUnique;
+    bool                 m_bRangePosUnique;
+    bool                 m_bRangeNegUnique;
+
+    bool                 m_bNoneAvailable;
+
+    tErrorBarType        m_eErrorBarType;
+    sal_uInt16           m_nConstDecimalDigits;
+    sal_Int64            m_nConstSpinSize;
+
+    Window *             m_pParentWindow;
+    Dialog *             m_pParentDialog;
+    ::std::auto_ptr< RangeSelectionHelper >
+                         m_apRangeSelectionHelper;
+    Edit *               m_pCurrentRangeChoosingField;
+    bool                 m_bHasInternalDataProvider;
+
+    DECL_LINK( CategoryChosen, void * );
+    DECL_LINK( SynchronizePosAndNeg, void * );
+    DECL_LINK( PosValueChanged, void * );
+    DECL_LINK( IndicatorChanged, void * );
+    DECL_LINK( ChooseRange, RangeSelectionButton * );
+    DECL_LINK( RangeChanged, Edit * );
 
-    DECL_LINK(RBtnClick, Button *);
-    DECL_LINK(SelectIndicate, void *);
+    void UpdateControlStates();
+    bool isRangeFieldContentValid( Edit & rEdit );
 };
 
 //.............................................................................
--- chart2/source/controller/itemsetwrapper/ErrorBarItemConverter.cxx	1970-01-01 01:00:00.000000000 +0100
+++ chart2/source/controller/itemsetwrapper/ErrorBarItemConverter.cxx	2008-02-24 23:49:55.000000000 +0100
@@ -0,0 +1,464 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: ErrorBarItemConverter.cxx,v $
+ *
+ *  $Revision: 1.1.2.2 $
+ *
+ *  last change: $Author: bm $ $Date: 2008/02/22 15:15:03 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+// MARKER(update_precomp.py): autogen include statement, do not remove
+#include "precompiled_chart2.hxx"
+#include "ErrorBarItemConverter.hxx"
+#include "SchWhichPairs.hxx"
+#include "macros.hxx"
+#include "ItemPropertyMap.hxx"
+#include "ErrorBar.hxx"
+#include "PropertyHelper.hxx"
+#include "ChartModelHelper.hxx"
+#include "ChartTypeHelper.hxx"
+#include "StatisticsHelper.hxx"
+
+#include "GraphicPropertyItemConverter.hxx"
+
+#include <svtools/stritem.hxx>
+#include <svx/chrtitem.hxx>
+#include <svtools/intitem.hxx>
+#include <rtl/math.hxx>
+
+#include <com/sun/star/chart2/DataPointLabel.hpp>
+#include <com/sun/star/chart2/XInternalDataProvider.hpp>
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
+#include <com/sun/star/lang/XServiceName.hpp>
+
+#include <functional>
+#include <algorithm>
+#include <vector>
+
+using namespace ::com::sun::star;
+
+namespace
+{
+
+void lcl_getErrorValues( const uno::Reference< beans::XPropertySet > & xErrorBarProp,
+                    double & rOutPosError, double & rOutNegError )
+{
+    if( ! xErrorBarProp.is())
+        return;
+
+    try
+    {
+        xErrorBarProp->getPropertyValue( C2U( "PositiveError" )) >>= rOutPosError;
+        xErrorBarProp->getPropertyValue( C2U( "NegativeError" )) >>= rOutNegError;
+    }
+    catch( uno::Exception & ex )
+    {
+        ASSERT_EXCEPTION( ex );
+    }
+}
+
+void lcl_getErrorIndicatorValues(
+    const uno::Reference< beans::XPropertySet > & xErrorBarProp,
+    bool & rOutShowPosError, bool & rOutShowNegError )
+{
+    if( ! xErrorBarProp.is())
+        return;
+
+    try
+    {
+        xErrorBarProp->getPropertyValue( C2U( "ShowPositiveError" )) >>= rOutShowPosError;
+        xErrorBarProp->getPropertyValue( C2U( "ShowNegativeError" )) >>= rOutShowNegError;
+    }
+    catch( uno::Exception & ex )
+    {
+        ASSERT_EXCEPTION( ex );
+    }
+}
+
+} // anonymous namespace
+
+namespace chart
+{
+namespace wrapper
+{
+
+ErrorBarItemConverter::ErrorBarItemConverter(
+    const uno::Reference< frame::XModel > & xModel,
+    const uno::Reference< beans::XPropertySet > & rPropertySet,
+    SfxItemPool& rItemPool,
+    SdrModel& rDrawModel,
+    const uno::Reference< lang::XMultiServiceFactory > & xNamedPropertyContainerFactory ) :
+        ItemConverter( rPropertySet, rItemPool ),
+        m_spGraphicConverter( new GraphicPropertyItemConverter(
+                                  rPropertySet, rItemPool, rDrawModel,
+                                  xNamedPropertyContainerFactory,
+                                  GraphicPropertyItemConverter::LINE_PROPERTIES )),
+        m_xModel( xModel )
+{}
+
+ErrorBarItemConverter::~ErrorBarItemConverter()
+{}
+
+void ErrorBarItemConverter::FillItemSet( SfxItemSet & rOutItemSet ) const
+{
+    m_spGraphicConverter->FillItemSet( rOutItemSet );
+
+    // own items
+    ItemConverter::FillItemSet( rOutItemSet );
+}
+
+bool ErrorBarItemConverter::ApplyItemSet( const SfxItemSet & rItemSet )
+{
+    bool bResult = m_spGraphicConverter->ApplyItemSet( rItemSet );
+
+    // own items
+    return ItemConverter::ApplyItemSet( rItemSet ) || bResult;
+}
+
+const USHORT * ErrorBarItemConverter::GetWhichPairs() const
+{
+    // must span all used items!
+    return nErrorBarWhichPairs;
+}
+
+bool ErrorBarItemConverter::GetItemProperty(
+    tWhichIdType /* nWhichId */,
+    tPropertyNameWithMemberId & /* rOutProperty */ ) const
+{
+    return false;
+}
+
+bool ErrorBarItemConverter::ApplySpecialItem(
+    USHORT nWhichId, const SfxItemSet & rItemSet )
+    throw( uno::Exception )
+{
+    bool bChanged = false;
+    uno::Any aValue;
+
+    switch( nWhichId )
+    {
+        // Attention !!! This case must be passed before SCHATTR_STAT_PERCENT,
+        // SCHATTR_STAT_BIGERROR, SCHATTR_STAT_CONSTPLUS,
+        // SCHATTR_STAT_CONSTMINUS and SCHATTR_STAT_INDICATE
+        case SCHATTR_STAT_KIND_ERROR:
+        {
+            uno::Reference< beans::XPropertySet > xErrorBarProp( GetPropertySet());
+
+            SvxChartKindError eErrorKind =
+                static_cast< const SvxChartKindErrorItem & >(
+                    rItemSet.Get( nWhichId )).GetValue();
+
+            if( !xErrorBarProp.is() && eErrorKind == CHERROR_NONE)
+            {
+                //nothing to do
+            }
+            else
+            {
+                sal_Int32 nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
+
+                switch( eErrorKind )
+                {
+                    case CHERROR_NONE:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE; break;
+                    case CHERROR_VARIANT:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::VARIANCE; break;
+                    case CHERROR_SIGMA:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::STANDARD_DEVIATION; break;
+                    case CHERROR_PERCENT:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::RELATIVE; break;
+                    case CHERROR_BIGERROR:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN; break;
+                    case CHERROR_CONST:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE; break;
+                    case CHERROR_STDERROR:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::STANDARD_ERROR; break;
+                    case CHERROR_RANGE:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::FROM_DATA; break;
+                }
+
+                xErrorBarProp->setPropertyValue( C2U( "ErrorBarStyle" ),
+                                                    uno::makeAny( nStyle ));
+                bChanged = true;
+            }
+        }
+        break;
+
+        case SCHATTR_STAT_PERCENT:
+        case SCHATTR_STAT_BIGERROR:
+        {
+            OSL_ENSURE( false, "Deprectaed item" );
+            uno::Reference< beans::XPropertySet > xErrorBarProp( GetPropertySet());
+
+            double fValue =
+                static_cast< const SvxDoubleItem & >(
+                    rItemSet.Get( nWhichId )).GetValue();
+            double fPos, fNeg;
+            lcl_getErrorValues( xErrorBarProp, fPos, fNeg );
+
+            if( ! ( ::rtl::math::approxEqual( fPos, fValue ) &&
+                    ::rtl::math::approxEqual( fNeg, fValue )))
+            {
+                xErrorBarProp->setPropertyValue( C2U( "PositiveError" ),
+                                                    uno::makeAny( fValue ));
+                xErrorBarProp->setPropertyValue( C2U( "NegativeError" ),
+                                                    uno::makeAny( fValue ));
+                bChanged = true;
+            }
+        }
+        break;
+
+        case SCHATTR_STAT_CONSTPLUS:
+        {
+            double fValue =
+                static_cast< const SvxDoubleItem & >(
+                    rItemSet.Get( nWhichId )).GetValue();
+            double fPos, fNeg;
+            lcl_getErrorValues( GetPropertySet(), fPos, fNeg );
+
+            if( ! ::rtl::math::approxEqual( fPos, fValue ))
+            {
+                GetPropertySet()->setPropertyValue( C2U( "PositiveError" ), uno::makeAny( fValue ));
+                bChanged = true;
+            }
+        }
+        break;
+
+        case SCHATTR_STAT_CONSTMINUS:
+        {
+            uno::Reference< beans::XPropertySet > xErrorBarProp( GetPropertySet());
+
+            double fValue =
+                static_cast< const SvxDoubleItem & >(
+                    rItemSet.Get( nWhichId )).GetValue();
+            double fPos, fNeg;
+            lcl_getErrorValues( xErrorBarProp, fPos, fNeg );
+
+            if( ! ::rtl::math::approxEqual( fNeg, fValue ))
+            {
+                xErrorBarProp->setPropertyValue( C2U( "NegativeError" ), uno::makeAny( fValue ));
+                bChanged = true;
+            }
+        }
+        break;
+
+        case SCHATTR_STAT_INDICATE:
+        {
+            uno::Reference< beans::XPropertySet > xErrorBarProp( GetPropertySet());
+
+            SvxChartIndicate eIndicate =
+                static_cast< const SvxChartIndicateItem & >(
+                    rItemSet.Get( nWhichId )).GetValue();
+
+            bool bNewIndPos = (eIndicate == CHINDICATE_BOTH || eIndicate == CHINDICATE_UP );
+            bool bNewIndNeg = (eIndicate == CHINDICATE_BOTH || eIndicate == CHINDICATE_DOWN );
+
+            bool bShowPos, bShowNeg;
+            lcl_getErrorIndicatorValues( xErrorBarProp, bShowPos, bShowNeg );
+
+            if( ( bShowPos != bNewIndPos ||
+                  bShowNeg != bNewIndNeg ))
+            {
+                xErrorBarProp->setPropertyValue( C2U( "ShowPositiveError" ), uno::makeAny( bNewIndPos ));
+                xErrorBarProp->setPropertyValue( C2U( "ShowNegativeError" ), uno::makeAny( bNewIndNeg ));
+                bChanged = true;
+            }
+        }
+        break;
+
+        case SCHATTR_STAT_RANGE_POS:
+        case SCHATTR_STAT_RANGE_NEG:
+        {
+            // @todo: also be able to deal with x-error bars
+            const bool bYError = true;
+            uno::Reference< chart2::data::XDataSource > xErrorBarSource( GetPropertySet(), uno::UNO_QUERY );
+            uno::Reference< chart2::XChartDocument > xChartDoc( m_xModel, uno::UNO_QUERY );
+            uno::Reference< chart2::data::XDataProvider > xDataProvider;
+
+            if( xChartDoc.is())
+                xDataProvider.set( xChartDoc->getDataProvider());
+            if( xErrorBarSource.is() && xDataProvider.is())
+            {
+                ::rtl::OUString aNewRange( static_cast< const SfxStringItem & >( rItemSet.Get( nWhichId )).GetValue());
+                bool bApplyNewRange = false;
+
+                bool bIsPositiveValue( nWhichId == SCHATTR_STAT_RANGE_POS );
+                if( xChartDoc->hasInternalDataProvider())
+                {
+                    if( aNewRange.getLength())
+                    {
+                        uno::Reference< chart2::data::XDataSequence > xSeq(
+                            StatisticsHelper::getErrorDataSequenceFromDataSource(
+                                xErrorBarSource, bIsPositiveValue, bYError ));
+                        if( ! xSeq.is())
+                        {
+                            // no data range for error bars yet => create
+                            uno::Reference< chart2::XInternalDataProvider > xIntDataProvider( xDataProvider, uno::UNO_QUERY );
+                            OSL_ASSERT( xIntDataProvider.is());
+                            if( xIntDataProvider.is())
+                            {
+                                xIntDataProvider->appendSequence();
+                                aNewRange = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("last"));
+                                bApplyNewRange = true;
+                            }
+                        }
+                    }
+                }
+                else
+                {
+                    uno::Reference< chart2::data::XDataSequence > xSeq(
+                        StatisticsHelper::getErrorDataSequenceFromDataSource(
+                            xErrorBarSource, bIsPositiveValue, bYError ));
+                    bApplyNewRange =
+                        ! ( xSeq.is() && aNewRange.equals( xSeq->getSourceRangeRepresentation()));
+                }
+
+                if( bApplyNewRange )
+                    StatisticsHelper::setErrorDataSequence(
+                        xErrorBarSource, xDataProvider, aNewRange, bIsPositiveValue, bYError );
+            }
+        }
+        break;
+    }
+
+    return bChanged;
+}
+
+void ErrorBarItemConverter::FillSpecialItem(
+    USHORT nWhichId, SfxItemSet & rOutItemSet ) const
+    throw( uno::Exception )
+{
+    switch( nWhichId )
+    {
+        case SCHATTR_STAT_KIND_ERROR:
+        {
+            SvxChartKindError eErrorKind = CHERROR_NONE;
+            uno::Reference< beans::XPropertySet > xErrorBarProp( GetPropertySet());
+
+            sal_Int32 nStyle;
+            if( xErrorBarProp->getPropertyValue( C2U( "ErrorBarStyle" )) >>= nStyle )
+            {
+                switch( nStyle )
+                {
+                    case ::com::sun::star::chart::ErrorBarStyle::NONE:
+                        break;
+                    case ::com::sun::star::chart::ErrorBarStyle::VARIANCE:
+                        eErrorKind = CHERROR_VARIANT; break;
+                    case ::com::sun::star::chart::ErrorBarStyle::STANDARD_DEVIATION:
+                        eErrorKind = CHERROR_SIGMA; break;
+                    case ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE:
+                        eErrorKind = CHERROR_CONST; break;
+                    case ::com::sun::star::chart::ErrorBarStyle::RELATIVE:
+                        eErrorKind = CHERROR_PERCENT; break;
+                    case ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN:
+                        eErrorKind = CHERROR_BIGERROR; break;
+                    case ::com::sun::star::chart::ErrorBarStyle::STANDARD_ERROR:
+                        eErrorKind = CHERROR_STDERROR; break;
+                    case ::com::sun::star::chart::ErrorBarStyle::FROM_DATA:
+                        eErrorKind = CHERROR_RANGE; break;
+                }
+            }
+            rOutItemSet.Put( SvxChartKindErrorItem( eErrorKind, SCHATTR_STAT_KIND_ERROR ));
+        }
+        break;
+
+        case SCHATTR_STAT_PERCENT:
+        {
+            double fPos, fNeg;
+            lcl_getErrorValues( GetPropertySet(), fPos, fNeg );
+            rOutItemSet.Put( SvxDoubleItem( ( fPos + fNeg ) / 2.0, nWhichId ));
+        }
+        break;
+
+        case SCHATTR_STAT_BIGERROR:
+        {
+            double fPos, fNeg;
+            lcl_getErrorValues( GetPropertySet(), fPos, fNeg );
+            rOutItemSet.Put( SvxDoubleItem( ( fPos + fNeg ) / 2.0, nWhichId ));
+        }
+        break;
+
+        case SCHATTR_STAT_CONSTPLUS:
+        {
+            double fPos, fNeg;
+            lcl_getErrorValues( GetPropertySet(), fPos, fNeg );
+            rOutItemSet.Put( SvxDoubleItem( fPos, nWhichId ));
+        }
+        break;
+
+        case SCHATTR_STAT_CONSTMINUS:
+        {
+            double fPos, fNeg;
+            lcl_getErrorValues( GetPropertySet(), fPos, fNeg );
+            rOutItemSet.Put( SvxDoubleItem( fNeg, nWhichId ));
+        }
+        break;
+
+        case SCHATTR_STAT_INDICATE:
+        {
+            SvxChartIndicate eIndicate = CHINDICATE_BOTH;
+            bool bShowPos, bShowNeg;
+            lcl_getErrorIndicatorValues( GetPropertySet(), bShowPos, bShowNeg );
+
+            if( bShowPos )
+            {
+                if( bShowNeg )
+                    eIndicate = CHINDICATE_BOTH;
+                else
+                    eIndicate = CHINDICATE_UP;
+            }
+            else
+            {
+                if( bShowNeg )
+                    eIndicate = CHINDICATE_DOWN;
+                else
+                    eIndicate = CHINDICATE_NONE;
+            }
+            rOutItemSet.Put( SvxChartIndicateItem( eIndicate, SCHATTR_STAT_INDICATE ));
+        }
+        break;
+
+        case SCHATTR_STAT_RANGE_POS:
+        case SCHATTR_STAT_RANGE_NEG:
+        {
+            uno::Reference< chart2::data::XDataSource > xErrorBarSource( GetPropertySet(), uno::UNO_QUERY );
+            if( xErrorBarSource.is())
+            {
+                uno::Reference< chart2::data::XDataSequence > xSeq(
+                    StatisticsHelper::getErrorDataSequenceFromDataSource(
+                        xErrorBarSource, (nWhichId == SCHATTR_STAT_RANGE_POS) /*, true */ /* y */ ));
+                if( xSeq.is())
+                    rOutItemSet.Put( SfxStringItem( nWhichId, String( xSeq->getSourceRangeRepresentation())));
+            }
+        }
+        break;
+   }
+}
+
+} //  namespace wrapper
+} //  namespace chart
--- chart2/source/controller/itemsetwrapper/makefile.mk	2007-11-23 12:53:13.000000000 +0100
+++ chart2/source/controller/itemsetwrapper/makefile.mk	2008-02-21 16:59:26.000000000 +0100
@@ -58,7 +58,8 @@
 				$(SLO)$/StatisticsItemConverter.obj \
 				$(SLO)$/TitleItemConverter.obj \
 				$(SLO)$/RegressionCurveItemConverter.obj \
-				$(SLO)$/RegressionEquationItemConverter.obj
+				$(SLO)$/RegressionEquationItemConverter.obj \
+				$(SLO)$/ErrorBarItemConverter.obj
 
 # --- Targets -----------------------------------------------------------------
 
--- chart2/source/controller/itemsetwrapper/RegressionCurveItemConverter.cxx	2008-02-18 16:56:00.000000000 +0100
+++ chart2/source/controller/itemsetwrapper/RegressionCurveItemConverter.cxx	2008-02-21 16:59:26.000000000 +0100
@@ -142,7 +142,7 @@
 
     switch( nWhichId )
     {
-        case SCHATTR_STAT_REGRESSTYPE:
+        case SCHATTR_REGRESSION_TYPE:
         {
             OSL_ASSERT( xCurve.is());
             if( xCurve.is())
@@ -232,14 +232,14 @@
 
     switch( nWhichId )
     {
-        case SCHATTR_STAT_REGRESSTYPE:
+        case SCHATTR_REGRESSION_TYPE:
         {
             OSL_ASSERT( xCurve.is());
             if( xCurve.is())
             {
                 SvxChartRegress eRegress = static_cast< SvxChartRegress >(
                     static_cast< sal_Int32 >( RegressionCurveHelper::getRegressionType( xCurve )));
-                rOutItemSet.Put( SvxChartRegressItem( eRegress, SCHATTR_STAT_REGRESSTYPE ));
+                rOutItemSet.Put( SvxChartRegressItem( eRegress, SCHATTR_REGRESSION_TYPE ));
             }
         }
         break;
--- chart2/source/controller/itemsetwrapper/SchWhichPairs.hxx	2008-02-18 16:56:12.000000000 +0100
+++ chart2/source/controller/itemsetwrapper/SchWhichPairs.hxx	2008-02-21 16:59:26.000000000 +0100
@@ -179,7 +179,6 @@
 const USHORT nRowWhichPairs[] =
 {
 	CHART_POINT_WHICHPAIRS,
-    SCHATTR_STAT_START, SCHATTR_STAT_END,			/*    45 -    52  sch/schattr.hxx*/	\
     CHART_SERIES_OPTIONS_WHICHPAIRS,
     0
 };
@@ -211,7 +210,14 @@
 const USHORT nStatWhichPairs[]=
 {
 	SCHATTR_STAT_START, SCHATTR_STAT_END,			//    45 -    52  sch/schattr.hxx
-    SCHATTR_REGRESSION_START, SCHATTR_REGRESSION_END,
+    SCHATTR_REGRESSION_START, SCHATTR_REGRESSION_END, // 108 -   109
+    0
+};
+
+const USHORT nErrorBarWhichPairs[]=
+{
+	SCHATTR_STAT_START, SCHATTR_STAT_END,			//    45 -    52  sch/schattr.hxx
+	XATTR_LINE_FIRST, XATTR_LINE_LAST,				//  1000 -  1016  svx/xdef.hxx
     0
 };
 
@@ -257,7 +263,6 @@
 const USHORT nRegressionCurveWhichPairs[] =
 {
     SCHATTR_REGRESSION_START, SCHATTR_REGRESSION_END, // 108 -   109
-    SCHATTR_STAT_REGRESSTYPE, SCHATTR_STAT_REGRESSTYPE,
 	XATTR_LINE_FIRST, XATTR_LINE_LAST,				//  1000 -  1016  svx/xdef.hxx
     0
 };
--- chart2/source/controller/itemsetwrapper/StatisticsItemConverter.cxx	2008-02-18 16:56:43.000000000 +0100
+++ chart2/source/controller/itemsetwrapper/StatisticsItemConverter.cxx	2008-02-24 23:49:55.000000000 +0100
@@ -38,37 +38,25 @@
 #include "StatisticsItemConverter.hxx"
 #include "SchWhichPairs.hxx"
 #include "macros.hxx"
-#include "ItemPropertyMap.hxx"
 #include "RegressionCurveHelper.hxx"
+#include "ItemPropertyMap.hxx"
 #include "ErrorBar.hxx"
 #include "PropertyHelper.hxx"
 #include "ChartModelHelper.hxx"
 #include "ChartTypeHelper.hxx"
+#include "StatisticsHelper.hxx"
 
 #include "GraphicPropertyItemConverter.hxx"
 
-#ifndef _SVX_CHRTITEM_HXX
+#include <svtools/stritem.hxx>
 #include <svx/chrtitem.hxx>
-#endif
-#ifndef _SFXINTITEM_HXX
 #include <svtools/intitem.hxx>
-#endif
-#ifndef INCLUDED_RTL_MATH_HXX
 #include <rtl/math.hxx>
-#endif
 
-#ifndef _COM_SUN_STAR_CHART2_DATAPOINTLABEL_HPP_
 #include <com/sun/star/chart2/DataPointLabel.hpp>
-#endif
-#ifndef _COM_SUN_STAR_CHART2_XREGRESSIONCURVECONTAINER_HPP_
-#include <com/sun/star/chart2/XRegressionCurveContainer.hpp>
-#endif
-#ifndef _COM_SUN_STAR_CHART2_ERRORBARSTYLE_HPP_
-#include <com/sun/star/chart2/ErrorBarStyle.hpp>
-#endif
-#ifndef _COM_SUN_STAR_LANG_XSERVICENAME_HPP_
+#include <com/sun/star/chart2/XInternalDataProvider.hpp>
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 #include <com/sun/star/lang/XServiceName.hpp>
-#endif
 
 #include <functional>
 #include <algorithm>
@@ -79,7 +67,6 @@
 namespace
 {
 
-
 uno::Reference< beans::XPropertySet > lcl_GetYErrorBar(
     const uno::Reference< beans::XPropertySet > & xProp )
 {
@@ -97,6 +84,7 @@
 
     return xResult;
 }
+
 ::chart::RegressionCurveHelper::tRegressionType lcl_convertRegressionType( SvxChartRegress eRegress )
 {
     ::chart::RegressionCurveHelper::tRegressionType eType = ::chart::RegressionCurveHelper::REGRESSION_TYPE_NONE;
@@ -120,6 +108,7 @@
     return eType;
 }
 
+
 uno::Reference< beans::XPropertySet > lcl_GetDefaultErrorBar()
 {
     // todo: use a valid context
@@ -172,7 +161,7 @@
     {
         SvxChartRegress eRegress = CHREGRESS_NONE;
         const SfxPoolItem *pPoolItem = NULL;
-        if( pItemSet->GetItemState( SCHATTR_STAT_REGRESSTYPE, TRUE, &pPoolItem ) == SFX_ITEM_SET )
+        if( pItemSet->GetItemState( SCHATTR_REGRESSION_TYPE, TRUE, &pPoolItem ) == SFX_ITEM_SET )
         {
             eRegress = static_cast< const SvxChartRegressItem * >( pPoolItem )->GetValue();
             bEquationExists = ( eRegress != CHREGRESS_NONE );
@@ -270,46 +259,50 @@
         // SCHATTR_STAT_CONSTMINUS and SCHATTR_STAT_INDICATE
         case SCHATTR_STAT_KIND_ERROR:
         {
-            uno::Reference< beans::XPropertySet > xOldErrorBarProp(
+            uno::Reference< beans::XPropertySet > xErrorBarProp(
                 lcl_GetYErrorBar( GetPropertySet() ));
 
             SvxChartKindError eErrorKind =
                 static_cast< const SvxChartKindErrorItem & >(
                     rItemSet.Get( nWhichId )).GetValue();
 
-            if( !xOldErrorBarProp.is() && eErrorKind == CHERROR_NONE)
+            if( !xErrorBarProp.is() && eErrorKind == CHERROR_NONE)
             {
                 //nothing to do
             }
             else
             {
-                chart2::ErrorBarStyle eStyle;
+                sal_Int32 nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
 
                 switch( eErrorKind )
                 {
                     case CHERROR_NONE:
-                        eStyle = chart2::ErrorBarStyle_NONE; break;
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE; break;
                     case CHERROR_VARIANT:
-                        eStyle = chart2::ErrorBarStyle_VARIANCE; break;
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::VARIANCE; break;
                     case CHERROR_SIGMA:
-                        eStyle = chart2::ErrorBarStyle_STANDARD_DEVIATION; break;
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::STANDARD_DEVIATION; break;
                     case CHERROR_PERCENT:
-                        eStyle = chart2::ErrorBarStyle_RELATIVE; break;
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::RELATIVE; break;
                     case CHERROR_BIGERROR:
-                        eStyle = chart2::ErrorBarStyle_ERROR_MARGIN; break;
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN; break;
                     case CHERROR_CONST:
-                        eStyle = chart2::ErrorBarStyle_ABSOLUTE; break;
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE; break;
+                    case CHERROR_STDERROR:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::STANDARD_ERROR; break;
+                    case CHERROR_RANGE:
+                        nStyle = ::com::sun::star::chart::ErrorBarStyle::FROM_DATA; break;
                 }
 
-                if( !xOldErrorBarProp.is() )
+                if( !xErrorBarProp.is() )
                 {
-                    xOldErrorBarProp = lcl_GetDefaultErrorBar();
+                    xErrorBarProp = lcl_GetDefaultErrorBar();
+                    GetPropertySet()->setPropertyValue(
+                        C2U( "ErrorBarY" ), uno::makeAny( xErrorBarProp ));
                 }
 
-                xOldErrorBarProp->setPropertyValue( C2U( "ErrorBarStyle" ),
-                                                    uno::makeAny( eStyle ));
-                GetPropertySet()->setPropertyValue( C2U( "ErrorBarY" ),
-                                                    uno::makeAny( xOldErrorBarProp ));
+                xErrorBarProp->setPropertyValue( C2U( "ErrorBarStyle" ),
+                                                    uno::makeAny( nStyle ));
                 bChanged = true;
             }
         }
@@ -318,26 +311,25 @@
         case SCHATTR_STAT_PERCENT:
         case SCHATTR_STAT_BIGERROR:
         {
-            uno::Reference< beans::XPropertySet > xOldErrorBarProp(
+            OSL_ENSURE( false, "Deprectaed item" );
+            uno::Reference< beans::XPropertySet > xErrorBarProp(
                 lcl_GetYErrorBar( GetPropertySet()));
-            bool bOldHasErrorBar = xOldErrorBarProp.is();
+            bool bOldHasErrorBar = xErrorBarProp.is();
 
             double fValue =
                 static_cast< const SvxDoubleItem & >(
                     rItemSet.Get( nWhichId )).GetValue();
             double fPos, fNeg;
-            lcl_getErrorValues( xOldErrorBarProp, fPos, fNeg );
+            lcl_getErrorValues( xErrorBarProp, fPos, fNeg );
 
             if( bOldHasErrorBar &&
                 ! ( ::rtl::math::approxEqual( fPos, fValue ) &&
                     ::rtl::math::approxEqual( fNeg, fValue )))
             {
-                xOldErrorBarProp->setPropertyValue( C2U( "PositiveError" ),
+                xErrorBarProp->setPropertyValue( C2U( "PositiveError" ),
                                                     uno::makeAny( fValue ));
-                xOldErrorBarProp->setPropertyValue( C2U( "NegativeError" ),
+                xErrorBarProp->setPropertyValue( C2U( "NegativeError" ),
                                                     uno::makeAny( fValue ));
-                GetPropertySet()->setPropertyValue( C2U( "ErrorBarY" ),
-                                                    uno::makeAny( xOldErrorBarProp ));
                 bChanged = true;
             }
         }
@@ -345,22 +337,20 @@
 
         case SCHATTR_STAT_CONSTPLUS:
         {
-            uno::Reference< beans::XPropertySet > xOldErrorBarProp(
+            uno::Reference< beans::XPropertySet > xErrorBarProp(
                 lcl_GetYErrorBar( GetPropertySet()));
-            bool bOldHasErrorBar = xOldErrorBarProp.is();
+            bool bOldHasErrorBar = xErrorBarProp.is();
 
             double fValue =
                 static_cast< const SvxDoubleItem & >(
                     rItemSet.Get( nWhichId )).GetValue();
             double fPos, fNeg;
-            lcl_getErrorValues( xOldErrorBarProp, fPos, fNeg );
+            lcl_getErrorValues( xErrorBarProp, fPos, fNeg );
 
             if( bOldHasErrorBar &&
                 ! ::rtl::math::approxEqual( fPos, fValue ))
             {
-                xOldErrorBarProp->setPropertyValue( C2U( "PositiveError" ), uno::makeAny( fValue ));
-                GetPropertySet()->setPropertyValue( C2U( "ErrorBarY" ),
-                                                    uno::makeAny( xOldErrorBarProp ));
+                xErrorBarProp->setPropertyValue( C2U( "PositiveError" ), uno::makeAny( fValue ));
                 bChanged = true;
             }
         }
@@ -368,28 +358,26 @@
 
         case SCHATTR_STAT_CONSTMINUS:
         {
-            uno::Reference< beans::XPropertySet > xOldErrorBarProp(
+            uno::Reference< beans::XPropertySet > xErrorBarProp(
                 lcl_GetYErrorBar( GetPropertySet()));
-            bool bOldHasErrorBar = xOldErrorBarProp.is();
+            bool bOldHasErrorBar = xErrorBarProp.is();
 
             double fValue =
                 static_cast< const SvxDoubleItem & >(
                     rItemSet.Get( nWhichId )).GetValue();
             double fPos, fNeg;
-            lcl_getErrorValues( xOldErrorBarProp, fPos, fNeg );
+            lcl_getErrorValues( xErrorBarProp, fPos, fNeg );
 
             if( bOldHasErrorBar &&
                 ! ::rtl::math::approxEqual( fNeg, fValue ))
             {
-                xOldErrorBarProp->setPropertyValue( C2U( "NegativeError" ), uno::makeAny( fValue ));
-                GetPropertySet()->setPropertyValue( C2U( "ErrorBarY" ),
-                                                    uno::makeAny( xOldErrorBarProp ));
+                xErrorBarProp->setPropertyValue( C2U( "NegativeError" ), uno::makeAny( fValue ));
                 bChanged = true;
             }
         }
         break;
 
-        case SCHATTR_STAT_REGRESSTYPE:
+        case SCHATTR_REGRESSION_TYPE:
         {
             SvxChartRegress eRegress =
                 static_cast< const SvxChartRegressItem & >(
@@ -457,9 +445,9 @@
 
         case SCHATTR_STAT_INDICATE:
         {
-            uno::Reference< beans::XPropertySet > xOldErrorBarProp(
+            uno::Reference< beans::XPropertySet > xErrorBarProp(
                 lcl_GetYErrorBar( GetPropertySet()));
-            bool bOldHasErrorBar = xOldErrorBarProp.is();
+            bool bOldHasErrorBar = xErrorBarProp.is();
 
             SvxChartIndicate eIndicate =
                 static_cast< const SvxChartIndicateItem & >(
@@ -469,20 +457,72 @@
             bool bNewIndNeg = (eIndicate == CHINDICATE_BOTH || eIndicate == CHINDICATE_DOWN );
 
             bool bShowPos, bShowNeg;
-            lcl_getErrorIndicatorValues( xOldErrorBarProp, bShowPos, bShowNeg );
+            lcl_getErrorIndicatorValues( xErrorBarProp, bShowPos, bShowNeg );
 
             if( bOldHasErrorBar &&
                 ( bShowPos != bNewIndPos ||
                   bShowNeg != bNewIndNeg ))
             {
-                xOldErrorBarProp->setPropertyValue( C2U( "ShowPositiveError" ), uno::makeAny( bNewIndPos ));
-                xOldErrorBarProp->setPropertyValue( C2U( "ShowNegativeError" ), uno::makeAny( bNewIndNeg ));
-                GetPropertySet()->setPropertyValue( C2U( "ErrorBarY" ),
-                                                    uno::makeAny( xOldErrorBarProp ));
+                xErrorBarProp->setPropertyValue( C2U( "ShowPositiveError" ), uno::makeAny( bNewIndPos ));
+                xErrorBarProp->setPropertyValue( C2U( "ShowNegativeError" ), uno::makeAny( bNewIndNeg ));
                 bChanged = true;
             }
         }
         break;
+
+        case SCHATTR_STAT_RANGE_POS:
+        case SCHATTR_STAT_RANGE_NEG:
+        {
+            // @todo: also be able to deal with x-error bars
+            const bool bYError = true;
+            uno::Reference< chart2::data::XDataSource > xErrorBarSource( lcl_GetYErrorBar( GetPropertySet()), uno::UNO_QUERY );
+            uno::Reference< chart2::XChartDocument > xChartDoc( m_xModel, uno::UNO_QUERY );
+            uno::Reference< chart2::data::XDataProvider > xDataProvider;
+
+            if( xChartDoc.is())
+                xDataProvider.set( xChartDoc->getDataProvider());
+            if( xErrorBarSource.is() && xDataProvider.is())
+            {
+                ::rtl::OUString aNewRange( static_cast< const SfxStringItem & >( rItemSet.Get( nWhichId )).GetValue());
+                bool bApplyNewRange = false;
+
+                bool bIsPositiveValue( nWhichId == SCHATTR_STAT_RANGE_POS );
+                if( xChartDoc->hasInternalDataProvider())
+                {
+                    if( aNewRange.getLength())
+                    {
+                        uno::Reference< chart2::data::XDataSequence > xSeq(
+                            StatisticsHelper::getErrorDataSequenceFromDataSource(
+                                xErrorBarSource, bIsPositiveValue, bYError ));
+                        if( ! xSeq.is())
+                        {
+                            // no data range for error bars yet => create
+                            uno::Reference< chart2::XInternalDataProvider > xIntDataProvider( xDataProvider, uno::UNO_QUERY );
+                            OSL_ASSERT( xIntDataProvider.is());
+                            if( xIntDataProvider.is())
+                            {
+                                xIntDataProvider->appendSequence();
+                                aNewRange = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("last"));
+                                bApplyNewRange = true;
+                            }
+                        }
+                    }
+                }
+                else
+                {
+                    uno::Reference< chart2::data::XDataSequence > xSeq(
+                        StatisticsHelper::getErrorDataSequenceFromDataSource(
+                            xErrorBarSource, bIsPositiveValue, bYError ));
+                    bApplyNewRange =
+                        ! ( xSeq.is() && aNewRange.equals( xSeq->getSourceRangeRepresentation()));
+                }
+
+                if( bApplyNewRange )
+                    StatisticsHelper::setErrorDataSequence(
+                        xErrorBarSource, xDataProvider, aNewRange, bIsPositiveValue, bYError );
+            }
+        }
+        break;
     }
 
     return bChanged;
@@ -509,31 +549,27 @@
                 lcl_GetYErrorBar( GetPropertySet()));
             if( xErrorBarProp.is() )
             {
-                chart2::ErrorBarStyle eStyle;
-                if( xErrorBarProp->getPropertyValue( C2U( "ErrorBarStyle" )) >>= eStyle )
+                sal_Int32 nStyle;
+                if( xErrorBarProp->getPropertyValue( C2U( "ErrorBarStyle" )) >>= nStyle )
                 {
-                    switch( eStyle )
+                    switch( nStyle )
                     {
-                        case chart2::ErrorBarStyle_NONE:
+                        case ::com::sun::star::chart::ErrorBarStyle::NONE:
                             break;
-                        case chart2::ErrorBarStyle_VARIANCE:
+                        case ::com::sun::star::chart::ErrorBarStyle::VARIANCE:
                             eErrorKind = CHERROR_VARIANT; break;
-                        case chart2::ErrorBarStyle_STANDARD_DEVIATION:
+                        case ::com::sun::star::chart::ErrorBarStyle::STANDARD_DEVIATION:
                             eErrorKind = CHERROR_SIGMA; break;
-                        case chart2::ErrorBarStyle_ABSOLUTE:
+                        case ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE:
                             eErrorKind = CHERROR_CONST; break;
-                        case chart2::ErrorBarStyle_RELATIVE:
+                        case ::com::sun::star::chart::ErrorBarStyle::RELATIVE:
                             eErrorKind = CHERROR_PERCENT; break;
-                        case chart2::ErrorBarStyle_ERROR_MARGIN:
+                        case ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN:
                             eErrorKind = CHERROR_BIGERROR; break;
-                        case chart2::ErrorBarStyle_STANDARD_ERROR:
-                            // not yet available in UI
-                            break;
-
-                        case chart2::ErrorBarStyle_FROM_DATA:
-                            // suppress warning
-                        case chart2::ErrorBarStyle_MAKE_FIXED_SIZE:
-                            break;
+                        case ::com::sun::star::chart::ErrorBarStyle::STANDARD_ERROR:
+                            eErrorKind = CHERROR_STDERROR; break;
+                        case ::com::sun::star::chart::ErrorBarStyle::FROM_DATA:
+                            eErrorKind = CHERROR_RANGE; break;
                     }
                 }
             }
@@ -589,14 +625,14 @@
         }
         break;
 
-        case SCHATTR_STAT_REGRESSTYPE:
+        case SCHATTR_REGRESSION_TYPE:
         {
             SvxChartRegress eRegress = static_cast< SvxChartRegress >(
                 static_cast< sal_Int32 >(
                     RegressionCurveHelper::getFirstRegressTypeNotMeanValueLine(
                         uno::Reference< chart2::XRegressionCurveContainer >(
                             GetPropertySet(), uno::UNO_QUERY ) )));
-            rOutItemSet.Put( SvxChartRegressItem( eRegress, SCHATTR_STAT_REGRESSTYPE ));
+            rOutItemSet.Put( SvxChartRegressItem( eRegress, SCHATTR_REGRESSION_TYPE ));
         }
         break;
 
@@ -655,6 +691,21 @@
             rOutItemSet.Put( SvxChartIndicateItem( eIndicate, SCHATTR_STAT_INDICATE ));
         }
         break;
+
+        case SCHATTR_STAT_RANGE_POS:
+        case SCHATTR_STAT_RANGE_NEG:
+        {
+            uno::Reference< chart2::data::XDataSource > xErrorBarSource( lcl_GetYErrorBar( GetPropertySet()), uno::UNO_QUERY );
+            if( xErrorBarSource.is())
+            {
+                uno::Reference< chart2::data::XDataSequence > xSeq(
+                    StatisticsHelper::getErrorDataSequenceFromDataSource(
+                        xErrorBarSource, (nWhichId == SCHATTR_STAT_RANGE_POS) /*, true */ /* y */ ));
+                if( xSeq.is())
+                    rOutItemSet.Put( SfxStringItem( nWhichId, String( xSeq->getSourceRangeRepresentation())));
+            }
+        }
+        break;
    }
 }
 
--- chart2/source/controller/main/ChartController.cxx	2008-02-18 16:57:03.000000000 +0100
+++ chart2/source/controller/main/ChartController.cxx	2008-02-24 23:49:55.000000000 +0100
@@ -1094,8 +1094,16 @@
          this->executeDispatch_InsertSpecialCharacter();
     else if( aCommand.equals("InsertTrendline"))
          this->executeDispatch_InsertTrendline();
+    else if( aCommand.equals("DeleteTrendline"))
+         this->executeDispatch_DeleteTrendline();
     else if( aCommand.equals("InsertMeanValue"))
         this->executeDispatch_InsertMeanValue();
+    else if( aCommand.equals("DeleteMeanValue"))
+        this->executeDispatch_DeleteMeanValue();
+    else if( aCommand.equals("InsertYErrorbar"))
+        this->executeDispatch_InsertYErrorbar();
+    else if( aCommand.equals("DeleteYErrorbar"))
+        this->executeDispatch_DeleteYErrorbar();
     else if( aCommand.equals("InsertTrendlineEquation"))
          this->executeDispatch_InsertTrendlineEquation();
     //format objects
@@ -1409,7 +1417,8 @@
         ( C2U("InsertAxis") )         ( C2U("InsertGrids") )          ( C2U("InsertStatistics") )
         ( C2U("InsertSymbol") )       ( C2U("InsertTrendline") )      ( C2U("InsertTrendlineEquation") )
         ( C2U("InsertTrendlines") )   ( C2U("InsertMeanValue") )      ( C2U("InsertMeanValues") )
-        ( C2U("InsertYErrorbars") )
+        ( C2U("InsertYErrorbars") )   ( C2U("InsertYErrorbar") )
+        ( C2U("DeleteTrendline") )    ( C2U("DeleteMeanValue") )      ( C2U("DeleteYErrorbar") )
         //format objects
 //MENUCHANGE            ( C2U("SelectSourceRanges") )
         ( C2U("DiagramObjects") )     ( C2U("TransformDialog") )
--- chart2/source/controller/main/ChartController.hxx	2008-02-18 16:57:20.000000000 +0100
+++ chart2/source/controller/main/ChartController.hxx	2008-02-24 23:49:55.000000000 +0100
@@ -614,6 +614,11 @@
     void SAL_CALL       executeDispatch_InsertMeanValues();
     void SAL_CALL       executeDispatch_InsertTrendline();
     void SAL_CALL       executeDispatch_InsertTrendlineEquation();
+    void SAL_CALL       executeDispatch_InsertYErrorbar();
+
+    void SAL_CALL       executeDispatch_DeleteMeanValue();
+    void SAL_CALL       executeDispatch_DeleteTrendline();
+    void SAL_CALL       executeDispatch_DeleteYErrorbar();
 
     void SAL_CALL       executeDispatch_InsertSpecialCharacter();
     void SAL_CALL       executeDispatch_EditText();
@@ -681,6 +686,8 @@
     void impl_PasteGraphic( ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > & xGraphic,
                             const ::Point & aPosition );
     void impl_SetMousePointer( const MouseEvent & rEvent );
+
+    void impl_ClearSelection();
 };
 
 //.............................................................................
--- chart2/source/controller/main/ChartController_Insert.cxx	2008-02-18 16:57:37.000000000 +0100
+++ chart2/source/controller/main/ChartController_Insert.cxx	2008-02-24 23:49:55.000000000 +0100
@@ -64,8 +64,12 @@
 #include "ObjectIdentifier.hxx"
 #include "RegressionCurveHelper.hxx"
 #include "RegressionCurveItemConverter.hxx"
+#include "StatisticsHelper.hxx"
+#include "ErrorBarItemConverter.hxx"
+#include "MultipleItemConverter.hxx"
 
 #include <com/sun/star/chart2/XRegressionCurve.hpp>
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 
 #ifndef _SVX_ACTIONDESCRIPTIONPROVIDER_HXX
 #include <svx/ActionDescriptionProvider.hxx>
@@ -324,7 +328,9 @@
 
         //prepare and open dialog
         ::vos::OGuard aGuard( Application::GetSolarMutex());
-        InsertErrorBarsDialog aDlg( m_pChartWindow, aItemSet);
+        InsertErrorBarsDialog aDlg(
+            m_pChartWindow, aItemSet,
+            uno::Reference< chart2::XChartDocument >( m_aModel->getModel(), uno::UNO_QUERY ));
         aDlg.SetAxisMinorStepWidthForErrorBarDecimals(
             InsertErrorBarsDialog::getAxisMinorStepWidthForErrorBarDecimals( m_aModel->getModel(), m_xChartView, rtl::OUString() ) );
 
@@ -460,6 +466,56 @@
     }
 }
 
+void SAL_CALL ChartController::executeDispatch_InsertYErrorbar()
+{
+    uno::Reference< chart2::XDataSeries > xSeries(
+        ObjectIdentifier::getDataSeriesForCID( m_aSelection.getSelectedCID(), m_aModel->getModel()), uno::UNO_QUERY );
+    if( xSeries.is())
+    {
+        UndoLiveUpdateGuard aUndoGuard(
+            ActionDescriptionProvider::createDescription(
+                ActionDescriptionProvider::INSERT, ::rtl::OUString( String( SchResId( STR_OBJECT_ERROR_INDICATOR )))),
+            m_xUndoManager, m_aModel->getModel() );
+
+        // add error bars with standard deviation
+        uno::Reference< beans::XPropertySet > xErrorBarProp(
+            StatisticsHelper::addErrorBars( xSeries, m_xCC, ::com::sun::star::chart::ErrorBarStyle::STANDARD_DEVIATION ));
+
+        // get an appropriate item converter
+        wrapper::ErrorBarItemConverter aItemConverter(
+            m_aModel->getModel(), xErrorBarProp, m_pDrawModelWrapper->getSdrModel().GetItemPool(),
+            m_pDrawModelWrapper->getSdrModel(),
+            uno::Reference< lang::XMultiServiceFactory >( m_aModel->getModel(), uno::UNO_QUERY ));
+
+        // open dialog
+        SfxItemSet aItemSet = aItemConverter.CreateEmptyItemSet();
+        aItemConverter.FillItemSet( aItemSet );
+        ObjectPropertiesDialogParameter aDialogParameter = ObjectPropertiesDialogParameter(
+            ObjectIdentifier::createClassifiedIdentifierWithParent(
+                OBJECTTYPE_DATA_ERRORS, ::rtl::OUString(), m_aSelection.getSelectedCID()));
+		aDialogParameter.init( m_aModel->getModel() );
+        ViewElementListProvider aViewElementListProvider( m_pDrawModelWrapper.get());
+        ::vos::OGuard aGuard( Application::GetSolarMutex());
+        SchAttribTabDlg aDlg( m_pChartWindow, &aItemSet, &aDialogParameter, &aViewElementListProvider,
+                              uno::Reference< util::XNumberFormatsSupplier >( m_aModel->getModel(), uno::UNO_QUERY ));
+        aDlg.SetAxisMinorStepWidthForErrorBarDecimals(
+            InsertErrorBarsDialog::getAxisMinorStepWidthForErrorBarDecimals( m_aModel->getModel(), m_xChartView, m_aSelection.getSelectedCID()));
+
+        // note: when a user pressed "OK" but didn't change any settings in the
+        // dialog, the SfxTabDialog returns "Cancel"
+        if( aDlg.Execute() == RET_OK || aDlg.DialogWasClosedWithOK())
+        {
+            const SfxItemSet* pOutItemSet = aDlg.GetOutputItemSet();
+            if( pOutItemSet )
+            {
+                ControllerLockGuard aCLGuard( m_aModel->getModel());
+                aItemConverter.ApplyItemSet( *pOutItemSet );
+            }
+            aUndoGuard.commitAction();
+        }
+    }
+}
+
 void SAL_CALL ChartController::executeDispatch_InsertTrendlineEquation()
 {
     uno::Reference< chart2::XRegressionCurve > xRegCurve(
@@ -481,6 +537,52 @@
     }
 }
 
+void SAL_CALL ChartController::executeDispatch_DeleteMeanValue()
+{
+    uno::Reference< chart2::XRegressionCurveContainer > xRegCurveCnt(
+        ObjectIdentifier::getDataSeriesForCID( m_aSelection.getSelectedCID(), m_aModel->getModel()), uno::UNO_QUERY );
+    if( xRegCurveCnt.is())
+    {
+        UndoGuard aUndoGuard(
+            ActionDescriptionProvider::createDescription(
+                ActionDescriptionProvider::DELETE, ::rtl::OUString( String( SchResId( STR_OBJECT_AVERAGE_LINE )))),
+            m_xUndoManager, m_aModel->getModel());
+        RegressionCurveHelper::removeMeanValueLine( xRegCurveCnt );
+        aUndoGuard.commitAction();
+    }
+}
+
+void SAL_CALL ChartController::executeDispatch_DeleteTrendline()
+{
+    uno::Reference< chart2::XRegressionCurveContainer > xRegCurveCnt(
+        ObjectIdentifier::getDataSeriesForCID( m_aSelection.getSelectedCID(), m_aModel->getModel()), uno::UNO_QUERY );
+    if( xRegCurveCnt.is())
+    {
+        UndoGuard aUndoGuard(
+            ActionDescriptionProvider::createDescription(
+                ActionDescriptionProvider::DELETE, ::rtl::OUString( String( SchResId( STR_OBJECT_CURVE )))),
+            m_xUndoManager, m_aModel->getModel());
+        RegressionCurveHelper::removeAllExceptMeanValueLine( xRegCurveCnt );
+        aUndoGuard.commitAction();
+    }
+}
+
+void SAL_CALL ChartController::executeDispatch_DeleteYErrorbar()
+{
+    uno::Reference< chart2::XDataSeries > xDataSeries(
+        ObjectIdentifier::getDataSeriesForCID( m_aSelection.getSelectedCID(), m_aModel->getModel()));
+    if( xDataSeries.is())
+    {
+        UndoGuard aUndoGuard(
+            ActionDescriptionProvider::createDescription(
+                ActionDescriptionProvider::DELETE, ::rtl::OUString( String( SchResId( STR_OBJECT_CURVE )))),
+            m_xUndoManager, m_aModel->getModel());
+        StatisticsHelper::removeErrorBars( xDataSeries );
+        aUndoGuard.commitAction();
+    }
+}
+
+
 //.............................................................................
 } //namespace chart
 //.............................................................................
--- chart2/source/controller/main/ChartController_Properties.cxx	2008-02-18 16:57:53.000000000 +0100
+++ chart2/source/controller/main/ChartController_Properties.cxx	2008-02-21 16:59:27.000000000 +0100
@@ -52,6 +52,7 @@
 #include "LegendItemConverter.hxx"
 #include "RegressionCurveItemConverter.hxx"
 #include "RegressionEquationItemConverter.hxx"
+#include "ErrorBarItemConverter.hxx"
 #include "ChartModelHelper.hxx"
 #include "AxisHelper.hxx"
 #include "TitleHelper.hxx"
@@ -275,7 +276,6 @@
             }
             case OBJECTTYPE_GRID:
             case OBJECTTYPE_SUBGRID:
-            case OBJECTTYPE_DATA_ERRORS:
             case OBJECTTYPE_DATA_AVERAGE_LINE:
                 pItemConverter =  new wrapper::GraphicPropertyItemConverter(
                                         xObjectProperties, rDrawModel.GetItemPool(),
@@ -283,6 +283,12 @@
                                         wrapper::GraphicPropertyItemConverter::LINE_PROPERTIES );
                     break;
 
+            case OBJECTTYPE_DATA_ERRORS:
+                pItemConverter =  new wrapper::ErrorBarItemConverter(
+                    xChartModel, xObjectProperties, rDrawModel.GetItemPool(),
+                    rDrawModel, uno::Reference< lang::XMultiServiceFactory >( xChartModel, uno::UNO_QUERY ));
+                break;
+
             case OBJECTTYPE_DATA_CURVE:
                 pItemConverter =  new wrapper::RegressionCurveItemConverter(
                     xObjectProperties, uno::Reference< chart2::XRegressionCurveContainer >(
@@ -642,7 +648,7 @@
             // note: the dialog takes the ownership of pSymbolShapeProperties and pAutoSymbolGraphic
             aDlg.setSymbolInformation( pSymbolShapeProperties, pAutoSymbolGraphic );
         }
-        if( aDialogParameter.HasRegressionProperties() )
+        if( aDialogParameter.HasStatisticProperties() )
         {
             aDlg.SetAxisMinorStepWidthForErrorBarDecimals(
                 InsertErrorBarsDialog::getAxisMinorStepWidthForErrorBarDecimals( m_aModel->getModel(), m_xChartView, aObjectCID ) );
--- chart2/source/controller/main/ChartController_Tools.cxx	2008-02-18 16:58:10.000000000 +0100
+++ chart2/source/controller/main/ChartController_Tools.cxx	2008-02-21 16:59:27.000000000 +0100
@@ -65,6 +65,7 @@
 #include <com/sun/star/text/XTextRange.hpp>
 #include <com/sun/star/drawing/TextVerticalAdjust.hpp>
 #include <com/sun/star/drawing/TextHorizontalAdjust.hpp>
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 
 // #include <com/sun/star/drawing/XDrawPageSupplier.hpp>
 
@@ -544,7 +545,7 @@
         if( (OBJECTTYPE_DATA_SERIES == aObjectType) || (OBJECTTYPE_LEGEND_ENTRY == aObjectType) )
             return true;
         if( (OBJECTTYPE_DATA_CURVE_EQUATION == aObjectType) || (OBJECTTYPE_DATA_CURVE == aObjectType) ||
-            (OBJECTTYPE_DATA_AVERAGE_LINE == aObjectType))
+            (OBJECTTYPE_DATA_AVERAGE_LINE == aObjectType) || (OBJECTTYPE_DATA_ERRORS == aObjectType))
             return true;
         if( (OBJECTTYPE_DATA_LABELS == aObjectType) || (OBJECTTYPE_DATA_LABEL == aObjectType) )
             return true;
@@ -553,6 +554,15 @@
     return false;
 }
 
+void ChartController::impl_ClearSelection()
+{
+    if( m_aSelection.hasSelection())
+    {
+        m_aSelection.clearSelection();
+        impl_notifySelectionChangeListeners();
+    }
+}
+
 bool ChartController::executeDispatch_Delete()
 {
     bool bReturn = false;
@@ -566,7 +576,7 @@
             return false;
 
         //remove chart object
-        m_aSelection.clearSelection();
+        impl_ClearSelection();
 
         uno::Reference< chart2::XChartDocument > xChartDoc( m_aModel->getModel(), uno::UNO_QUERY );
         if( !xChartDoc.is() )
@@ -670,6 +680,30 @@
                 break;
             }
 
+            case OBJECTTYPE_DATA_ERRORS:
+            {
+                uno::Reference< beans::XPropertySet > xErrorBarProp(
+                    ObjectIdentifier::getObjectPropertySet( aCID, m_aModel->getModel()));
+                if( xErrorBarProp.is())
+                {
+                    uno::Reference< frame::XModel > xModel( m_aModel->getModel());
+                    // using assignment for broken gcc 3.3
+                    UndoGuard aUndoGuard = UndoGuard(
+                        ActionDescriptionProvider::createDescription(
+                            ActionDescriptionProvider::DELETE, ::rtl::OUString( String( SchResId( STR_OBJECT_ERROR_INDICATOR )))),
+                        m_xUndoManager, xModel );
+                    {
+                        ControllerLockGuard aCtlLockGuard( xModel );
+                        xErrorBarProp->setPropertyValue(
+                            C2U("ErrorBarStyle"),
+                            uno::makeAny( ::com::sun::star::chart::ErrorBarStyle::NONE ));
+                    }
+                    bReturn = true;
+                    aUndoGuard.commitAction();
+                }
+                break;
+            }
+
             case OBJECTTYPE_DATA_LABELS:
             case OBJECTTYPE_DATA_LABEL:
             {
@@ -713,7 +747,7 @@
         uno::Reference< drawing::XShape > xShape( m_aSelection.getSelectedAdditionalShape() );
         if( xShape.is() )
         {
-            m_aSelection.clearSelection();
+            impl_ClearSelection();
             {
                 ::vos::OGuard aSolarGuard( Application::GetSolarMutex());
                 if( m_pDrawViewWrapper )
--- chart2/source/controller/main/ChartController_Window.cxx	2008-02-18 16:58:27.000000000 +0100
+++ chart2/source/controller/main/ChartController_Window.cxx	2008-02-24 23:49:55.000000000 +0100
@@ -880,8 +880,12 @@
             xPopupMenu->insertSeparator( -1 );
             lcl_insertMenuCommand( xPopupMenu, xMenuEx, nUniqueId++, C2U(".uno:DiagramData"));
             xPopupMenu->insertSeparator( -1 );
+            lcl_insertMenuCommand( xPopupMenu, xMenuEx, nUniqueId++, C2U(".uno:InsertYErrorbar"));
+            lcl_insertMenuCommand( xPopupMenu, xMenuEx, nUniqueId++, C2U(".uno:DeleteYErrorbar"));
             lcl_insertMenuCommand( xPopupMenu, xMenuEx, nUniqueId++, C2U(".uno:InsertMeanValue"));
+            lcl_insertMenuCommand( xPopupMenu, xMenuEx, nUniqueId++, C2U(".uno:DeleteMeanValue"));
             lcl_insertMenuCommand( xPopupMenu, xMenuEx, nUniqueId++, C2U(".uno:InsertTrendline"));
+            lcl_insertMenuCommand( xPopupMenu, xMenuEx, nUniqueId++, C2U(".uno:DeleteTrendline"));
             lcl_insertMenuCommand( xPopupMenu, xMenuEx, nUniqueId++, C2U(".uno:InsertTrendlineEquation"));
             xPopupMenu->insertSeparator( -1 );
             lcl_insertMenuCommand( xPopupMenu, xMenuEx, nUniqueId++, C2U(".uno:Cut"));
@@ -1136,7 +1140,8 @@
         }
     }
 
-    if( ! bReturn && nCode == KEY_DELETE )
+    if( ! bReturn &&
+        (nCode == KEY_DELETE || nCode == KEY_BACKSPACE ))
     {
         bReturn = executeDispatch_Delete();
         if( ! bReturn )
--- chart2/source/controller/main/ControllerCommandDispatch.cxx	2008-02-18 16:58:43.000000000 +0100
+++ chart2/source/controller/main/ControllerCommandDispatch.cxx	2008-02-24 23:49:55.000000000 +0100
@@ -49,6 +49,7 @@
 #include "ChartController.hxx"
 #include "RegressionCurveHelper.hxx"
 #include "DataSeriesHelper.hxx"
+#include "StatisticsHelper.hxx"
 
 #include <com/sun/star/util/XModifyBroadcaster.hpp>
 #include <com/sun/star/frame/XStorable.hpp>
@@ -139,6 +140,11 @@
     bool bMayAddTrendline;
     bool bMayAddTrendlineEquation;
     bool bMayAddMeanValue;
+    bool bMayAddYErrorBars;
+
+    bool bMayDeleteTrendline;
+    bool bMayDeleteMeanValue;
+    bool bMayDeleteYErrorBars;
 };
 
 
@@ -152,7 +158,11 @@
         bMayMoveSeriesBackward( false ),
         bMayAddTrendline( false ),
         bMayAddTrendlineEquation( false ),
-        bMayAddMeanValue( false )
+        bMayAddMeanValue( false ),
+        bMayAddYErrorBars( false ),
+        bMayDeleteTrendline( false ),
+        bMayDeleteMeanValue( false ),
+        bMayDeleteYErrorBars( false )
 {}
 
 void ControllerState::update(
@@ -200,23 +210,40 @@
         bMayAddTrendline = false;
         bMayAddTrendlineEquation = false;
         bMayAddMeanValue = false;
+        bMayAddYErrorBars = false;
+        bMayDeleteTrendline = false;
+        bMayDeleteMeanValue = false;
+        bMayDeleteYErrorBars = false;
         if( bHasSelectedObject )
         {
             if( xGivenDataSeries.is())
             {
                 sal_Int32 nDimensionCount = DiagramHelper::getDimension( xDiagram );
+                uno::Reference< chart2::XChartType > xFirstChartType(
+                    DataSeriesHelper::getChartTypeOfSeries( xGivenDataSeries, xDiagram ));
+
+                // trend lines/mean value line
                 if( ChartTypeHelper::isSupportingRegressionProperties(
-                    DataSeriesHelper::getChartTypeOfSeries( xGivenDataSeries, xDiagram ),
-                    nDimensionCount ))
+                        xFirstChartType, nDimensionCount ))
                 {
                     uno::Reference< chart2::XRegressionCurveContainer > xRegCurveCnt(
                         xGivenDataSeries, uno::UNO_QUERY );
                     if( xRegCurveCnt.is())
                     {
-                        bMayAddTrendline = ! RegressionCurveHelper::getFirstCurveNotMeanValueLine( xRegCurveCnt ).is();
-                        bMayAddMeanValue = ! RegressionCurveHelper::hasMeanValueLine( xRegCurveCnt );
+                        bMayDeleteTrendline = RegressionCurveHelper::getFirstCurveNotMeanValueLine( xRegCurveCnt ).is();
+                        bMayDeleteMeanValue = RegressionCurveHelper::hasMeanValueLine( xRegCurveCnt );
+                        bMayAddTrendline = ! bMayDeleteTrendline;
+                        bMayAddMeanValue = ! bMayDeleteMeanValue;
                     }
                 }
+
+                // error bars
+                if( ChartTypeHelper::isSupportingStatisticProperties(
+                        xFirstChartType, nDimensionCount ))
+                {
+                    bMayDeleteYErrorBars = StatisticsHelper::hasErrorBars( xGivenDataSeries );
+                    bMayAddYErrorBars = ! bMayDeleteYErrorBars;
+                }
             }
 
             if( aObjectType == OBJECTTYPE_DATA_CURVE )
@@ -545,6 +572,11 @@
     m_aCommandAvailability[ C2U(".uno:InsertMeanValue")] = bIsWritable && bControllerStateIsValid && m_apControllerState->bMayAddMeanValue;
     m_aCommandAvailability[ C2U(".uno:InsertTrendline")] = bIsWritable && bControllerStateIsValid && m_apControllerState->bMayAddTrendline;
     m_aCommandAvailability[ C2U(".uno:InsertTrendlineEquation")] = bIsWritable && bControllerStateIsValid && m_apControllerState->bMayAddTrendlineEquation;
+    m_aCommandAvailability[ C2U(".uno:InsertYErrorbar")] = bIsWritable && bControllerStateIsValid && m_apControllerState->bMayAddYErrorBars;
+
+    m_aCommandAvailability[ C2U(".uno:DeleteTrendline")] = bIsWritable && bControllerStateIsValid && m_apControllerState->bMayDeleteTrendline;
+    m_aCommandAvailability[ C2U(".uno:DeleteMeanValue")] = bIsWritable && bControllerStateIsValid && m_apControllerState->bMayDeleteMeanValue;
+    m_aCommandAvailability[ C2U(".uno:DeleteYErrorbar")] = bIsWritable && bControllerStateIsValid && m_apControllerState->bMayDeleteYErrorBars;
 }
 
 bool ControllerCommandDispatch::commandAvailable( const OUString & rCommand )
--- chart2/source/controller/main/ObjectHierarchy.cxx	2007-11-23 12:55:14.000000000 +0100
+++ chart2/source/controller/main/ObjectHierarchy.cxx	2008-02-21 16:59:27.000000000 +0100
@@ -54,7 +54,7 @@
 #include <com/sun/star/chart2/XCoordinateSystemContainer.hpp>
 #include <com/sun/star/chart2/XChartTypeContainer.hpp>
 #include <com/sun/star/chart2/XDataSeriesContainer.hpp>
-#include <com/sun/star/chart2/ErrorBarStyle.hpp>
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 
 #include <com/sun/star/container/XIndexAccess.hpp>
 #include <com/sun/star/awt/Key.hpp>
@@ -397,9 +397,9 @@
                             (xSeriesProp->getPropertyValue( C2U("ErrorBarY")) >>= xErrorBarProp) &&
                             xErrorBarProp.is())
                         {
-                            chart2::ErrorBarStyle eStyle = chart2::ErrorBarStyle_NONE;
-                            if( ( xErrorBarProp->getPropertyValue( C2U("ErrorBarStyle")) >>= eStyle ) &&
-                                ( eStyle != chart2::ErrorBarStyle_NONE ) )
+                            sal_Int32 nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
+                            if( ( xErrorBarProp->getPropertyValue( C2U("ErrorBarStyle")) >>= nStyle ) &&
+                                ( nStyle != ::com::sun::star::chart::ErrorBarStyle::NONE ) )
                             {
                                 aSeriesSubContainer.push_back(
                                     ObjectIdentifier::createClassifiedIdentifierWithParent(
--- chart2/source/inc/chartview/ChartSfxItemIds.hxx	2008-02-18 17:00:22.000000000 +0100
+++ chart2/source/inc/chartview/ChartSfxItemIds.hxx	2008-02-21 16:59:27.000000000 +0100
@@ -128,9 +128,10 @@
 #define SCHATTR_STAT_BIGERROR               (SCHATTR_STAT_START + 3)
 #define SCHATTR_STAT_CONSTPLUS              (SCHATTR_STAT_START + 4)
 #define SCHATTR_STAT_CONSTMINUS             (SCHATTR_STAT_START + 5)
-#define SCHATTR_STAT_REGRESSTYPE            (SCHATTR_STAT_START + 6)
-#define SCHATTR_STAT_INDICATE               (SCHATTR_STAT_START + 7)
-#define SCHATTR_STAT_END                    SCHATTR_STAT_INDICATE
+#define SCHATTR_STAT_INDICATE               (SCHATTR_STAT_START + 6)
+#define SCHATTR_STAT_RANGE_POS              (SCHATTR_STAT_START + 7)
+#define SCHATTR_STAT_RANGE_NEG              (SCHATTR_STAT_START + 8)
+#define SCHATTR_STAT_END                    SCHATTR_STAT_RANGE_NEG
 
 #define SCHATTR_TEXT2_START                 ( SCHATTR_STAT_END + 1)
 #define SCHATTR_TEXT_DEGREES                ( SCHATTR_TEXT2_START   )
@@ -219,10 +220,11 @@
 #define SCHATTR_MISC_END                 SCHATTR_AXIS_FOR_ALL_SERIES
 
 // regression curve equation
-#define SCHATTR_REGRESSION_START        (SCHATTR_MISC_END + 1)
-#define SCHATTR_REGRESSION_SHOW_EQUATION SCHATTR_REGRESSION_START
-#define SCHATTR_REGRESSION_SHOW_COEFF   (SCHATTR_REGRESSION_START + 1)
-#define SCHATTR_REGRESSION_END           SCHATTR_REGRESSION_SHOW_COEFF
+#define SCHATTR_REGRESSION_START         (SCHATTR_MISC_END + 1)
+#define SCHATTR_REGRESSION_TYPE           SCHATTR_REGRESSION_START
+#define SCHATTR_REGRESSION_SHOW_EQUATION (SCHATTR_REGRESSION_START + 1)
+#define SCHATTR_REGRESSION_SHOW_COEFF    (SCHATTR_REGRESSION_START + 2)
+#define SCHATTR_REGRESSION_END            SCHATTR_REGRESSION_SHOW_COEFF
 
 #define SCHATTR_END                     SCHATTR_REGRESSION_END
 
--- chart2/source/inc/ErrorBar.hxx	2007-07-25 10:46:31.000000000 +0200
+++ chart2/source/inc/ErrorBar.hxx	2008-02-21 16:59:27.000000000 +0100
@@ -40,40 +40,29 @@
 #include "ServiceMacros.hxx"
 #include "ModifyListenerHelper.hxx"
 
-#ifndef _CPPUHELPER_IMPLBASE4_HXX_
-#include <cppuhelper/implbase4.hxx>
-#endif
-#ifndef _COMPHELPER_UNO3_HXX_
+#include <cppuhelper/implbase6.hxx>
 #include <comphelper/uno3.hxx>
-#endif
-
-#ifndef _COM_SUN_STAR_CHART2_XREGRESSIONCURVE_HPP_
-#include <com/sun/star/chart2/XRegressionCurve.hpp>
-#endif
 
-#ifndef _COM_SUN_STAR_UNO_XCOMPONENTCONTEXT_HPP_
 #include <com/sun/star/uno/XComponentContext.hpp>
-#endif
-#ifndef _COM_SUN_STAR_LANG_XSERVICEINFO_HPP_
 #include <com/sun/star/lang/XServiceInfo.hpp>
-#endif
-#ifndef _COM_SUN_STAR_LANG_XSERVICENAME_HPP_
 #include <com/sun/star/lang/XServiceName.hpp>
-#endif
-#ifndef _COM_SUN_STAR_UTIL_XCLONEABLE_HPP_
 #include <com/sun/star/util/XCloneable.hpp>
-#endif
+#include <com/sun/star/container/XChild.hpp>
+#include <com/sun/star/chart2/data/XDataSink.hpp>
+#include <com/sun/star/chart2/data/XDataSource.hpp>
 
 namespace chart
 {
 
 namespace impl
 {
-typedef ::cppu::WeakImplHelper4<
+typedef ::cppu::WeakImplHelper6<
         ::com::sun::star::lang::XServiceInfo,
         ::com::sun::star::util::XCloneable,
         ::com::sun::star::util::XModifyBroadcaster,
-        ::com::sun::star::util::XModifyListener >
+        ::com::sun::star::util::XModifyListener,
+        ::com::sun::star::chart2::data::XDataSource,
+        ::com::sun::star::chart2::data::XDataSink >
     ErrorBar_Base;
 }
 
@@ -134,6 +123,22 @@
         const ::com::sun::star::lang::EventObject& Source )
         throw (::com::sun::star::uno::RuntimeException);
 
+    // ____ XDataSink ____
+    virtual void SAL_CALL setData( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::chart2::data::XLabeledDataSequence > >& aData )
+        throw (::com::sun::star::uno::RuntimeException);
+
+    // ____ XDataSource ____
+    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::chart2::data::XLabeledDataSequence > > SAL_CALL getDataSequences()
+        throw (::com::sun::star::uno::RuntimeException);
+
+    // ____ XChild ____
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > SAL_CALL getParent()
+        throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL setParent(
+        const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Parent )
+        throw (::com::sun::star::lang::NoSupportException,
+               ::com::sun::star::uno::RuntimeException);
+
     // ____ OPropertySet ____
     virtual void firePropertyChangeEvent();
 
@@ -144,7 +149,12 @@
         ::com::sun::star::uno::XComponentContext >
                         m_xContext;
 
+    typedef ::std::vector< ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::data::XLabeledDataSequence > > tDataSequenceContainer;
+    tDataSequenceContainer m_aDataSequences;
+
     ::com::sun::star::uno::Reference< ::com::sun::star::util::XModifyListener > m_xModifyEventForwarder;
+    ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > m_xParent;
 };
 
 } //  namespace chart
--- chart2/source/inc/InternalDataProvider.hxx	2008-01-29 18:14:46.000000000 +0100
+++ chart2/source/inc/InternalDataProvider.hxx	2008-02-24 23:49:55.000000000 +0100
@@ -67,7 +67,7 @@
 #include "ServiceMacros.hxx"
 #endif
 
-#include "UncachedDataSequence.hxx"
+#include "CachedDataSequence.hxx"
 
 #include <map>
 #include <memory>
@@ -133,6 +133,8 @@
         throw (::com::sun::star::uno::RuntimeException);
     virtual void SAL_CALL deleteSequence( ::sal_Int32 nAtIndex )
         throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL appendSequence()
+        throw (::com::sun::star::uno::RuntimeException);
     virtual void SAL_CALL insertDataPointForAllSequences( ::sal_Int32 nAfterIndex )
         throw (::com::sun::star::uno::RuntimeException);
     virtual void SAL_CALL deleteDataPointForAllSequences( ::sal_Int32 nAtIndex )
@@ -223,6 +225,9 @@
     ::com::sun::star::uno::Reference<
             ::com::sun::star::chart2::data::XDataSequence >
         createDataSequenceAndAddToMap( const ::rtl::OUString & rRangeRepresentation );
+    ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::data::XDataSequence >
+        createErrorBarDataSequenceAndAddToMap( const ::rtl::OUString & rRangeRepresentation );
     void deleteMapReferences( const ::rtl::OUString & rRangeRepresentation );
     void adaptMapReferences(
         const ::rtl::OUString & rOldRangeRepresentation,
@@ -245,6 +250,11 @@
     mutable tSequenceMap m_aSequenceMap;
     mutable ::std::auto_ptr< impl::InternalData > m_apData;
     bool m_bDataInColumns;
+
+//     typedef ::std::map< ::rtl::OUString,
+//             ::com::sun::star::uno::Reference< ::com::sun::star::chart2::data::XDataSequence > >
+//         tHardRefSequenceMap;
+//     tHardRefSequenceMap m_aErrorBarSequences;
 };
 
 } //  namespace chart
--- chart2/source/inc/RangeHighlighter.hxx	2007-05-22 20:21:13.000000000 +0200
+++ chart2/source/inc/RangeHighlighter.hxx	2008-02-21 16:59:27.000000000 +0100
@@ -49,6 +49,9 @@
 #ifndef _COM_SUN_STAR_VIEW_XSELECTIONSUPPLIER_HPP_
 #include <com/sun/star/view/XSelectionSupplier.hpp>
 #endif
+#ifndef _COM_SUN_STAR_BEANS_XPROPERTYSET_HPP_
+#include <com/sun/star/beans/XPropertySet.hpp>
+#endif
 
 namespace com { namespace sun { namespace star {
 namespace chart2 {
@@ -114,6 +117,8 @@
     void fillRangesForDataSeries( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries > & xSeries );
     void fillRangesForCategories( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XAxis > & xAxis );
     void fillRangesForDataPoint( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > & xDataSeries, sal_Int32 nIndex );
+    void fillRangesForErrorBars( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > & xErrorBar,
+                                 const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries > & xDataSeries );
 
     ::com::sun::star::uno::Reference< ::com::sun::star::view::XSelectionSupplier >
         m_xSelectionSupplier;
--- chart2/source/inc/StatisticsHelper.hxx	2005-09-08 02:46:42.000000000 +0200
+++ chart2/source/inc/StatisticsHelper.hxx	2008-02-24 23:49:55.000000000 +0100
@@ -35,9 +35,11 @@
 #ifndef CHART2_STATISTICSHELPER_HXX
 #define CHART2_STATISTICSHELPER_HXX
 
-#ifndef _COM_SUN_STAR_UNO_SEQUENCE_HXX_
 #include <com/sun/star/uno/Sequence.hxx>
-#endif
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/chart2/data/XDataSource.hpp>
+#include <com/sun/star/chart2/data/XDataProvider.hpp>
+#include <com/sun/star/chart2/XDataSeries.hpp>
 
 namespace chart
 {
@@ -61,6 +63,72 @@
     // also called "Standard deviation of the mean (SDOM)"
     static double getStandardError( const ::com::sun::star::uno::Sequence< double > & rData );
 
+    static ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::data::XLabeledDataSequence >
+        getErrorLabeledDataSequenceFromDataSource(
+            const ::com::sun::star::uno::Reference<
+                ::com::sun::star::chart2::data::XDataSource > & xDataSource,
+            bool bPositiveValue,
+            bool bYError = true );
+
+    static ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::data::XDataSequence >
+        getErrorDataSequenceFromDataSource(
+            const ::com::sun::star::uno::Reference<
+                ::com::sun::star::chart2::data::XDataSource > & xDataSource,
+            bool bPositiveValue,
+            bool bYError = true );
+
+    static double getErrorFromDataSource(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::data::XDataSource > & xDataSource,
+        sal_Int32 nIndex,
+        bool bPositiveValue,
+        bool bYError = true );
+
+    static void setErrorDataSequence(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::data::XDataSource > & xDataSource,
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::data::XDataProvider > & xDataProvider,
+        const ::rtl::OUString & rNewRange,
+        bool bPositiveValue,
+        bool bYError = true,
+        ::rtl::OUString * pXMLRange = 0 );
+
+    /// @return the newly created or existing error bar object
+    static ::com::sun::star::uno::Reference<
+            ::com::sun::star::beans::XPropertySet >
+        addErrorBars(
+            const ::com::sun::star::uno::Reference<
+                ::com::sun::star::chart2::XDataSeries > & xDataSeries,
+            const ::com::sun::star::uno::Reference<
+                ::com::sun::star::uno::XComponentContext > & xContext,
+            sal_Int32 nStyle,
+            bool bYError = true );
+
+    static ::com::sun::star::uno::Reference<
+            ::com::sun::star::beans::XPropertySet >
+        getErrorBars(
+            const ::com::sun::star::uno::Reference<
+                ::com::sun::star::chart2::XDataSeries > & xDataSeries,
+            bool bYError = true );
+
+    static bool hasErrorBars(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::XDataSeries > & xDataSeries,
+        bool bYError = true );
+
+    static void removeErrorBars(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::XDataSeries > & xDataSeries,
+        bool bYError = true );
+
+    static bool usesErrorBarRanges(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::XDataSeries > & xDataSeries,
+        bool bYError = true );
+
 private:
     // not implemented
 	StatisticsHelper();
--- chart2/source/inc/Strings.hrc	2008-02-18 16:59:55.000000000 +0100
+++ chart2/source/inc/Strings.hrc	2008-02-21 16:59:27.000000000 +0100
@@ -38,8 +38,7 @@
 // this includes no link dependency
 #include <svtools/solar.hrc>
 
-//free 21 267
-//next is 270
+//next is 277
 
 //#define RID_APP_START 30000
 ////#define STR_NULL                            (RID_APP_START +  1)
@@ -180,7 +179,11 @@
 #define STR_DATA_ROLE_X                     (RID_APP_START + 242)
 #define STR_DATA_ROLE_Y                     (RID_APP_START + 243)
 #define STR_DATA_ROLE_X_ERROR               (RID_APP_START + 244)
+#define STR_DATA_ROLE_X_ERROR_POSITIVE      (RID_APP_START + 272)
+#define STR_DATA_ROLE_X_ERROR_NEGATIVE      (RID_APP_START + 273)
 #define STR_DATA_ROLE_Y_ERROR               (RID_APP_START + 245)
+#define STR_DATA_ROLE_Y_ERROR_POSITIVE      (RID_APP_START + 274)
+#define STR_DATA_ROLE_Y_ERROR_NEGATIVE      (RID_APP_START + 275)
 #define STR_DATA_ROLE_FIRST                 (RID_APP_START + 246)
 #define STR_DATA_ROLE_LAST                  (RID_APP_START + 247)
 #define STR_DATA_ROLE_MIN                   (RID_APP_START + 248)
@@ -193,6 +196,8 @@
 #define STR_DATA_SELECT_RANGE_FOR_SERIES    (RID_APP_START + 252)
 #define STR_DATA_SELECT_RANGE_FOR_CATEGORIES (RID_APP_START + 253)
 #define STR_DATA_SELECT_RANGE_FOR_DATALABELS (RID_APP_START + 195)
+#define STR_DATA_SELECT_RANGE_FOR_POSITIVE_ERRORBARS (RID_APP_START + 21)
+#define STR_DATA_SELECT_RANGE_FOR_NEGATIVE_ERRORBARS (RID_APP_START + 267)
 
 //-----------------------------------------------------------------------------
 //chart objects
@@ -281,6 +286,7 @@
 
 #define STR_PAGE_TRENDLINE_TYPE              (RID_APP_START + 89)
 #define STR_PAGE_YERROR_BARS                 (RID_APP_START + 206)
+#define STR_CONTROLTEXT_ERROR_BARS_FROM_DATA (RID_APP_START + 276)
 
 #define STR_DLG_CHART_WIZARD                 (RID_APP_START + 228)
 #define STR_PAGE_CHART_ELEMENTS              (RID_APP_START + 229)
--- chart2/source/inc/UncachedDataSequence.hxx	2007-05-22 20:23:37.000000000 +0200
+++ chart2/source/inc/UncachedDataSequence.hxx	2008-02-21 16:59:27.000000000 +0100
@@ -227,6 +227,7 @@
     ::rtl::OUString                                 m_sRole;
     sal_Bool                                        m_bIsHidden;
     ::com::sun::star::uno::Sequence< sal_Int32 >    m_aHiddenValues;
+    ::rtl::OUString                                 m_aXMLRange;
     // </properties>
 
     /** This method registers all properties.  It should be called by all
--- chart2/source/model/main/DataPoint.cxx	2008-01-14 15:00:19.000000000 +0100
+++ chart2/source/model/main/DataPoint.cxx	2008-02-21 16:59:28.000000000 +0100
@@ -104,20 +104,23 @@
 
 DataPoint::DataPoint() :
         ::property::OPropertySet( m_aMutex ),
-        m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder())
+        m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder()),
+        m_bNoParentPropAllowed( false )
 {}
 
 DataPoint::DataPoint( const uno::Reference< beans::XPropertySet > & rParentProperties ) :
         ::property::OPropertySet( m_aMutex ),
         m_xParentProperties( rParentProperties ),
-        m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder())
+        m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder()),
+        m_bNoParentPropAllowed( false )
 {}
 
 DataPoint::DataPoint( const DataPoint & rOther ) :
         MutexContainer(),
         impl::DataPoint_Base(),
         ::property::OPropertySet( rOther, m_aMutex ),
-        m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder())
+        m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder()),
+        m_bNoParentPropAllowed( true )
 {
     // m_xParentProperties has to be set from outside, like in the method
     // DataSeries::createClone
@@ -135,6 +138,8 @@
     if( ( aValue >>= xPropertySet )
         && xPropertySet.is())
         ModifyListenerHelper::addListener( xPropertySet, m_xModifyEventForwarder );
+
+    m_bNoParentPropAllowed = false;
 }
 
 DataPoint::~DataPoint()
@@ -191,7 +196,7 @@
     uno::Reference< beans::XFastPropertySet > xFast( m_xParentProperties, uno::UNO_QUERY );
     if( !xFast.is())
     {
-        OSL_ENSURE( false, "data point needs a parent property set to provide values correctly" );
+        OSL_ENSURE( m_bNoParentPropAllowed, "data point needs a parent property set to provide values correctly" );
         return uno::Any();
     }
 
--- chart2/source/model/main/DataPoint.hxx	2007-09-18 17:00:06.000000000 +0200
+++ chart2/source/model/main/DataPoint.hxx	2008-02-21 16:59:28.000000000 +0100
@@ -156,6 +156,7 @@
         ::com::sun::star::beans::XPropertySet >   m_xParentProperties;
 
     ::com::sun::star::uno::Reference< ::com::sun::star::util::XModifyListener > m_xModifyEventForwarder;
+    bool m_bNoParentPropAllowed;
 };
 
 } //  namespace chart
--- chart2/source/model/main/DataSeries.cxx	2008-01-14 15:00:32.000000000 +0100
+++ chart2/source/model/main/DataSeries.cxx	2008-02-21 16:59:28.000000000 +0100
@@ -88,6 +88,15 @@
     return aPropSeq;
 }
 
+void lcl_SetParent(
+    const uno::Reference< uno::XInterface > & xChildInterface,
+    const uno::Reference< uno::XInterface > & xParentInterface )
+{
+    uno::Reference< container::XChild > xChild( xChildInterface, uno::UNO_QUERY );
+    if( xChild.is())
+        xChild->setParent( xParentInterface );
+}
+
 typedef ::std::map< sal_Int32, ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > >
     lcl_tDataPointMap;
 
@@ -107,10 +116,7 @@
                 xPoint.set( xCloneable->createClone(), uno::UNO_QUERY );
                 if( xPoint.is())
                 {
-                    Reference< container::XChild > xChild( xPoint, uno::UNO_QUERY );
-                    if( xChild.is())
-                        xChild->setParent( xSeries );
-
+                    lcl_SetParent( xPoint, xSeries );
                     rDestination.insert( lcl_tDataPointMap::value_type( (*aIt).first, xPoint ));
                 }
             }
@@ -180,13 +186,27 @@
     if( ! rOther.m_aDataSequences.empty())
         EventListenerHelper::addListenerToAllElements( m_aDataSequences, this );
 
+    Reference< uno::XInterface > xThisInterface( static_cast< ::cppu::OWeakObject * >( this ));
     if( ! rOther.m_aAttributedDataPoints.empty())
     {
         lcl_CloneAttributedDataPoints(
-            rOther.m_aAttributedDataPoints, m_aAttributedDataPoints,
-            Reference< uno::XInterface >( static_cast< ::cppu::OWeakObject * >( this )));
+            rOther.m_aAttributedDataPoints, m_aAttributedDataPoints, xThisInterface );
         ModifyListenerHelper::addListenerToAllMapElements( m_aAttributedDataPoints, m_xModifyEventForwarder );
     }
+
+    // add as parent to error bars
+    Reference< beans::XPropertySet > xPropertySet;
+    uno::Any aValue;
+
+    getFastPropertyValue( aValue, DataPointProperties::PROP_DATAPOINT_ERROR_BAR_X );
+    if( ( aValue >>= xPropertySet )
+        && xPropertySet.is())
+        lcl_SetParent( xPropertySet, xThisInterface );
+
+    getFastPropertyValue( aValue, DataPointProperties::PROP_DATAPOINT_ERROR_BAR_Y );
+    if( ( aValue >>= xPropertySet )
+        && xPropertySet.is())
+        lcl_SetParent( xPropertySet, xThisInterface );
 }
 
 DataSeries::~DataSeries()
--- chart2/source/model/main/ImplChartModel.cxx	2008-01-14 15:01:28.000000000 +0100
+++ chart2/source/model/main/ImplChartModel.cxx	2008-02-21 16:59:28.000000000 +0100
@@ -36,7 +36,6 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_chart2.hxx"
 #include "ImplChartModel.hxx"
-#include "CachedDataSequence.hxx"
 #include "DataSeries.hxx"
 #include "StyleFamilies.hxx"
 #include "StyleFamily.hxx"
--- chart2/source/tools/DataSourceHelper.cxx	2007-07-25 10:56:38.000000000 +0200
+++ chart2/source/tools/DataSourceHelper.cxx	2008-02-21 16:59:28.000000000 +0100
@@ -46,19 +46,12 @@
 #include "ControllerLockGuard.hxx"
 #include "PropertyHelper.hxx"
 
-#ifndef _COM_SUN_STAR_CHART2_XCHARTDOCUMENT_HPP_
 #include <com/sun/star/chart2/XChartDocument.hpp>
-#endif
-#ifndef _COM_SUN_STAR_CHART2_DATA_XDATASOURCE_HPP_
 #include <com/sun/star/chart2/data/XDataSource.hpp>
-#endif
-#ifndef _COM_SUN_STAR_CHART2_DATA_XLABELEDDATASEQUENCE_HPP_
 #include <com/sun/star/chart2/data/XLabeledDataSequence.hpp>
-#endif
 
-#ifndef _COM_SUN_STAR_CHART_CHARTDATAROWSOURCE_HPP_
 #include <com/sun/star/chart/ChartDataRowSource.hpp>
-#endif
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 
 //.............................................................................
 namespace chart
@@ -85,6 +78,48 @@
         rOutResult.push_back( xSeq->getSourceRangeRepresentation());
 }
 
+void lcl_addDataSourceRanges(
+    ::std::vector< ::rtl::OUString > & rOutResult,
+    const uno::Reference< data::XDataSource > & xDataSource )
+{
+    if( xDataSource.is() )
+    {
+        uno::Sequence< uno::Reference< data::XLabeledDataSequence > > aDataSequences( xDataSource->getDataSequences() );
+        for( sal_Int32 i=0; i<aDataSequences.getLength(); ++i)
+            lcl_addRanges( rOutResult, aDataSequences[i] );
+    }
+}
+
+void lcl_addErrorBarRanges(
+    ::std::vector< ::rtl::OUString > & rOutResult,
+    const uno::Reference< XDataSeries > & xDataSeries )
+{
+    uno::Reference< beans::XPropertySet > xSeriesProp( xDataSeries, uno::UNO_QUERY );
+    if( !xSeriesProp.is())
+        return;
+
+    try
+    {
+        uno::Reference< beans::XPropertySet > xErrorBarProp;
+        if( ( xSeriesProp->getPropertyValue( C2U("ErrorBarY")) >>= xErrorBarProp ) &&
+            xErrorBarProp.is())
+        {
+            sal_Int32 eStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
+            if( ( xErrorBarProp->getPropertyValue( C2U("ErrorBarStyle")) >>= eStyle ) &&
+                eStyle == ::com::sun::star::chart::ErrorBarStyle::FROM_DATA )
+            {
+                uno::Reference< data::XDataSource > xErrorBarDataSource( xErrorBarProp, uno::UNO_QUERY );
+                if( xErrorBarDataSource.is() )
+                    lcl_addDataSourceRanges( rOutResult, xErrorBarDataSource );
+            }
+        }
+    }
+    catch( const uno::Exception & ex )
+    {
+        ASSERT_EXCEPTION( ex );
+    }
+}
+
 struct lcl_migrateData : public ::std::unary_function<
         Reference< chart2::data::XLabeledDataSequence >, void >
 {
@@ -256,11 +291,8 @@
                  ; aSeriesIt != aSeriesVector.end(); ++aSeriesIt )
         {
             uno::Reference< data::XDataSource > xDataSource( *aSeriesIt, uno::UNO_QUERY );
-            if( !xDataSource.is() )
-                continue;
-            uno::Sequence< uno::Reference< data::XLabeledDataSequence > > aDataSequences( xDataSource->getDataSequences() );
-            for( sal_Int32 i=0; i<aDataSequences.getLength(); ++i)
-                lcl_addRanges( aResult, aDataSequences[i] );
+            lcl_addDataSourceRanges( aResult, xDataSource );
+            lcl_addErrorBarRanges( aResult, *aSeriesIt );
         }
     }
 
--- chart2/source/tools/DiagramHelper.cxx	2008-01-14 15:03:32.000000000 +0100
+++ chart2/source/tools/DiagramHelper.cxx	2008-02-21 16:59:28.000000000 +0100
@@ -41,7 +41,6 @@
 #include "macros.hxx"
 #include "DataSeriesHelper.hxx"
 #include "AxisHelper.hxx"
-#include "CachedDataSequence.hxx"
 #include "ContainerHelper.hxx"
 #include "ChartTypeHelper.hxx"
 #include "CommonConverters.hxx"
--- chart2/source/tools/ErrorBar.cxx	2008-01-14 15:03:44.000000000 +0100
+++ chart2/source/tools/ErrorBar.cxx	2008-02-21 16:59:28.000000000 +0100
@@ -39,23 +39,15 @@
 #include "macros.hxx"
 #include "LineProperties.hxx"
 #include "ContainerHelper.hxx"
-
-#ifndef CHART_PROPERTYHELPER_HXX
+#include "EventListenerHelper.hxx"
 #include "PropertyHelper.hxx"
-#endif
-#ifndef _COM_SUN_STAR_BEANS_PROPERTYATTRIBUTE_HPP_
+#include "CloneHelper.hxx"
+
 #include <com/sun/star/beans/PropertyAttribute.hpp>
-#endif
-#ifndef _COM_SUN_STAR_CHART2_ERRORBARSTYLE_HPP_
-#include <com/sun/star/chart2/ErrorBarStyle.hpp>
-#endif
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 
-#ifndef INCLUDED_RTL_MATH_HXX
 #include <rtl/math.hxx>
-#endif
-#ifndef _RTL_USTRBUF_HXX_
 #include <rtl/ustrbuf.hxx>
-#endif
 
 using namespace ::com::sun::star;
 
@@ -85,7 +77,7 @@
     rOutProperties.push_back(
         Property( C2U( "ErrorBarStyle" ),
                   PROP_ERROR_BAR_STYLE,
-                  ::getCppuType( reinterpret_cast< const chart2::ErrorBarStyle * >(0)),
+                  ::getCppuType( reinterpret_cast< sal_Int32 * >(0)),
                   beans::PropertyAttribute::BOUND
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
 
@@ -126,7 +118,7 @@
 void lcl_AddDefaultsToMap(
     ::chart::tPropertyValueMap & rOutMap )
 {
-    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_ERROR_BAR_STYLE, chart2::ErrorBarStyle_NONE );
+    ::chart::PropertyHelper::setPropertyValueDefault( rOutMap, PROP_ERROR_BAR_STYLE, ::com::sun::star::chart::ErrorBarStyle::NONE );
     ::chart::PropertyHelper::setPropertyValueDefault< double >( rOutMap, PROP_ERROR_BAR_POS_ERROR, 0.0 );
     ::chart::PropertyHelper::setPropertyValueDefault< double >( rOutMap, PROP_ERROR_BAR_NEG_ERROR, 0.0 );
     ::chart::PropertyHelper::setPropertyValueDefault< double >( rOutMap, PROP_ERROR_BAR_WEIGHT, 1.0 );
@@ -167,6 +159,13 @@
     return aArrayHelper;
 }
 
+bool lcl_isInternalData( const uno::Reference< chart2::data::XLabeledDataSequence > & xLSeq )
+{
+    uno::Reference< lang::XServiceInfo > xServiceInfo( xLSeq, uno::UNO_QUERY );
+    return ( xServiceInfo.is() && xServiceInfo->getImplementationName().equalsAsciiL(
+                 RTL_CONSTASCII_STRINGPARAM("com.sun.star.comp.chart2.LabeledDataSequence")));
+}
+
 } // anonymous namespace
 
 namespace chart
@@ -185,7 +184,17 @@
         ::property::OPropertySet( rOther, m_aMutex ),
     m_xContext( rOther.m_xContext ),
     m_xModifyEventForwarder( new ModifyListenerHelper::ModifyEventForwarder())
-{}
+{
+    if( ! rOther.m_aDataSequences.empty())
+    {
+        if( lcl_isInternalData( rOther.m_aDataSequences.front()))
+            CloneHelper::CloneRefVector< tDataSequenceContainer::value_type >(
+                rOther.m_aDataSequences, m_aDataSequences );
+        else
+            m_aDataSequences = rOther.m_aDataSequences;
+        ModifyListenerHelper::addListenerToAllElements( m_aDataSequences, m_xModifyEventForwarder );
+    }
+}
 
 ErrorBar::~ErrorBar()
 {}
@@ -291,6 +300,39 @@
     // nothing
 }
 
+// ____ XDataSink ____
+void SAL_CALL ErrorBar::setData( const uno::Sequence< uno::Reference< chart2::data::XLabeledDataSequence > >& aData )
+    throw (uno::RuntimeException)
+{
+    ModifyListenerHelper::removeListenerFromAllElements( m_aDataSequences, m_xModifyEventForwarder );
+    EventListenerHelper::removeListenerFromAllElements( m_aDataSequences, this );
+    m_aDataSequences = ContainerHelper::SequenceToVector( aData );
+    EventListenerHelper::addListenerToAllElements( m_aDataSequences, this );
+    ModifyListenerHelper::addListenerToAllElements( m_aDataSequences, m_xModifyEventForwarder );
+}
+
+// ____ XDataSource ____
+uno::Sequence< uno::Reference< chart2::data::XLabeledDataSequence > > SAL_CALL ErrorBar::getDataSequences()
+    throw (uno::RuntimeException)
+{
+    return ContainerHelper::ContainerToSequence( m_aDataSequences );
+}
+
+// ____ XChild ____
+uno::Reference< uno::XInterface > SAL_CALL ErrorBar::getParent()
+    throw (uno::RuntimeException)
+{
+    return m_xParent;
+}
+
+void SAL_CALL ErrorBar::setParent(
+    const uno::Reference< uno::XInterface >& Parent )
+    throw (lang::NoSupportException,
+           uno::RuntimeException)
+{
+    m_xParent.set( Parent );
+}
+
 // ____ OPropertySet ____
 void ErrorBar::firePropertyChangeEvent()
 {
--- chart2/source/tools/InternalDataProvider.cxx	2007-07-25 10:57:46.000000000 +0200
+++ chart2/source/tools/InternalDataProvider.cxx	2008-02-24 23:49:55.000000000 +0100
@@ -76,6 +76,7 @@
 #endif
 
 #include <vector>
+#include <algorithm>
 
 using namespace ::com::sun::star;
 using namespace ::std;
@@ -144,6 +145,8 @@
 
     /// @return the index of the newly appended column
     sal_Int32 appendColumn();
+    /// @return the index of the newly appended row
+    sal_Int32 appendRow();
 
     sal_Int32 getRowCount() const;
     sal_Int32 getColumnCount() const;
@@ -483,6 +486,12 @@
     return getColumnCount() - 1;
 }
 
+sal_Int32 InternalData::appendRow()
+{
+    insertRow( getRowCount() - 1 );
+    return getRowCount() - 1;
+}
+
 void InternalData::insertRow( sal_Int32 nAfterIndex )
 {
     // note: -1 is allowed, as we insert after the given index
@@ -1216,11 +1225,21 @@
         sal_Int32 nIndex = aRangeRepresentation.copy( lcl_aLabelRangePrefix.getLength()).toInt32();
         return createDataSequenceAndAddToMap( lcl_aLabelRangePrefix + OUString::valueOf( nIndex ));
     }
-    // else
+    else if( aRangeRepresentation.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM( "last" )))
+    {
+        sal_Int32 nIndex = (m_bDataInColumns
+                            ? getInternalData().getColumnCount()
+                            : getInternalData().getRowCount()) - 1;
+        return createDataSequenceAndAddToMap( OUString::valueOf( nIndex ));
+    }
+    else if( aRangeRepresentation.getLength())
+    {
+        // data
+        sal_Int32 nIndex = aRangeRepresentation.toInt32();
+        return createDataSequenceAndAddToMap( OUString::valueOf( nIndex ));
+    }
 
-    // data
-    sal_Int32 nIndex = aRangeRepresentation.toInt32();
-    return createDataSequenceAndAddToMap( OUString::valueOf( nIndex ));
+    return Reference< chart2::data::XDataSequence >();
 }
 
 Reference< sheet::XRangeSelection > SAL_CALL InternalDataProvider::getRangeSelection()
@@ -1382,6 +1401,15 @@
     }
 }
 
+void SAL_CALL InternalDataProvider::appendSequence()
+    throw (uno::RuntimeException)
+{
+    if( m_bDataInColumns )
+        getInternalData().appendColumn();
+    else
+        getInternalData().appendRow();
+}
+
 void SAL_CALL InternalDataProvider::insertDataPointForAllSequences( ::sal_Int32 nAfterIndex )
     throw (uno::RuntimeException)
 {
--- chart2/source/tools/RangeHighlighter.cxx	2007-07-25 10:59:41.000000000 +0200
+++ chart2/source/tools/RangeHighlighter.cxx	2008-02-21 16:59:28.000000000 +0100
@@ -44,9 +44,8 @@
 #include "macros.hxx"
 #include "ObjectIdentifier.hxx"
 
-#ifndef _COM_SUN_STAR_CHART2_XDATASERIES_HPP_
 #include <com/sun/star/chart2/XDataSeries.hpp>
-#endif
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 
 #define PREFERED_DEFAULT_COLOR 0x0000ff
 
@@ -136,7 +135,6 @@
 
                 ObjectType eObjectType = ObjectIdentifier::getObjectType( aCID );
                 sal_Int32 nIndex = ObjectIdentifier::getIndexFromParticleOrCID( aCID );
-                Reference< uno::XInterface > xSelectedObject;
                 Reference< chart2::XDataSeries > xDataSeries( ObjectIdentifier::getDataSeriesForCID( aCID, xChartModel ) );
                 if( OBJECTTYPE_LEGEND_ENTRY == eObjectType )
                 {
@@ -153,6 +151,13 @@
                     fillRangesForDataPoint( xDataSeries, nIndex );
                     return;
                 }
+                else if( OBJECTTYPE_DATA_ERRORS == eObjectType )
+                {
+                    // select error bar ranges, or data series, if the style is
+                    // not set to FROM_DATA
+                    fillRangesForErrorBars( ObjectIdentifier::getObjectPropertySet( aCID, xChartModel ), xDataSeries );
+                    return;
+                }
                 else if( xDataSeries.is() )
                 {
                     // Data Series
@@ -224,6 +229,40 @@
                         nPreferredColor );
 }
 
+void RangeHighlighter::fillRangesForErrorBars(
+    const uno::Reference< beans::XPropertySet > & xErrorBar,
+    const uno::Reference< chart2::XDataSeries > & xSeries )
+{
+    // only show error bar ranges, if the style is set to FROM_DATA
+    bool bUsesRangesAsErrorBars = false;
+    try
+    {
+        sal_Int32 nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
+        bUsesRangesAsErrorBars =
+            ( xErrorBar.is() &&
+              (xErrorBar->getPropertyValue( C2U("ErrorBarStyle")) >>= nStyle) &&
+              nStyle == ::com::sun::star::chart::ErrorBarStyle::FROM_DATA );
+    }
+    catch( const uno::Exception & ex )
+    {
+        ASSERT_EXCEPTION( ex );
+    }
+
+    if( bUsesRangesAsErrorBars )
+    {
+        sal_Int32 nPreferredColor = PREFERED_DEFAULT_COLOR;
+        Reference< chart2::data::XDataSource > xSource( xErrorBar, uno::UNO_QUERY );
+        if( xSource.is())
+            lcl_fillRanges( m_aSelectedRanges,
+                            ::chart::DataSourceHelper::getRangesFromDataSource( xSource ),
+                            nPreferredColor );
+    }
+    else
+    {
+        fillRangesForDataSeries( xSeries );
+    }
+}
+
 void RangeHighlighter::fillRangesForCategories( const Reference< chart2::XAxis > & xAxis )
 {
     if( ! xAxis.is())
--- chart2/source/tools/StatisticsHelper.cxx	2006-09-17 15:29:54.000000000 +0200
+++ chart2/source/tools/StatisticsHelper.cxx	2008-02-24 23:49:55.000000000 +0100
@@ -36,12 +36,25 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_chart2.hxx"
 #include "StatisticsHelper.hxx"
+#include "DataSeriesHelper.hxx"
+#include "ErrorBar.hxx"
+#include "macros.hxx"
 
-#ifndef INCLUDED_RTL_MATH_HXX
 #include <rtl/math.hxx>
-#endif
+#include <rtl/ustrbuf.hxx>
+#include <comphelper/processfactory.hxx>
+
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+#include <com/sun/star/chart2/data/XLabeledDataSequence.hpp>
+#include <com/sun/star/chart2/data/XNumericalDataSequence.hpp>
+#include <com/sun/star/chart2/data/XDataSink.hpp>
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 
 using ::com::sun::star::uno::Sequence;
+using ::com::sun::star::uno::Reference;
+using ::rtl::OUString;
+using ::rtl::OUStringBuffer;
+using namespace ::com::sun::star;
 
 namespace
 {
@@ -82,6 +95,95 @@
     return fResult;
 }
 
+Reference< chart2::data::XLabeledDataSequence > lcl_getErrorBarLabeledSequence(
+    const Reference< chart2::data::XDataSource > & xDataSource,
+    bool bPositiveValue, bool bYError,
+    OUString & rOutRoleNameUsed )
+{
+    OUStringBuffer aRole( C2U("error-bars-"));
+    if( bYError )
+        aRole.append( sal_Unicode( 'y' ));
+    else
+        aRole.append( sal_Unicode( 'x' ));
+
+    OUString aPlainRole = aRole.makeStringAndClear();
+    aRole.append( aPlainRole );
+    aRole.append( sal_Unicode( '-' ));
+
+    if( bPositiveValue )
+        aRole = aRole.appendAscii( "positive" );
+    else
+        aRole = aRole.appendAscii( "negative" );
+
+    OUString aLongRole = aRole.makeStringAndClear();
+    Reference< chart2::data::XLabeledDataSequence > xLSeq(
+        ::chart::DataSeriesHelper::getDataSequenceByRole( xDataSource, aLongRole ));
+    // try role without "-negative" or "-positive" postfix
+    if( xLSeq.is())
+        rOutRoleNameUsed = aLongRole;
+    else
+    {
+        xLSeq.set( ::chart::DataSeriesHelper::getDataSequenceByRole( xDataSource, aPlainRole ));
+        if( xLSeq.is())
+            rOutRoleNameUsed = aPlainRole;
+        else
+            rOutRoleNameUsed = aLongRole;
+    }
+
+    return xLSeq;
+}
+
+void lcl_setRole(
+    const Reference< chart2::data::XDataSequence > & xNewSequence,
+    const OUString & rRole )
+{
+    Reference< beans::XPropertySet > xSeqProp( xNewSequence, uno::UNO_QUERY );
+    if( xSeqProp.is())
+        xSeqProp->setPropertyValue( C2U("Role"), uno::makeAny( rRole ));
+}
+
+void lcl_addSequenceToDataSource(
+    const Reference< chart2::data::XDataSource > & xDataSource,
+    const Reference< chart2::data::XDataSequence > & xNewSequence,
+    const OUString & rRole )
+{
+    Reference< chart2::data::XDataSink > xSink( xDataSource, uno::UNO_QUERY );
+    Reference< lang::XMultiServiceFactory > xFact( comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
+    if( ! ( xFact.is() && xSink.is() ))
+        return;
+
+    Reference< chart2::data::XLabeledDataSequence > xLSeq(
+        xFact->createInstance( C2U("com.sun.star.chart2.data.LabeledDataSequence")), uno::UNO_QUERY );
+    if( xLSeq.is())
+    {
+        lcl_setRole( xNewSequence, rRole );
+        xLSeq->setValues( xNewSequence );
+        Sequence< Reference< chart2::data::XLabeledDataSequence > > aSequences(
+            xDataSource->getDataSequences());
+        aSequences.realloc( aSequences.getLength() + 1 );
+        aSequences[ aSequences.getLength() - 1 ] = xLSeq;
+        xSink->setData( aSequences );
+    }
+}
+
+void lcl_setXMLRangePropertyAtDataSequence(
+    const Reference< chart2::data::XDataSequence > & xDataSequence,
+    const OUString & rXMLRange )
+{
+    try
+    {
+        const OUString aXMLRangePropName( C2U( "CachedXMLRange" ));
+        Reference< beans::XPropertySet > xProp( xDataSequence, uno::UNO_QUERY_THROW );
+        Reference< beans::XPropertySetInfo > xInfo( xProp->getPropertySetInfo());
+        if( xInfo.is() && xInfo->hasPropertyByName( aXMLRangePropName ))
+            xProp->setPropertyValue( aXMLRangePropName, uno::makeAny( rXMLRange ));
+    }
+    catch( const uno::Exception & ex )
+    {
+        ASSERT_EXCEPTION( ex );
+    }
+}
+
 } // anonymous namespace
 
 namespace chart
@@ -127,5 +229,183 @@
     return fResult;
 }
 
+// static
+Reference< chart2::data::XLabeledDataSequence > StatisticsHelper::getErrorLabeledDataSequenceFromDataSource(
+    const Reference< chart2::data::XDataSource > & xDataSource,
+    bool bPositiveValue,
+    bool bYError /* = true */ )
+{
+    Reference< chart2::data::XLabeledDataSequence > xResult;
+    if( !xDataSource.is())
+        return xResult;
+
+    OUString aRole;
+    Reference< chart2::data::XLabeledDataSequence > xLSeq(
+        lcl_getErrorBarLabeledSequence( xDataSource, bPositiveValue, bYError, aRole ));
+    if( xLSeq.is())
+        xResult.set( xLSeq );
+
+    return xResult;
+}
+
+// static
+Reference< chart2::data::XDataSequence > StatisticsHelper::getErrorDataSequenceFromDataSource(
+    const Reference< chart2::data::XDataSource > & xDataSource,
+    bool bPositiveValue,
+    bool bYError /* = true */ )
+{
+    Reference< chart2::data::XLabeledDataSequence > xLSeq(
+        StatisticsHelper::getErrorLabeledDataSequenceFromDataSource(
+            xDataSource, bPositiveValue,
+            bYError ));
+    if( !xLSeq.is())
+        return Reference< chart2::data::XDataSequence >();
+
+    return xLSeq->getValues();
+}
+
+// static
+double StatisticsHelper::getErrorFromDataSource(
+    const Reference< chart2::data::XDataSource > & xDataSource,
+    sal_Int32 nIndex,
+    bool bPositiveValue,
+    bool bYError /* = true */ )
+{
+    double fResult = 0.0;
+    ::rtl::math::setNan( & fResult );
+
+    Reference< chart2::data::XDataSequence > xValues(
+        StatisticsHelper::getErrorDataSequenceFromDataSource( xDataSource, bPositiveValue, bYError ));
+
+    Reference< chart2::data::XNumericalDataSequence > xNumValues( xValues, uno::UNO_QUERY );
+    if( xNumValues.is())
+    {
+        Sequence< double > aData( xNumValues->getNumericalData());
+        if( nIndex < aData.getLength())
+            fResult = aData[nIndex];
+    }
+    else if( xValues.is())
+    {
+        Sequence< uno::Any > aData( xValues->getData());
+        if( nIndex < aData.getLength())
+            aData[nIndex] >>= fResult;
+    }
+
+    return fResult;
+}
+
+// static
+void StatisticsHelper::setErrorDataSequence(
+    const Reference< chart2::data::XDataSource > & xDataSource,
+    const Reference< chart2::data::XDataProvider > & xDataProvider,
+    const OUString & rNewRange,
+    bool bPositiveValue,
+    bool bYError /* = true */,
+    OUString * pXMLRange /* = 0 */ )
+{
+    Reference< chart2::data::XDataSink > xDataSink( xDataSource, uno::UNO_QUERY );
+    if( ! ( xDataSink.is() && xDataProvider.is()))
+        return;
+
+    OUString aRole;
+    Reference< chart2::data::XLabeledDataSequence > xLSeq(
+        lcl_getErrorBarLabeledSequence( xDataSource, bPositiveValue, bYError, aRole ));
+    Reference< chart2::data::XDataSequence > xNewSequence(
+        xDataProvider->createDataSequenceByRangeRepresentation( rNewRange ));
+    if( xNewSequence.is())
+    {
+        if( pXMLRange )
+            lcl_setXMLRangePropertyAtDataSequence( xNewSequence, *pXMLRange );
+        if( xLSeq.is())
+        {
+            lcl_setRole( xNewSequence, aRole );
+            xLSeq->setValues( xNewSequence );
+        }
+        else
+            lcl_addSequenceToDataSource( xDataSource, xNewSequence, aRole );
+    }
+}
+
+// static
+Reference< beans::XPropertySet > StatisticsHelper::addErrorBars(
+    const Reference< chart2::XDataSeries > & xDataSeries,
+    const Reference< uno::XComponentContext > & xContext,
+    sal_Int32 nStyle,
+    bool bYError /* = true */ )
+{
+    Reference< beans::XPropertySet > xErrorBar;
+    Reference< beans::XPropertySet > xSeriesProp( xDataSeries, uno::UNO_QUERY );
+    if( !xSeriesProp.is())
+        return xErrorBar;
+
+    const OUString aPropName( bYError ? C2U("ErrorBarY") : C2U("ErrorBarX"));
+    if( !( xSeriesProp->getPropertyValue( aPropName ) >>= xErrorBar ) ||
+        !xErrorBar.is())
+    {
+        xErrorBar.set( new ErrorBar( xContext ));
+    }
+
+    OSL_ASSERT( xErrorBar.is());
+    if( xErrorBar.is())
+    {
+        xErrorBar->setPropertyValue( C2U("ErrorBarStyle"), uno::makeAny( nStyle ));
+    }
+
+    xSeriesProp->setPropertyValue( aPropName, uno::makeAny( xErrorBar ));
+
+    return xErrorBar;
+}
+
+// static
+Reference< beans::XPropertySet > StatisticsHelper::getErrorBars(
+    const Reference< chart2::XDataSeries > & xDataSeries,
+    bool bYError /* = true */ )
+{
+    Reference< beans::XPropertySet > xSeriesProp( xDataSeries, uno::UNO_QUERY );
+    Reference< beans::XPropertySet > xErrorBar;
+    const OUString aPropName( bYError ? C2U("ErrorBarY") : C2U("ErrorBarX"));
+
+    if ( xSeriesProp.is())
+        xSeriesProp->getPropertyValue( aPropName ) >>= xErrorBar;
+
+    return xErrorBar;
+}
+
+// static
+bool StatisticsHelper::hasErrorBars(
+    const Reference< chart2::XDataSeries > & xDataSeries,
+    bool bYError /* = true */ )
+{
+    Reference< beans::XPropertySet > xErrorBar( getErrorBars( xDataSeries, bYError ));
+    sal_Int32 nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
+
+    return ( xErrorBar.is() &&
+             ( xErrorBar->getPropertyValue( C2U("ErrorBarStyle")) >>= nStyle ) &&
+             nStyle != ::com::sun::star::chart::ErrorBarStyle::NONE );
+}
+
+// static
+void StatisticsHelper::removeErrorBars(
+    const Reference< chart2::XDataSeries > & xDataSeries,
+    bool bYError /* = true  */ )
+{
+    Reference< beans::XPropertySet > xErrorBar( getErrorBars( xDataSeries, bYError ));
+    if ( xErrorBar.is())
+        xErrorBar->setPropertyValue( C2U("ErrorBarStyle"), uno::makeAny(
+                                         ::com::sun::star::chart::ErrorBarStyle::NONE ));
+}
+
+// static
+bool StatisticsHelper::usesErrorBarRanges(
+    const Reference< chart2::XDataSeries > & xDataSeries,
+    bool bYError /* = true */ )
+{
+    Reference< beans::XPropertySet > xErrorBar( getErrorBars( xDataSeries, bYError ));
+    sal_Int32 nStyle = ::com::sun::star::chart::ErrorBarStyle::NONE;
+
+    return ( xErrorBar.is() &&
+             ( xErrorBar->getPropertyValue( C2U("ErrorBarStyle")) >>= nStyle ) &&
+             nStyle == ::com::sun::star::chart::ErrorBarStyle::FROM_DATA );
+}
 
 } //  namespace chart
--- chart2/source/tools/UncachedDataSequence.cxx	2008-01-14 15:04:50.000000000 +0100
+++ chart2/source/tools/UncachedDataSequence.cxx	2008-02-21 16:59:28.000000000 +0100
@@ -75,7 +75,8 @@
     PROP_NUMBERFORMAT_KEY,
     PROP_PROPOSED_ROLE,
     PROP_HIDDEN,
-    PROP_HIDDEN_VALUES
+    PROP_HIDDEN_VALUES,
+    PROP_XML_RANGE
 };
 }  // anonymous namespace
 
@@ -156,6 +157,12 @@
                       0,   // PropertyAttributes
                       & m_aHiddenValues,
                       ::getCppuType( & m_aHiddenValues ) );
+
+    registerProperty( C2U( "CachedXMLRange" ),
+                      PROP_XML_RANGE,
+                      0,   // PropertyAttributes
+                      & m_aXMLRange,
+                      ::getCppuType( & m_aXMLRange ) );
 }
 
 // ================================================================================
--- chart2/source/view/charttypes/VSeriesPlotter.cxx	2008-01-14 15:05:58.000000000 +0100
+++ chart2/source/view/charttypes/VSeriesPlotter.cxx	2008-02-21 16:59:28.000000000 +0100
@@ -68,7 +68,7 @@
 #include "CandleStickChart.hxx"
 //
 
-#include <com/sun/star/chart2/ErrorBarStyle.hpp>
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 #include <com/sun/star/chart2/XRegressionCurveContainer.hpp>
 #include <com/sun/star/container/XChild.hpp>
 #include <com/sun/star/chart2/RelativePosition.hpp>
@@ -638,7 +638,7 @@
 double lcl_getErrorBarLogicLength(
     const uno::Sequence< double > & rData,
     uno::Reference< beans::XPropertySet > xProp,
-    ErrorBarStyle eErrorBarStyle,
+    sal_Int32 nErrorBarStyle,
     sal_Int32 nIndex,
     bool bPositive )
 {
@@ -646,17 +646,17 @@
     ::rtl::math::setNan( & fResult );
     try
     {
-        switch( eErrorBarStyle )
+        switch( nErrorBarStyle )
         {
-            case ErrorBarStyle_NONE:
+            case ::com::sun::star::chart::ErrorBarStyle::NONE:
                 break;
-            case ErrorBarStyle_VARIANCE:
+            case ::com::sun::star::chart::ErrorBarStyle::VARIANCE:
                 fResult = StatisticsHelper::getVariance( rData );
                 break;
-            case ErrorBarStyle_STANDARD_DEVIATION:
+            case ::com::sun::star::chart::ErrorBarStyle::STANDARD_DEVIATION:
                 fResult = StatisticsHelper::getStandardDeviation( rData );
                 break;
-            case ErrorBarStyle_RELATIVE:
+            case ::com::sun::star::chart::ErrorBarStyle::RELATIVE:
             {
                 double fPercent = 0;
                 if( xProp->getPropertyValue( bPositive
@@ -672,12 +672,12 @@
                 }
             }
             break;
-            case ErrorBarStyle_ABSOLUTE:
+            case ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE:
                 xProp->getPropertyValue( bPositive
                                          ? C2U("PositiveError")
                                          : C2U("NegativeError")) >>= fResult;
                 break;
-            case ErrorBarStyle_ERROR_MARGIN:
+            case ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN:
             {
                 // todo: check if this is really what's called error-margin
                 double fPercent = 0;
@@ -701,16 +701,17 @@
                 }
             }
             break;
-            case ErrorBarStyle_STANDARD_ERROR:
+            case ::com::sun::star::chart::ErrorBarStyle::STANDARD_ERROR:
                 fResult = StatisticsHelper::getStandardError( rData );
                 break;
-            case ErrorBarStyle_FROM_DATA:
-                // todo: implement
-                break;
-
-                // to avoid warning
-            case ErrorBarStyle_MAKE_FIXED_SIZE:
-                break;
+            case ::com::sun::star::chart::ErrorBarStyle::FROM_DATA:
+            {
+                uno::Reference< chart2::data::XDataSource > xErrorBarData( xProp, uno::UNO_QUERY );
+                if( xErrorBarData.is())
+                    fResult = StatisticsHelper::getErrorFromDataSource(
+                        xErrorBarData, nIndex, bPositive /*, true */ /* y-error */ );
+            }
+            break;
         }
     }
     catch( uno::Exception & e )
@@ -805,16 +806,16 @@
     {
         sal_Bool bShowPositive = sal_False;
         sal_Bool bShowNegative = sal_False;
-        ErrorBarStyle eErrorBarStyle = ErrorBarStyle_VARIANCE;
+        sal_Int32 nErrorBarStyle = ::com::sun::star::chart::ErrorBarStyle::VARIANCE;
 
         xErrorBarProperties->getPropertyValue( C2U( "ShowPositiveError" )) >>= bShowPositive;
         xErrorBarProperties->getPropertyValue( C2U( "ShowNegativeError" )) >>= bShowNegative;
-        xErrorBarProperties->getPropertyValue( C2U( "ErrorBarStyle" )) >>= eErrorBarStyle;
+        xErrorBarProperties->getPropertyValue( C2U( "ErrorBarStyle" )) >>= nErrorBarStyle;
 
         if(!bShowPositive && !bShowNegative)
             return;
 
-        if(eErrorBarStyle==chart2::ErrorBarStyle_NONE)
+        if(nErrorBarStyle==::com::sun::star::chart::ErrorBarStyle::NONE)
             return;
 
         bool bCreateNegativeBorder = false;//make a vertical line at the negative end of the error bar
@@ -830,7 +831,7 @@
 
         if( bShowPositive )
         {
-            double fLength = lcl_getErrorBarLogicLength( rData, xErrorBarProperties, eErrorBarStyle, nIndex, true );
+            double fLength = lcl_getErrorBarLogicLength( rData, xErrorBarProperties, nErrorBarStyle, nIndex, true );
             if( ::rtl::math::isFinite( fLength ) )
             {
                 double fLocalX = fX;
@@ -848,7 +849,7 @@
 
         if( bShowNegative )
         {
-            double fLength = lcl_getErrorBarLogicLength( rData, xErrorBarProperties, eErrorBarStyle, nIndex, false );
+            double fLength = lcl_getErrorBarLogicLength( rData, xErrorBarProperties, nErrorBarStyle, nIndex, false );
             if( ::rtl::math::isFinite( fLength ) )
             {
                 double fLocalX = fX;
--- chart2/source/view/main/ChartItemPool.cxx	2008-02-18 17:02:46.000000000 +0100
+++ chart2/source/view/main/ChartItemPool.cxx	2008-02-21 16:59:29.000000000 +0100
@@ -161,8 +161,9 @@
 	ppPoolDefaults[SCHATTR_STAT_BIGERROR            - SCHATTR_START] = new SvxDoubleItem (0.0, SCHATTR_STAT_BIGERROR);
 	ppPoolDefaults[SCHATTR_STAT_CONSTPLUS           - SCHATTR_START] = new SvxDoubleItem (0.0, SCHATTR_STAT_CONSTPLUS);
 	ppPoolDefaults[SCHATTR_STAT_CONSTMINUS          - SCHATTR_START] = new SvxDoubleItem (0.0, SCHATTR_STAT_CONSTMINUS);
-    ppPoolDefaults[SCHATTR_STAT_REGRESSTYPE         - SCHATTR_START] = new SvxChartRegressItem  (CHREGRESS_NONE, SCHATTR_STAT_REGRESSTYPE);
     ppPoolDefaults[SCHATTR_STAT_INDICATE            - SCHATTR_START] = new SvxChartIndicateItem (CHINDICATE_NONE, SCHATTR_STAT_INDICATE);
+    ppPoolDefaults[SCHATTR_STAT_RANGE_POS           - SCHATTR_START] = new SfxStringItem (SCHATTR_STAT_RANGE_POS, String());
+    ppPoolDefaults[SCHATTR_STAT_RANGE_NEG           - SCHATTR_START] = new SfxStringItem (SCHATTR_STAT_RANGE_NEG, String());
 
 	ppPoolDefaults[SCHATTR_TEXT_DEGREES				- SCHATTR_START] = new SfxInt32Item(SCHATTR_TEXT_DEGREES, 0);
 	ppPoolDefaults[SCHATTR_TEXT_OVERLAP	        	- SCHATTR_START] = new SfxBoolItem(SCHATTR_TEXT_OVERLAP,FALSE);
@@ -224,6 +225,7 @@
     ppPoolDefaults[SCHATTR_CLOCKWISE            - SCHATTR_START] = new SfxBoolItem( SCHATTR_CLOCKWISE, FALSE );
 
     ppPoolDefaults[SCHATTR_AXIS_FOR_ALL_SERIES  - SCHATTR_START] = new SfxInt32Item(SCHATTR_AXIS_FOR_ALL_SERIES, 0);
+    ppPoolDefaults[SCHATTR_REGRESSION_TYPE          - SCHATTR_START] = new SvxChartRegressItem  (CHREGRESS_NONE, SCHATTR_REGRESSION_TYPE);
     ppPoolDefaults[SCHATTR_REGRESSION_SHOW_EQUATION - SCHATTR_START] = new SfxBoolItem(SCHATTR_REGRESSION_SHOW_EQUATION, 0);
     ppPoolDefaults[SCHATTR_REGRESSION_SHOW_COEFF - SCHATTR_START] = new SfxBoolItem(SCHATTR_REGRESSION_SHOW_COEFF, 0);
 
--- offapi/com/sun/star/chart/ChartStatistics.idl	2005-09-08 00:10:53.000000000 +0200
+++ offapi/com/sun/star/chart/ChartStatistics.idl	2008-02-21 16:49:14.000000000 +0100
@@ -50,7 +50,8 @@
 #ifndef __com_sun_star_chart_ChartRegressionCurveType_idl__ 
 #include <com/sun/star/chart/ChartRegressionCurveType.idl> 
 #endif 
- 
+
+#include <com/sun/star/chart/ErrorBarStyle.idl>
  
 //============================================================================= 
  
@@ -104,6 +105,8 @@
 	 
 	/** determines the type of error to indicate.
 
+        @deprecated
+
         @see ChartErrorCategory 
         @see PercentageError 
         @see ErrorMargin 
@@ -112,6 +115,13 @@
         @see ErrorIndicator
 	 */
 	[property] com::sun::star::chart::ChartErrorCategory ErrorCategory; 
+
+    /** determines the style of the error bars. Use this instead of
+        ErrorCategory
+
+         @see ErrorBarStyle
+     */
+	[optional, property] long ErrorBarStyle;
  
 	//------------------------------------------------------------------------- 
 	 
@@ -160,7 +170,18 @@
         @see ChartRegressionCurveType
 	 */
 	[property] com::sun::star::chart::ChartRegressionCurveType RegressionCurves; 
- 
+
+    /** contains a cell range string for positve error bars. This
+        property is used when the <type>ErrorBarCategory</type> is set
+        to <member>ErrorBarCategory::FROM_DATA</member>.
+     */
+    [optional, property] string ErrorBarRangePositive;
+
+    /** contains a cell range string for negative error bars. This
+        property is used when the <type>ErrorBarCategory</type> is set
+        to <member>ErrorBarCategory::FROM_DATA</member>.
+     */
+    [optional, property] string ErrorBarRangeNegative;
 }; 
  
 //============================================================================= 
--- offapi/com/sun/star/chart/ErrorBarStyle.idl	1970-01-01 01:00:00.000000000 +0100
+++ offapi/com/sun/star/chart/ErrorBarStyle.idl	2008-02-21 17:01:20.000000000 +0100
@@ -0,0 +1,106 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: ErrorBarStyle.idl,v $
+ *
+ *  $Revision: 1.1.2.1 $
+ *
+ *  last change: $Author: bm $ $Date: 2008/02/21 16:01:20 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef com_sun_star_chart_ErrorBarStyle_idl
+#define com_sun_star_chart_ErrorBarStyle_idl
+
+module com {  module sun {  module star {  module chart {
+
+/** specifies the style of error indicators.
+ */
+published constants ErrorBarStyle
+{
+	/** error indicators are not displayed.
+	 */
+	const long NONE = 0;
+
+	/** displays error indicators for the variance of the data.
+	 */
+	const long VARIANCE = 1;
+
+	/** displays error indicators for the standard deviation (square
+        root of variance) of the data.
+	 */
+	const long STANDARD_DEVIATION = 2;
+
+    /** the error indicators for all data points have the same
+        absolute value as length for either direction.
+
+        <p>The values for these are given as absolute numbers in
+        <member>ChartStatistics::ConstantErrorLow</member> and
+        <member>ChartStatistics::ConstantErrorHigh</member></p>
+
+        @see ChartStatistics
+	 */
+	const long ABSOLUTE = 3;
+
+	/** The length of the error indicators is calculated for each data
+        point by taking the percentage given as
+        <member>ChartStatistics::PercentageError</member> of its
+        value.
+
+        @see ChartStatistics
+	 */
+	const long RELATIVE = 4;
+
+	/** The length of the error indicators for all data points is
+        calculated by taking the percentage given as
+        <member>ChartStatistics::ErrorMargin</member> of the largest
+        data point value.
+
+        @see ChartStatistics
+	 */
+	const long ERROR_MARGIN = 5;
+
+	/** displays error indicators for the standard error, also known
+        as the standard deviation of the mean (SDOM).
+     */
+    const long STANDARD_ERROR = 6;
+
+    /** Uses values given by cell ranges of the container document.
+
+        <p>The values for the cell ranges are given in the properties
+        <member>ChartStatistics::ErrorBarRangePositive</member> for
+        positive indicators and
+        <member>ChartStatistics::ErrorBarRangeNegative</member> for
+        negative indicators.</p>
+     */
+    const long FROM_DATA = 7;
+};
+
+//=============================================================================
+
+}; }; }; };
+
+#endif
--- offapi/com/sun/star/chart/makefile.mk	2008-02-18 16:37:36.000000000 +0100
+++ offapi/com/sun/star/chart/makefile.mk	2008-02-21 16:49:14.000000000 +0100
@@ -110,6 +110,7 @@
 	XTwoAxisYSupplier.idl\
 	XSecondAxisTitleSupplier.idl\
 	XYDiagram.idl\
+	ErrorBarStyle.idl
 
 # ------------------------------------------------------------------
 
--- offapi/com/sun/star/chart2/ErrorBar.idl	2007-05-22 16:52:42.000000000 +0200
+++ offapi/com/sun/star/chart2/ErrorBar.idl	2008-02-21 16:49:14.000000000 +0100
@@ -36,7 +36,7 @@
 #define com_sun_star_chart_ErrorBar_idl
 
 #include <com/sun/star/drawing/LineProperties.idl>
-#include <com/sun/star/chart2/ErrorBarStyle.idl>
+#include <com/sun/star/chart/ErrorBarStyle.idl>
 
 module com
 {
@@ -57,7 +57,7 @@
 
     /**
      */
-    [property] ErrorBarStyle ErrorBarStyle;
+    [property] ::com::sun::star::chart::ErrorBarStyle ErrorBarStyle;
 
     /**
      */
--- offapi/com/sun/star/chart2/makefile.mk	2007-07-25 10:19:51.000000000 +0200
+++ offapi/com/sun/star/chart2/makefile.mk	2008-02-21 16:49:14.000000000 +0100
@@ -55,7 +55,6 @@
 	CurveStyle.idl \
 	DataPointGeometry3D.idl \
 	DataPointLabel.idl \
-	ErrorBarStyle.idl \
 	ExplicitIncrementData.idl \
 	ExplicitScaleData.idl \
 	ExplicitSubIncrement.idl \
--- offapi/com/sun/star/chart2/XInternalDataProvider.idl	2007-05-22 17:03:23.000000000 +0200
+++ offapi/com/sun/star/chart2/XInternalDataProvider.idl	2008-02-22 11:31:49.000000000 +0100
@@ -56,8 +56,16 @@
     sequence< any > getDataByRangeRepresentation( [in] string aRange );
     void            setDataByRangeRepresentation( [in] string aRange, [in] sequence< any > aNewData );
 
+    /** @param Note that -1 is allowed as the sequence is inserted
+               after the given index. So to insert a sequence as the
+               new first sequence (index 0), you would pass -1 here.
+     */
     void insertSequence( [in] long nAfterIndex );
     void deleteSequence( [in] long nAtIndex );
+    /** same as insertSequence with nAfterIndex being the largest
+        current index of the data, i.e. (size - 1)
+     */
+    void appendSequence();
 
     void insertDataPointForAllSequences( [in] long nAfterIndex );
     void deleteDataPointForAllSequences( [in] long nAtIndex );
--- officecfg/registry/data/org/openoffice/Office/UI/ChartCommands.xcu	2008-02-18 16:23:57.000000000 +0100
+++ officecfg/registry/data/org/openoffice/Office/UI/ChartCommands.xcu	2008-02-24 23:50:11.000000000 +0100
@@ -392,40 +392,54 @@
 			</node>
 			<node oor:name=".uno:DiagramAxisMenu" oor:op="replace">
 				<prop oor:name="Label" oor:type="xs:string">
-					
 					<value xml:lang="en-US">A~xis</value>
 				</prop>
 			</node>
 			<node oor:name=".uno:ChartTitleMenu" oor:op="replace">
 				<prop oor:name="Label" oor:type="xs:string">
-					
 					<value xml:lang="en-US">~Title</value>
 				</prop>
 			</node>
 			<node oor:name=".uno:DiagramGridMenu" oor:op="replace">
 				<prop oor:name="Label" oor:type="xs:string">
-					
 					<value xml:lang="en-US">~Grid</value>
 				</prop>
 			</node>
 			<node oor:name=".uno:InsertTrendline" oor:op="replace">
 				<prop oor:name="Label" oor:type="xs:string">
-					
 					<value xml:lang="en-US">Insert Tre~nd Line...</value>
 				</prop>
 			</node>
 			<node oor:name=".uno:InsertMeanValue" oor:op="replace">
 				<prop oor:name="Label" oor:type="xs:string">
-					
 					<value xml:lang="en-US">Insert Mean ~Value Line</value>
 				</prop>
 			</node>
 			<node oor:name=".uno:InsertTrendlineEquation" oor:op="replace">
 				<prop oor:name="Label" oor:type="xs:string">
-					
 					<value xml:lang="en-US">Insert Trend Line ~Equation</value>
 				</prop>
 			</node>
+			<node oor:name=".uno:InsertYErrorbar" oor:op="replace">
+				<prop oor:name="Label" oor:type="xs:string">
+					<value xml:lang="en-US">Insert ~Y Error Bars...</value>
+				</prop>
+			</node>
+			<node oor:name=".uno:DeleteMeanValue" oor:op="replace">
+				<prop oor:name="Label" oor:type="xs:string">
+					<value xml:lang="en-US">Delete Mean ~Value Line</value>
+				</prop>
+			</node>
+			<node oor:name=".uno:DeleteTrendline" oor:op="replace">
+				<prop oor:name="Label" oor:type="xs:string">
+					<value xml:lang="en-US">Delete Tre~ndline</value>
+				</prop>
+			</node>
+			<node oor:name=".uno:DeleteYErrorbar" oor:op="replace">
+				<prop oor:name="Label" oor:type="xs:string">
+					<value xml:lang="en-US">Delete ~Y Error Bars</value>
+				</prop>
+			</node>
 		</node>
 	</node>
 </oor:component-data>
--- svx/inc/chrtitem.hxx	2007-05-10 16:19:05.000000000 +0200
+++ svx/inc/chrtitem.hxx	2008-02-22 13:42:41.000000000 +0100
@@ -170,10 +170,12 @@
 	CHERROR_SIGMA,
 	CHERROR_PERCENT,
 	CHERROR_BIGERROR,
-	CHERROR_CONST
+	CHERROR_CONST,
+    CHERROR_STDERROR,
+    CHERROR_RANGE
 };
 
-#define CHERROR_COUNT	(CHERROR_CONST + 1)
+#define CHERROR_COUNT	(CHERROR_RANGE + 1)
 
 enum SvxChartIndicate
 {
--- xmloff/inc/xmloff/SchXMLExportHelper.hxx	2007-11-23 12:33:58.000000000 +0100
+++ xmloff/inc/xmloff/SchXMLExportHelper.hxx	2008-02-21 16:59:48.000000000 +0100
@@ -212,6 +212,7 @@
 	SAL_DLLPRIVATE void swapDataArray( com::sun::star::uno::Sequence< com::sun::star::uno::Sequence< double > >& rSequence );
     /// exports a string as a paragraph element
     SAL_DLLPRIVATE void exportText( const ::rtl::OUString& rText, bool bConvertTabsLFs = false );
+    SAL_DLLPRIVATE void exportErrorBarRanges();
 
     SAL_DLLPRIVATE SchXMLExportHelper(SchXMLExportHelper &); // not defined
     SAL_DLLPRIVATE void operator =(SchXMLExportHelper &); // not defined
--- xmloff/inc/xmloff/xmltoken.hxx	2008-02-18 16:32:23.000000000 +0100
+++ xmloff/inc/xmloff/xmltoken.hxx	2008-02-21 16:59:48.000000000 +0100
@@ -2984,6 +2984,10 @@
         XML_NP_FIELD, 
 	
         XML_ANGLE_OFFSET,
+        XML_STANDARD_ERROR,
+        XML_CELL_RANGE,
+        XML_ERROR_LOWER_RANGE,
+        XML_ERROR_UPPER_RANGE,
 		XML_TOKEN_END
     };
 
--- xmloff/source/chart/PropertyMap.hxx	2008-02-18 16:32:40.000000000 +0100
+++ xmloff/source/chart/PropertyMap.hxx	2008-02-21 16:59:48.000000000 +0100
@@ -57,8 +57,8 @@
 #ifndef _COM_SUN_STAR_CHART_CHARTAXISARRANGEORDERTYPE_HPP_
 #include <com/sun/star/chart/ChartAxisArrangeOrderType.hpp>
 #endif
-#ifndef _COM_SUN_STAR_CHART_CHARTERRORCATEGORY_HPP_
-#include <com/sun/star/chart/ChartErrorCategory.hpp>
+#ifndef _COM_SUN_STAR_CHART_ERRORBARSTYLE_HPP_
+#include <com/sun/star/chart/ErrorBarStyle.hpp>
 #endif
 #ifndef _COM_SUN_STAR_CHART_CHARTERRORINDICATORTYPE_HPP_
 #include <com/sun/star/chart/ChartErrorIndicatorType.hpp>
@@ -78,7 +78,7 @@
 
 // custom types
 #define XML_SCH_TYPE_AXIS_ARRANGEMENT		( XML_SCH_TYPES_START + 0 )
-#define XML_SCH_TYPE_ERROR_CATEGORY			( XML_SCH_TYPES_START + 1 )
+#define XML_SCH_TYPE_ERROR_BAR_STYLE		( XML_SCH_TYPES_START + 1 )
 #define XML_SCH_TYPE_REGRESSION_TYPE		( XML_SCH_TYPES_START + 2 )
 #define XML_SCH_TYPE_SOLID_TYPE				( XML_SCH_TYPES_START + 3 )
 #define XML_SCH_TYPE_ERROR_INDICATOR_UPPER	( XML_SCH_TYPES_START + 4 )
@@ -199,9 +199,11 @@
 	MAP_ENTRY( "ConstantErrorHigh", CHART, XML_ERROR_UPPER_LIMIT, XML_TYPE_DOUBLE ),
 	MAP_ENTRY( "ErrorIndicator", CHART, XML_ERROR_UPPER_INDICATOR, XML_SCH_TYPE_ERROR_INDICATOR_UPPER | MID_FLAG_MERGE_PROPERTY ),	// convert one constant
 	MAP_ENTRY( "ErrorIndicator", CHART, XML_ERROR_LOWER_INDICATOR, XML_SCH_TYPE_ERROR_INDICATOR_LOWER | MID_FLAG_MERGE_PROPERTY ),	// to two bools
-  	MAP_ENTRY( "ErrorCategory", CHART, XML_ERROR_CATEGORY, XML_SCH_TYPE_ERROR_CATEGORY ),
+  	MAP_ENTRY( "ErrorBarStyle", CHART, XML_ERROR_CATEGORY, XML_SCH_TYPE_ERROR_BAR_STYLE ),
   	MAP_ENTRY( "PercentageError", CHART, XML_ERROR_PERCENTAGE, XML_TYPE_DOUBLE ),
   	MAP_ENTRY( "RegressionCurves", CHART, XML_REGRESSION_TYPE, XML_SCH_TYPE_REGRESSION_TYPE ),
+  	MAP_ENTRY( "ErrorBarRangePositive", CHART, XML_ERROR_UPPER_RANGE, XML_TYPE_STRING ),
+  	MAP_ENTRY( "ErrorBarRangeNegative", CHART, XML_ERROR_LOWER_RANGE, XML_TYPE_STRING ),
 
 	// series/data-point properties
 	MAP_SPECIAL( "DataCaption", CHART, XML_DATA_LABEL_NUMBER, XML_TYPE_NUMBER | MID_FLAG_MERGE_PROPERTY, DATA_LABEL_NUMBER ),	// convert one constant
@@ -241,14 +243,16 @@
     { ::xmloff::token::XML_TOKEN_INVALID, 0 }
 };
 
-SvXMLEnumMapEntry aXMLChartErrorCategoryEnumMap[] =
+SvXMLEnumMapEntry aXMLChartErrorBarStyleEnumMap[] =
 {
-	{ ::xmloff::token::XML_NONE,		    		::com::sun::star::chart::ChartErrorCategory_NONE },
-	{ ::xmloff::token::XML_VARIANCE,		    	::com::sun::star::chart::ChartErrorCategory_VARIANCE },
-	{ ::xmloff::token::XML_STANDARD_DEVIATION,	::com::sun::star::chart::ChartErrorCategory_STANDARD_DEVIATION },
-	{ ::xmloff::token::XML_PERCENTAGE,			::com::sun::star::chart::ChartErrorCategory_PERCENT },
-	{ ::xmloff::token::XML_ERROR_MARGIN,		    ::com::sun::star::chart::ChartErrorCategory_ERROR_MARGIN },
-	{ ::xmloff::token::XML_CONSTANT, 			::com::sun::star::chart::ChartErrorCategory_CONSTANT_VALUE },
+    { ::xmloff::token::XML_NONE,                ::com::sun::star::chart::ErrorBarStyle::NONE },
+    { ::xmloff::token::XML_VARIANCE,            ::com::sun::star::chart::ErrorBarStyle::VARIANCE },
+    { ::xmloff::token::XML_STANDARD_DEVIATION,  ::com::sun::star::chart::ErrorBarStyle::STANDARD_DEVIATION },
+    { ::xmloff::token::XML_CONSTANT,            ::com::sun::star::chart::ErrorBarStyle::ABSOLUTE },
+    { ::xmloff::token::XML_PERCENTAGE,          ::com::sun::star::chart::ErrorBarStyle::RELATIVE },
+    { ::xmloff::token::XML_ERROR_MARGIN,        ::com::sun::star::chart::ErrorBarStyle::ERROR_MARGIN },
+    { ::xmloff::token::XML_STANDARD_ERROR,      ::com::sun::star::chart::ErrorBarStyle::STANDARD_ERROR },
+    { ::xmloff::token::XML_CELL_RANGE,          ::com::sun::star::chart::ErrorBarStyle::FROM_DATA },
     { ::xmloff::token::XML_TOKEN_INVALID, 0 }
 };
 
--- xmloff/source/chart/PropertyMaps.cxx	2007-11-23 12:35:00.000000000 +0100
+++ xmloff/source/chart/PropertyMaps.cxx	2008-02-21 16:59:48.000000000 +0100
@@ -151,9 +151,10 @@
 											   ::getCppuType((const chart::ChartAxisArrangeOrderType*)0) );
 				break;
 
-			case XML_SCH_TYPE_ERROR_CATEGORY:
-				pHdl = new XMLEnumPropertyHdl( aXMLChartErrorCategoryEnumMap,
-											   ::getCppuType((const chart::ChartErrorCategory*)0) );
+			case XML_SCH_TYPE_ERROR_BAR_STYLE:
+				// here we have a constant rather than an enum
+				pHdl = new XMLEnumPropertyHdl( aXMLChartErrorBarStyleEnumMap,
+                                               ::getCppuType((const sal_Int32*)0) );
 				break;
 
 			case XML_SCH_TYPE_REGRESSION_TYPE:
--- xmloff/source/chart/SchXMLChartContext.cxx	2007-11-23 12:35:19.000000000 +0100
+++ xmloff/source/chart/SchXMLChartContext.cxx	2008-02-21 16:59:48.000000000 +0100
@@ -838,6 +838,7 @@
     if( mbHasOwnTable )
         msChartAddress = ::rtl::OUString::createFromAscii("all");
 
+    bool bPostProcessTable = false;
     if( !mbHasOwnTable && mbAllRangeAddressesAvailable )
     {
         // special handling for stock chart (merge series together)
@@ -851,7 +852,8 @@
             // note: mbRowHasLabels means the first row contains labels, that
             // means we have "column-descriptions", (analogously mbColHasLabels
             // means we have "row-descriptions")
-            SchXMLTableHelper::applyTable( maTable, maLSequencesPerIndex, xNewDoc ); //, meDataRowSource );
+            SchXMLTableHelper::applyTable( maTable, xNewDoc );
+            bPostProcessTable = true;
         }
         else
         {
@@ -939,7 +941,7 @@
             if( !bSpecialHandlingForDonutChart )
             {
                 SchXMLSeries2Context::setStylesToSeries( maSeriesDefaultsAndStyles
-                            , pStylesCtxt, pStyle, sCurrStyleName, mrImportHelper, GetImport(), mbIsStockChart );
+                                                         , pStylesCtxt, pStyle, sCurrStyleName, mrImportHelper, GetImport(), mbIsStockChart, maLSequencesPerIndex );
                 // ... then set attributes for statistics (after their existence was set in the series)
                 SchXMLSeries2Context::setStylesToStatisticsObjects( maSeriesDefaultsAndStyles
                             , pStylesCtxt, pStyle, sCurrStyleName );
@@ -951,6 +953,9 @@
 	    }
     }
 
+    if( bPostProcessTable )
+        SchXMLTableHelper::postProcessTable( maTable, maLSequencesPerIndex, xNewDoc, meDataRowSource );
+
     if( xProp.is())
 	    xProp->setPropertyValue( rtl::OUString::createFromAscii( "RefreshAddInAllowed" ) , uno::makeAny( sal_True) );
 }
--- xmloff/source/chart/SchXMLChartContext.hxx	2007-11-23 12:35:36.000000000 +0100
+++ xmloff/source/chart/SchXMLChartContext.hxx	2008-02-21 16:59:48.000000000 +0100
@@ -58,6 +58,7 @@
 #include "transporttypes.hxx"
 
 #include <list>
+#include <map>
 
 class SchXMLImport;
 class SchXMLImportHelper;
@@ -111,6 +112,20 @@
 
 class SchXMLChartContext : public SvXMLImportContext
 {
+public:
+	SchXMLChartContext( SchXMLImportHelper& rImpHelper,
+						SvXMLImport& rImport, const rtl::OUString& rLocalName );
+	virtual ~SchXMLChartContext();
+
+	virtual void StartElement( const com::sun::star::uno::Reference<
+							   	  com::sun::star::xml::sax::XAttributeList >& xAttrList );
+	virtual void EndElement();
+	virtual SvXMLImportContext *CreateChildContext(
+		USHORT nPrefix,
+		const rtl::OUString& rLocalName,
+		const com::sun::star::uno::Reference<
+			com::sun::star::xml::sax::XAttributeList >& xAttrList );
+
 private:
 	SchXMLTable maTable;
 	SchXMLImportHelper& mrImportHelper;
@@ -138,24 +153,6 @@
 
     ::com::sun::star::awt::Size maChartSize;
 
-    ::com::sun::star::uno::Sequence< sal_Int32 > GetNumberSequenceFromString( const ::rtl::OUString& rStr, bool bAddOneToEachOldIndex );
-    void MergeSeriesForStockChart();
-
-public:
-	SchXMLChartContext( SchXMLImportHelper& rImpHelper,
-						SvXMLImport& rImport, const rtl::OUString& rLocalName );
-	virtual ~SchXMLChartContext();
-
-	virtual void StartElement( const com::sun::star::uno::Reference<
-							   	  com::sun::star::xml::sax::XAttributeList >& xAttrList );
-	virtual void EndElement();
-	virtual SvXMLImportContext *CreateChildContext(
-		USHORT nPrefix,
-		const rtl::OUString& rLocalName,
-		const com::sun::star::uno::Reference<
-			com::sun::star::xml::sax::XAttributeList >& xAttrList );
-
-private:
 	/**	@descr	This method bundles some settings to the chart model and executes them with
 			a locked controller.  This includes setting the draw page size and setting
 			the chart type.
@@ -173,6 +170,8 @@
 
     void ChangeDiagramAccordingToTemplate(
         const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartDocument >& xNewDoc );
+    ::com::sun::star::uno::Sequence< sal_Int32 > GetNumberSequenceFromString( const ::rtl::OUString& rStr, bool bAddOneToEachOldIndex );
+    void MergeSeriesForStockChart();
 };
 
 // ----------------------------------------
--- xmloff/source/chart/SchXMLExport.cxx	2008-02-18 16:33:22.000000000 +0100
+++ xmloff/source/chart/SchXMLExport.cxx	2008-02-21 16:59:48.000000000 +0100
@@ -524,6 +524,9 @@
     const Reference< chart2::data::XDataSequence > & xCategories,
     ::std::vector< OUString > & rOutCategories )
 {
+    OSL_ASSERT( xCategories.is());
+    if( !xCategories.is())
+        return;
     Reference< chart2::data::XTextualDataSequence > xTextualDataSequence( xCategories, uno::UNO_QUERY );
     if( xTextualDataSequence.is())
     {
@@ -574,7 +577,7 @@
         ::std::copy( aValues.getConstArray(), aValues.getConstArray() + aValues.getLength(),
                      ::std::back_inserter( aResult ));
     }
-    else
+    else if( xSeq.is())
     {
         Sequence< uno::Any > aAnies( xSeq->getData());
         aResult.resize( aAnies.getLength());
@@ -590,8 +593,11 @@
     typedef ::std::vector< ::std::vector< double > > tTwoDimNumberContainer;
 
     tTwoDimNumberContainer aDataInRows;
+    tStringContainer       aDataRangeRepresentations;
     tStringContainer       aFirstRowStrings;
+    tStringContainer       aFirstRowRangeRepresentations;
     tStringContainer       aFirstColumnStrings;
+    tStringContainer       aFirstColumnRangeRepresentations;
 };
 
 // ::std::bind2nd( ::std::mem_fun_ref( &T::resize ), nSize ) does not work
@@ -605,12 +611,76 @@
         typename T::size_type m_nSize;
     };
 
+
+typedef ::std::map< sal_Int32, SchXMLExportHelper::tLabelValuesDataPair >
+    lcl_DataSequenceMap;
+
+struct lcl_SequenceToMapElement :
+    public ::std::unary_function< lcl_DataSequenceMap::mapped_type, lcl_DataSequenceMap::value_type >
+{
+    lcl_SequenceToMapElement( sal_Int32 nOffset = 0 ) :
+            m_nOffset( nOffset )
+    {}
+    result_type operator() ( const argument_type & rContent )
+    {
+        sal_Int32 nIndex = -1;
+        if( rContent.second.is())
+        {
+            OUString aRangeRep( rContent.second->getSourceRangeRepresentation());
+            if( aRangeRep.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("categories")))
+            {
+                OSL_ASSERT( m_nOffset > 0 );
+                nIndex = 0;
+            }
+            else
+                nIndex = aRangeRep.toInt32() + m_nOffset;
+        }
+        else if( rContent.first.is())
+            nIndex = rContent.first->getSourceRangeRepresentation().copy( sizeof("label ")).toInt32() + m_nOffset;
+        return result_type( nIndex, rContent );
+    }
+private:
+    sal_Int32 m_nOffset;
+};
+
+void lcl_PrepareInternalSequencesForTableExport(
+    SchXMLExportHelper::tDataSequenceCont & rInOutSequences, bool bHasCategories )
+{
+    lcl_DataSequenceMap aIndexSequenceMap;
+    const sal_Int32 nOffset = bHasCategories ? 1 : 0;
+    ::std::transform( rInOutSequences.begin(), rInOutSequences.end(),
+                      ::std::inserter( aIndexSequenceMap, aIndexSequenceMap.begin()),
+                      lcl_SequenceToMapElement( nOffset ));
+
+    rInOutSequences.clear();
+    sal_Int32 nIndex = 0;
+    for( lcl_DataSequenceMap::const_iterator aIt = aIndexSequenceMap.begin();
+         aIt != aIndexSequenceMap.end(); ++aIt, ++nIndex )
+    {
+        if( aIt->first < 0 )
+            continue;
+        // fill empty columns
+        for( ; nIndex < aIt->first; ++nIndex )
+            rInOutSequences.push_back(
+                SchXMLExportHelper::tDataSequenceCont::value_type( 0, 0 ));
+        OSL_ASSERT( nIndex == aIt->first );
+        rInOutSequences.push_back( aIt->second );
+    }
+}
+
+
 lcl_TableData lcl_getDataForLocalTable(
-    SchXMLExportHelper::tDataSequenceCont aSequencesToExport, bool bHasCategoryLabels,
-    bool bSwap )
+    const SchXMLExportHelper::tDataSequenceCont & aPassedSequences, bool bHasCategoryLabels,
+    bool bSwap,
+    bool bHasOwnData,
+    const Reference< chart2::data::XRangeXMLConversion > & xRangeConversion )
 {
     lcl_TableData aResult;
 
+    SchXMLExportHelper::tDataSequenceCont aSequencesToExport( aPassedSequences );
+    if( bHasOwnData )
+        lcl_PrepareInternalSequencesForTableExport( aSequencesToExport, bHasCategoryLabels );
+
     SchXMLExportHelper::tDataSequenceCont::size_type nNumSequences = aSequencesToExport.size();
     SchXMLExportHelper::tDataSequenceCont::const_iterator aBegin( aSequencesToExport.begin());
     SchXMLExportHelper::tDataSequenceCont::const_iterator aEnd( aSequencesToExport.end());
@@ -646,6 +716,16 @@
         if( bHasCategoryLabels )
         {
             lcl_fillCategoriesIntoStringVector( aIt->second, rCategories );
+            if( aIt->second.is())
+            {
+                OUString aRange( aIt->second->getSourceRangeRepresentation());
+                if( xRangeConversion.is())
+                    aRange = xRangeConversion->convertRangeToXML( aRange );
+                if( bSwap )
+                    aResult.aFirstRowRangeRepresentations.push_back( aRange );
+                else
+                    aResult.aFirstColumnRangeRepresentations.push_back( aRange );
+            }
             ++aIt;
         }
         else
@@ -656,14 +736,25 @@
         }
     }
 
+    // iterate over all sequences
     size_t nSeqIdx = 0;
     for( ; aIt != aEnd; ++aIt, ++nSeqIdx )
     {
+        OUString aRange;
         if( aIt->first.is())
+        {
             rLabels[nSeqIdx] = lcl_getLabelString( aIt->first );
+            aRange = aIt->first->getSourceRangeRepresentation();
+            if( xRangeConversion.is())
+                aRange = xRangeConversion->convertRangeToXML( aRange );
+        }
         else if( aIt->second.is())
             rLabels[nSeqIdx] = lcl_flattenStringSequence(
                 aIt->second->generateLabel( chart2::data::LabelOrigin_SHORT_SIDE ));
+        if( bSwap )
+            aResult.aFirstColumnRangeRepresentations.push_back( aRange );
+        else
+            aResult.aFirstRowRangeRepresentations.push_back( aRange );
 
         ::std::vector< double > aNumbers( lcl_getAllValuesFromSequence( aIt->second ));
         if( bSwap )
@@ -674,6 +765,14 @@
             for( sal_Int32 nIdx=0; nIdx<nSize; ++nIdx )
                 aResult.aDataInRows[nIdx][nSeqIdx] = aNumbers[nIdx];
         }
+
+        if( aIt->second.is())
+        {
+            aRange =  aIt->second->getSourceRangeRepresentation();
+            if( xRangeConversion.is())
+                aRange = xRangeConversion->convertRangeToXML( aRange );
+        }
+        aResult.aDataRangeRepresentations.push_back( aRange );
     }
 
     return aResult;
@@ -691,12 +790,60 @@
     }
 }
 
+::std::vector< Reference< chart2::data::XDataSequence > >
+    lcl_getErrorBarSequences( const Reference< beans::XPropertySet > & xErrorBarProp )
+{
+    ::std::vector< Reference< chart2::data::XDataSequence > > aResult;
+    Reference< chart2::data::XDataSource > xErrorBarDataSource( xErrorBarProp, uno::UNO_QUERY );
+    if( !xErrorBarDataSource.is())
+        return aResult;
+
+    const OUString aRolePrefix( RTL_CONSTASCII_USTRINGPARAM( "error-bars-" ));
+//     const OUString aXRolePrefix( aRolePrefix + OUString( RTL_CONSTASCII_USTRINGPARAM( "x-" )));
+//     const OUString aYRolePrefix( aRolePrefix + OUString( RTL_CONSTASCII_USTRINGPARAM( "y-" )));
+//     const OUString aPositivePostfix( RTL_CONSTASCII_USTRINGPARAM( "positive" ));
+//     const OUString aNegativePostfix( RTL_CONSTASCII_USTRINGPARAM( "negative" ));
+
+    Sequence< Reference< chart2::data::XLabeledDataSequence > > aSequences(
+        xErrorBarDataSource->getDataSequences());
+    for( sal_Int32 nI=0; nI< aSequences.getLength(); ++nI )
+    {
+        try
+        {
+            if( aSequences[nI].is())
+            {
+                Reference< chart2::data::XDataSequence > xSequence( aSequences[nI]->getValues());
+                Reference< beans::XPropertySet > xSeqProp( xSequence, uno::UNO_QUERY_THROW );
+                OUString aRole;
+                if( ( xSeqProp->getPropertyValue(
+                          OUString( RTL_CONSTASCII_USTRINGPARAM( "Role" ))) >>= aRole ) &&
+                    aRole.match( aRolePrefix ))
+                {
+                    aResult.push_back( xSequence );
+                }
+            }
+        }
+        catch( uno::Exception & rEx )
+        {
+#ifdef DBG_UTIL
+            String aStr( rEx.Message );
+            ByteString aBStr( aStr, RTL_TEXTENCODING_ASCII_US );
+            DBG_ERROR1( "chart:exporting error bar ranges: %s", aBStr.GetBuffer());
+#else
+            (void)rEx; // avoid warning
+#endif
+        }
+    }
+
+    return aResult;
+}
+
 } // anonymous namespace
 
 struct SchXMLDataPointStruct
 {
-    OUString maStyleName;
-    sal_Int32       mnRepeat;
+    OUString   maStyleName;
+    sal_Int32  mnRepeat;
 
     SchXMLDataPointStruct() : mnRepeat( 1 ) {}
 };
@@ -1246,7 +1393,23 @@
 	mrExport.AddAttribute( XML_NAMESPACE_TABLE, XML_NAME, msTableName );
 	SvXMLElementExport aTable( mrExport, XML_NAMESPACE_TABLE, XML_TABLE, sal_True, sal_True );
 
-    lcl_TableData aData( lcl_getDataForLocalTable( m_aDataSequencesToExport, mbHasCategoryLabels, !mbRowSourceColumns ));
+    bool bHasOwnData = false;
+    Reference< chart2::XChartDocument > xNewDoc( mrExport.GetModel(), uno::UNO_QUERY );
+    Reference< chart2::data::XRangeXMLConversion > xRangeConversion;
+    if( xNewDoc.is())
+    {
+        bHasOwnData = xNewDoc->hasInternalDataProvider();
+        xRangeConversion.set( xNewDoc->getDataProvider(), uno::UNO_QUERY );
+    }
+
+    lcl_TableData aData( lcl_getDataForLocalTable(
+                             m_aDataSequencesToExport, mbHasCategoryLabels, !mbRowSourceColumns, bHasOwnData, xRangeConversion ));
+
+    lcl_TableData::tStringContainer::const_iterator aDataRangeIter( aData.aDataRangeRepresentations.begin());
+    const lcl_TableData::tStringContainer::const_iterator aDataRangeEndIter( aData.aDataRangeRepresentations.end());
+    lcl_TableData::tStringContainer::const_iterator aFirstColumnRangeIter( aData.aFirstColumnRangeRepresentations.begin());
+    const lcl_TableData::tStringContainer::const_iterator aFirstColumnRangeEndIter( aData.aFirstColumnRangeRepresentations.end());
+
     // declare columns
     {
         SvXMLElementExport aHeaderColumns( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_HEADER_COLUMNS, sal_True, sal_True );
@@ -1268,42 +1431,72 @@
             SvXMLElementExport aEmptyParagraph( mrExport, XML_NAMESPACE_TEXT, XML_P, sal_True, sal_True );
         }
 
+        lcl_TableData::tStringContainer::const_iterator aFirstRowRangeIter( aData.aFirstRowRangeRepresentations.begin());
+        const lcl_TableData::tStringContainer::const_iterator aFirstRowRangeEndIter( aData.aFirstRowRangeRepresentations.end());
         for( lcl_TableData::tStringContainer::const_iterator aIt( aData.aFirstRowStrings.begin());
              aIt != aData.aFirstRowStrings.end(); ++aIt )
         {
             mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING );
             SvXMLElementExport aCell( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, sal_True, sal_True );
+            // write the original range name as id into the local table
+            // to allow a correct re-association when copying via clipboard
+            if( !bHasOwnData && aFirstRowRangeIter != aFirstRowRangeEndIter )
+            {
+                if( (*aFirstRowRangeIter).getLength())
+                    mrExport.AddAttribute( XML_NAMESPACE_TEXT, XML_ID, *aFirstRowRangeIter );
+                ++aFirstRowRangeIter;
+            }
             exportText( *aIt );
         }
+        OSL_ASSERT( bHasOwnData || aFirstRowRangeIter == aFirstRowRangeEndIter );
     } // closing row and header-rows elements
 
     // value rows
-    SvXMLElementExport aRows( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_ROWS, sal_True, sal_True );
-    lcl_TableData::tStringContainer::const_iterator aFirstColIt( aData.aFirstColumnStrings.begin());
-    for( lcl_TableData::tTwoDimNumberContainer::const_iterator aColIt( aData.aDataInRows.begin());
-         aColIt != aData.aDataInRows.end(); ++aColIt )
     {
-        SvXMLElementExport aRow( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_ROW, sal_True, sal_True );
-        {
-            mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING );
-            SvXMLElementExport aCell( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, sal_True, sal_True );
-            if( aFirstColIt != aData.aFirstColumnStrings.end())
-			{
-                exportText( *aFirstColIt );
-				++aFirstColIt;
-			}
-        }
-        for( lcl_TableData::tTwoDimNumberContainer::value_type::const_iterator aInnerIt( aColIt->begin());
-             aInnerIt != aColIt->end(); ++aInnerIt )
+        SvXMLElementExport aRows( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_ROWS, sal_True, sal_True );
+        lcl_TableData::tStringContainer::const_iterator aFirstColIt( aData.aFirstColumnStrings.begin());
+        for( lcl_TableData::tTwoDimNumberContainer::const_iterator aColIt( aData.aDataInRows.begin());
+             aColIt != aData.aDataInRows.end(); ++aColIt )
         {
-            SvXMLUnitConverter::convertDouble( msStringBuffer, *aInnerIt );
-            msString = msStringBuffer.makeStringAndClear();
-            mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT );
-            mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE, msString );
-            SvXMLElementExport aCell( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, sal_True, sal_True );
-            exportText( msString, false ); // do not convert tabs and lfs
+            SvXMLElementExport aRow( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_ROW, sal_True, sal_True );
+            {
+                mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING );
+                SvXMLElementExport aCell( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, sal_True, sal_True );
+                if( aFirstColIt != aData.aFirstColumnStrings.end())
+                {
+                    // write the original range name as id into the local table
+                    // to allow a correct re-association when copying via clipboard
+                    if( !bHasOwnData && aFirstColumnRangeIter != aFirstColumnRangeEndIter )
+                        mrExport.AddAttribute( XML_NAMESPACE_TEXT, XML_ID, *aFirstColumnRangeIter++ );
+                    exportText( *aFirstColIt );
+                    ++aFirstColIt;
+                }
+            }
+            for( lcl_TableData::tTwoDimNumberContainer::value_type::const_iterator aInnerIt( aColIt->begin());
+                 aInnerIt != aColIt->end(); ++aInnerIt )
+            {
+                SvXMLUnitConverter::convertDouble( msStringBuffer, *aInnerIt );
+                msString = msStringBuffer.makeStringAndClear();
+                mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT );
+                mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE, msString );
+                SvXMLElementExport aCell( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, sal_True, sal_True );
+                // write the original range name as id into the local table to
+                // allow a correct re-association when copying via clipboard
+                if( ( !bHasOwnData && aDataRangeIter != aDataRangeEndIter ) &&
+                    ( mbRowSourceColumns || (aInnerIt == aColIt->begin())) )
+                {
+                    if( (*aDataRangeIter).getLength())
+                        mrExport.AddAttribute( XML_NAMESPACE_TEXT, XML_ID, *aDataRangeIter );
+                    ++aDataRangeIter;
+                }
+                exportText( msString, false ); // do not convert tabs and lfs
+            }
         }
     }
+
+    // if range iterator was used it should have reached its end
+    OSL_ASSERT( bHasOwnData || (aDataRangeIter == aDataRangeEndIter) );
+    OSL_ASSERT( bHasOwnData || (aFirstColumnRangeIter == aFirstColumnRangeEndIter) );
 }
 
 void SchXMLExportHelper::exportPlotArea(
@@ -2296,6 +2489,7 @@
                     sal_Bool bHasMeanValueLine = false;
                     chart::ChartRegressionCurveType eRegressionType( chart::ChartRegressionCurveType_NONE );
                     chart::ChartErrorIndicatorType eErrorType( chart::ChartErrorIndicatorType_NONE );
+                    sal_Int32 nErrorBarStyle( chart::ErrorBarStyle::NONE );
                     Reference< beans::XPropertySet > xPropSet;
                     tLabelValuesDataPair aSeriesLabelValuesPair;
 
@@ -2363,6 +2557,10 @@
                                     aAny = xPropSet->getPropertyValue(
                                         OUString( RTL_CONSTASCII_USTRINGPARAM( "ErrorIndicator" )));
                                     aAny >>= eErrorType;
+
+                                    aAny = xPropSet->getPropertyValue(
+                                        OUString( RTL_CONSTASCII_USTRINGPARAM( "ErrorBarStyle" )));
+                                    aAny >>= nErrorBarStyle;
                                 }
                                 catch( beans::UnknownPropertyException & rEx )
                                 {
@@ -2531,7 +2729,8 @@
                         exportRegressionCurve( aSeriesSeq[nSeriesIdx], xPropSet, rPageSize, bExportContent );
                     }
 
-                    if( eErrorType != chart::ChartErrorIndicatorType_NONE &&
+                    if( nErrorBarStyle != chart::ErrorBarStyle::NONE &&
+                        eErrorType != chart::ChartErrorIndicatorType_NONE &&
                         xPropSet.is() &&
                         mxExpPropMapper.is() )
                     {
@@ -2551,6 +2750,19 @@
 
                         if( xStatProp.is() )
                         {
+                            if( bExportContent &&
+                                nErrorBarStyle == chart::ErrorBarStyle::FROM_DATA )
+                            {
+                                // register data ranges for error bars for export in local table
+                                ::std::vector< Reference< chart2::data::XDataSequence > > aErrorBarSequences(
+                                    lcl_getErrorBarSequences( xStatProp ));
+                                for( ::std::vector< Reference< chart2::data::XDataSequence > >::const_iterator aIt(
+                                         aErrorBarSequences.begin()); aIt != aErrorBarSequences.end(); ++aIt )
+                                {
+                                    m_aDataSequencesToExport.push_back( tLabelValuesDataPair( 0, *aIt ));
+                                }
+                            }
+
                             aPropertyStates = mxExpPropMapper->Filter( xStatProp );
 
                             if( aPropertyStates.size() > 0 )
--- xmloff/source/chart/SchXMLParagraphContext.cxx	2007-06-27 16:48:25.000000000 +0200
+++ xmloff/source/chart/SchXMLParagraphContext.cxx	2008-02-21 16:59:48.000000000 +0100
@@ -39,27 +39,52 @@
 #include "SchXMLImport.hxx"
 #include "SchXMLParagraphContext.hxx"
 
-#ifndef _XMLOFF_XMLNMSPE_HXX
 #include "xmlnmspe.hxx"
-#endif
-#ifndef _XMLOFF_XMLTOKEN_HXX
 #include <xmloff/xmltoken.hxx>
-#endif
+#include <xmloff/nmspmap.hxx>
 
 using namespace rtl;
 using namespace com::sun::star;
+using namespace ::xmloff::token;
 
 SchXMLParagraphContext::SchXMLParagraphContext( SvXMLImport& rImport,
 												const OUString& rLocalName,
-												OUString& rText ) :
+												OUString& rText,
+                                                OUString * pOutId /* = 0 */ ) :
 		SvXMLImportContext( rImport, XML_NAMESPACE_TEXT, rLocalName ),
-		mrText( rText )
+		mrText( rText ),
+        mpId( pOutId )
 {
 }
 
 SchXMLParagraphContext::~SchXMLParagraphContext()
 {}
 
+void SchXMLParagraphContext::StartElement( const uno::Reference< xml::sax::XAttributeList >& xAttrList )
+{
+    // remember the id. It is used for storing the original cell range string in
+    // a local table (cached data)
+    if( mpId )
+    {
+        sal_Int16 nAttrCount = xAttrList.is()? xAttrList->getLength(): 0;
+        rtl::OUString aValue;
+
+        for( sal_Int16 i = 0; i < nAttrCount; i++ )
+        {
+            rtl::OUString sAttrName = xAttrList->getNameByIndex( i );
+            rtl::OUString aLocalName;
+            USHORT nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+
+            if( nPrefix == XML_NAMESPACE_TEXT &&
+                IsXMLToken( aLocalName, XML_ID ) )
+            {
+                (*mpId) = xAttrList->getValueByIndex( i );
+                break;	 // we only need this attribute
+            }
+        }
+    }
+}
+
 void SchXMLParagraphContext::EndElement()
 {
     mrText = maBuffer.makeStringAndClear();
--- xmloff/source/chart/SchXMLParagraphContext.hxx	2007-06-27 16:48:40.000000000 +0200
+++ xmloff/source/chart/SchXMLParagraphContext.hxx	2008-02-21 16:59:48.000000000 +0100
@@ -56,15 +56,18 @@
 {
 private:
 	::rtl::OUString& mrText;
+    ::rtl::OUString* mpId;
     ::rtl::OUStringBuffer maBuffer;
 
 public:
 	SchXMLParagraphContext( SvXMLImport& rImport,
 							const ::rtl::OUString& rLocalName,
-							::rtl::OUString& rText );
-	virtual ~SchXMLParagraphContext();	
+							::rtl::OUString& rText,
+                            ::rtl::OUString * pOutId = 0 );
+	virtual ~SchXMLParagraphContext();
+	virtual void StartElement( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList );
 	virtual void EndElement();
-    
+
 	virtual SvXMLImportContext* CreateChildContext(
 		USHORT nPrefix,
 		const ::rtl::OUString& rLocalName,
--- xmloff/source/chart/SchXMLPlotAreaContext.cxx	2008-02-18 16:33:44.000000000 +0100
+++ xmloff/source/chart/SchXMLPlotAreaContext.cxx	2008-02-21 16:59:48.000000000 +0100
@@ -1499,7 +1499,8 @@
 			IsXMLToken( aLocalName, XML_CELL_RANGE_ADDRESS ) )
 		{
             uno::Reference< chart2::XChartDocument > xNewDoc( GetImport().GetModel(), uno::UNO_QUERY );
-			mrAddress = lcl_ConvertRange( xAttrList->getValueByIndex( i ), xNewDoc );
+			mrAddress = xAttrList->getValueByIndex( i );
+            // lcl_ConvertRange( xAttrList->getValueByIndex( i ), xNewDoc );
 		}
 	}
 }
--- xmloff/source/chart/SchXMLPlotAreaContext.hxx	2007-11-23 12:37:05.000000000 +0100
+++ xmloff/source/chart/SchXMLPlotAreaContext.hxx	2008-02-21 16:59:48.000000000 +0100
@@ -35,6 +35,7 @@
 #ifndef _SCH_XMLPLOTAREACONTEXT_HXX_
 #define _SCH_XMLPLOTAREACONTEXT_HXX_
 
+#include "SchXMLImport.hxx"
 #include "SchXMLChartContext.hxx"
 
 #ifndef _XMLOFF_XMLICTXT_HXX
@@ -87,6 +88,31 @@
 
 class SchXMLPlotAreaContext : public SvXMLImportContext
 {
+public:
+	SchXMLPlotAreaContext( SchXMLImportHelper& rImpHelper,
+						   SvXMLImport& rImport, const rtl::OUString& rLocalName,
+						   ::com::sun::star::uno::Sequence<
+						       ::com::sun::star::chart::ChartSeriesAddress >& rSeriesAddresses,
+						   ::rtl::OUString& rCategoriesAddress,
+                           ::rtl::OUString& rChartAddress,
+                           sal_Bool & rHasOwnTable,
+                           sal_Bool & rAllRangeAddressesAvailable,
+                           sal_Bool & rColHasLabels,
+                           sal_Bool & rRowHasLabels,
+                           ::com::sun::star::chart::ChartDataRowSource & rDataRowSource,
+                           SeriesDefaultsAndStyles& rSeriesDefaultsAndStyles,
+                           const ::rtl::OUString& aChartTypeServiceName,
+                           tSchXMLLSequencesPerIndex & rLSequencesPerIndex,
+                           const ::com::sun::star::awt::Size & rChartSize );
+	virtual ~SchXMLPlotAreaContext();
+
+	virtual void StartElement( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList );
+	virtual SvXMLImportContext* CreateChildContext(
+		USHORT nPrefix,
+		const rtl::OUString& rLocalName,
+		const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList );
+	virtual void EndElement();
+
 private:
 	SchXMLImportHelper& mrImportHelper;
 	::com::sun::star::uno::Reference< com::sun::star::chart::XDiagram > mxDiagram;
@@ -122,31 +148,6 @@
     sal_Int32 mnCurrentDataIndex;
     bool mbGlobalChartTypeUsedBySeries;
     ::com::sun::star::awt::Size maChartSize;
-
-public:
-	SchXMLPlotAreaContext( SchXMLImportHelper& rImpHelper,
-						   SvXMLImport& rImport, const rtl::OUString& rLocalName,
-						   ::com::sun::star::uno::Sequence<
-						       ::com::sun::star::chart::ChartSeriesAddress >& rSeriesAddresses,
-						   ::rtl::OUString& rCategoriesAddress,
-                           ::rtl::OUString& rChartAddress,
-                           sal_Bool & rHasOwnTable,
-                           sal_Bool & rAllRangeAddressesAvailable,
-                           sal_Bool & rColHasLabels,
-                           sal_Bool & rRowHasLabels,
-                           ::com::sun::star::chart::ChartDataRowSource & rDataRowSource,
-                           SeriesDefaultsAndStyles& rSeriesDefaultsAndStyles,
-                           const ::rtl::OUString& aChartTypeServiceName,
-                           tSchXMLLSequencesPerIndex & rLSequencesPerIndex,
-                           const ::com::sun::star::awt::Size & rChartSize );
-	virtual ~SchXMLPlotAreaContext();
-
-	virtual void StartElement( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList );
-	virtual SvXMLImportContext* CreateChildContext(
-		USHORT nPrefix,
-		const rtl::OUString& rLocalName,
-		const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList );
-	virtual void EndElement();
 };
 
 // ----------------------------------------
--- xmloff/source/chart/SchXMLSeries2Context.cxx	2007-11-23 12:37:25.000000000 +0100
+++ xmloff/source/chart/SchXMLSeries2Context.cxx	2008-02-26 11:58:36.000000000 +0100
@@ -158,7 +158,7 @@
 			IsXMLToken( aLocalName, XML_CELL_RANGE_ADDRESS ) )
 		{
             Reference< chart2::XChartDocument > xNewDoc( GetImport().GetModel(), uno::UNO_QUERY );
-            mrAddresses.push_back( lcl_ConvertRange( xAttrList->getValueByIndex( i ), xNewDoc ));
+            mrAddresses.push_back( xAttrList->getValueByIndex( i ));
 		}
 	}
 }
@@ -230,6 +230,31 @@
         lcl_setSymbolSizeIfNeeded( xPointProp, rImport );
 }
 
+void lcl_insertErrorBarLSequencesToMap(
+    tSchXMLLSequencesPerIndex & rInOutMap,
+    const uno::Reference< beans::XPropertySet > & xSeriesProp,
+    bool bYError = true )
+{
+    Reference< chart2::data::XDataSource > xErrorBarSource;
+    const OUString aPropName(
+        bYError
+        ? ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ErrorBarY" ))
+        : ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ErrorBarX" )));
+    if( ( xSeriesProp->getPropertyValue( aPropName ) >>= xErrorBarSource ) &&
+        xErrorBarSource.is() )
+    {
+        Sequence< Reference< chart2::data::XLabeledDataSequence > > aLSequences(
+            xErrorBarSource->getDataSequences());
+        for( sal_Int32 nIndex = 0; nIndex < aLSequences.getLength(); ++nIndex )
+        {
+            // use "0" as data index. This is ok, as it is not used for error bars
+            rInOutMap.insert( 
+                tSchXMLLSequencesPerIndex::value_type(
+                    tSchXMLIndexWithPart( 0, SCH_XML_PART_ERROR_BARS ), aLSequences[ nIndex ] ));
+        }
+    }
+}
+
 } // anonymous namespace
 
 // ================================================================================
@@ -312,17 +337,11 @@
 		switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
 		{
 			case XML_TOK_SERIES_CELL_RANGE:
-                if( xRangeConversion.is())
-                    m_aSeriesRange = xRangeConversion->convertRangeFromXML( aValue );
-                else
-                    m_aSeriesRange = aValue;
+                m_aSeriesRange = aValue;
                 bHasRange = true;
 				break;
 			case XML_TOK_SERIES_LABEL_ADDRESS:
-                if( xRangeConversion.is())
-                    m_aSeriesLabelRange = xRangeConversion->convertRangeFromXML( aValue );
-                else
-                    m_aSeriesLabelRange = aValue;
+                m_aSeriesLabelRange = aValue;
                 bHasLabelRange = true;
 				break;
 			case XML_TOK_SERIES_ATTACHED_AXIS:
@@ -426,7 +445,8 @@
                 if( bHasRange )
                     try
                     {
-                        xSeq.set( xDataProvider->createDataSequenceByRangeRepresentation( m_aSeriesRange ));
+                        xSeq.set( xDataProvider->createDataSequenceByRangeRepresentation( lcl_ConvertRange( m_aSeriesRange, mxNewDoc )));
+                        SchXMLTools::setXMLRangePropertyAtDataSequence( xSeq, m_aSeriesRange );
                     }
                     catch( const lang::IllegalArgumentException & ex )
                     {
@@ -455,7 +475,11 @@
                 {
                     try
                     {
-                        xLabeledSeq->setLabel( xDataProvider->createDataSequenceByRangeRepresentation( m_aSeriesLabelRange ));
+                        Reference< chart2::data::XDataSequence > xLabelSequence(
+                            xDataProvider->createDataSequenceByRangeRepresentation(
+                                lcl_ConvertRange( m_aSeriesLabelRange, mxNewDoc )));
+                        xLabeledSeq->setLabel( xLabelSequence );
+                        SchXMLTools::setXMLRangePropertyAtDataSequence( xLabelSequence, m_aSeriesLabelRange );
                     }
                     catch( const lang::IllegalArgumentException & ex )
                     {
@@ -467,9 +491,9 @@
                 }
 
                 // Note: Even if we have no label, we have to register the label
-                // for creation, because internal data always has labels. If the
-                // don't exist in the original, auto-generated labels are used
-                // for the internal data.
+                // for creation, because internal data always has labels. If
+                // they don't exist in the original, auto-generated labels are
+                // used for the internal data.
                 maPostponedSequences.insert(
                     tSchXMLLSequencesPerIndex::value_type(
                         tSchXMLIndexWithPart( mrCurrentDataIndex, SCH_XML_PART_LABEL ), xLabeledSeq ));
@@ -602,7 +626,8 @@
         Reference< chart2::data::XDataSequence > xSeq;
         try
         {
-            xSeq.set( xDataProvider->createDataSequenceByRangeRepresentation( aXValuesRange ));
+            xSeq.set( xDataProvider->createDataSequenceByRangeRepresentation( lcl_ConvertRange( aXValuesRange, mxNewDoc )));
+            SchXMLTools::setXMLRangePropertyAtDataSequence( xSeq, aXValuesRange );
         }
         catch( const lang::IllegalArgumentException & ex )
         {
@@ -810,7 +835,8 @@
         , ::rtl::OUString& rCurrStyleName
         , SchXMLImportHelper& rImportHelper
         , const SvXMLImport& rImport
-        , bool bIsStockChart )
+        , bool bIsStockChart
+        , tSchXMLLSequencesPerIndex & rInOutLSequencesPerIndex )
 {
     ::std::list< DataRowPointStyle >::iterator iStyle;
 
@@ -847,6 +873,24 @@
                             dynamic_cast< const XMLPropStyleContext * >( rpStyle ));
                     if( pPropStyleContext )
                     {
+                        // error bar style must be set before the other error
+                        // bar properties (which may be alphabetically before
+                        // this property)
+                        bool bHasErrorBarRangesFromData = false;
+                        {
+                            const ::rtl::OUString aErrorBarStylePropName( RTL_CONSTASCII_USTRINGPARAM("ErrorBarStyle"));
+                            uno::Any aErrorBarStyle(
+                                SchXMLTools::getPropertyFromContext( aErrorBarStylePropName, pPropStyleContext, pStylesCtxt ));
+                            if( aErrorBarStyle.hasValue())
+                            {
+                                xSeriesProp->setPropertyValue( aErrorBarStylePropName, aErrorBarStyle );
+                                sal_Int32 eEBStyle = chart::ErrorBarStyle::NONE;
+                                bHasErrorBarRangesFromData =
+                                    ( ( aErrorBarStyle >>= eEBStyle ) &&
+                                      eEBStyle == chart::ErrorBarStyle::FROM_DATA );
+                            }
+                        }
+
                         //don't set the style to the min max line series of a stock chart
                         //otherwise the min max line properties gets overwritten and the series becomes invisible typically
                         bool bIsMinMaxSeries = false;
@@ -861,6 +905,8 @@
                             pPropStyleContext->FillPropertySet( xSeriesProp );
                             if( iStyle->mbSymbolSizeForSeriesIsMissingInFile )
                                 lcl_setSymbolSizeIfNeeded( xSeriesProp, rImport );
+                            if( bHasErrorBarRangesFromData )
+                                lcl_insertErrorBarLSequencesToMap( rInOutLSequencesPerIndex, xSeriesProp );
                         }
                     }
 				}
--- xmloff/source/chart/SchXMLSeries2Context.hxx	2007-11-23 12:37:40.000000000 +0100
+++ xmloff/source/chart/SchXMLSeries2Context.hxx	2008-02-21 16:59:49.000000000 +0100
@@ -135,7 +135,8 @@
         , ::rtl::OUString& rCurrStyleName
         , SchXMLImportHelper& rImportHelper
         , const SvXMLImport& rImport
-        , bool bIsStockChart );
+        , bool bIsStockChart
+        , tSchXMLLSequencesPerIndex & rInOutLSequencesPerIndex );
 
     static void setStylesToStatisticsObjects( SeriesDefaultsAndStyles& rSeriesDefaultsAndStyles
         , const SvXMLStylesContext* pStylesCtxt
--- xmloff/source/chart/SchXMLTableContext.cxx	2008-01-29 18:00:44.000000000 +0100
+++ xmloff/source/chart/SchXMLTableContext.cxx	2008-02-26 11:58:36.000000000 +0100
@@ -99,6 +99,13 @@
 
 namespace
 {
+
+const OUString lcl_aLabelPrefix( RTL_CONSTASCII_USTRINGPARAM("label "));
+const OUString lcl_aCategoriesRange( RTL_CONSTASCII_USTRINGPARAM("categories"));
+
+typedef ::std::multimap< ::rtl::OUString, ::rtl::OUString >
+    lcl_tOriginalRangeToInternalRangeMap;
+
 Sequence< OUString > lcl_getCategoriesFromTable( const SchXMLTable & rTable, bool bHasLabels )
 {
     sal_Int32 nNumRows( static_cast< sal_Int32 >( rTable.aData.size()));
@@ -164,30 +171,6 @@
     return aRet;
 }
 
-struct lcl_setCategories : public ::std::unary_function< Reference< chart2::XAxis >, void >
-{
-    lcl_setCategories( const Reference< chart2::data::XDataProvider > & xProvider ) :
-            m_xProvider( xProvider )
-    {}
-    void operator() ( const Reference< chart2::XAxis > & xAxis )
-    {
-        if( xAxis.is() && m_xProvider.is())
-        {
-            chart2::ScaleData aSData( xAxis->getScaleData());
-            if( aSData.Categories.is())
-            {
-                aSData.Categories->setValues(
-                    m_xProvider->createDataSequenceByRangeRepresentation(
-                        OUString(RTL_CONSTASCII_USTRINGPARAM("categories"))));
-                xAxis->setScaleData( aSData );
-            }
-        }
-    }
-
-private:
-    Reference< chart2::data::XDataProvider > m_xProvider;
-};
-
 void lcl_ApplyColumnLabels(
     const ::std::vector< SchXMLCell > & rFirstRow,
     Sequence< OUString > & rOutColumnLabels,
@@ -327,6 +310,68 @@
         xDataArray->setColumnDescriptions( aColumnLabels );
 }
 
+void lcl_fillRangeMapping(
+    const SchXMLTable & rTable,
+    lcl_tOriginalRangeToInternalRangeMap & rOutRangeMap,
+    chart::ChartDataRowSource eDataRowSource )
+{
+    sal_Int32 nRowOffset = ( rTable.bHasHeaderRow ? 1 : 0 );
+    sal_Int32 nColOffset = ( rTable.bHasHeaderColumn ? 1 : 0 );
+
+    // Fill range mapping
+    const size_t nTableRowCount( rTable.aData.size());
+    for( size_t nRow = 0; nRow < nTableRowCount; ++nRow )
+    {
+        const ::std::vector< SchXMLCell > & rRow( rTable.aData[nRow] );
+        const size_t nTableColCount( rRow.size());
+        for( size_t nCol = 0; nCol < nTableColCount; ++nCol )
+        {
+            OUString aRangeId( rRow[nCol].aRangeId );
+            if( aRangeId.getLength())
+            {
+                if( eDataRowSource == chart::ChartDataRowSource_COLUMNS )
+                {
+                    if( nCol == 0 && rTable.bHasHeaderColumn )
+                    {
+                        OSL_ASSERT( static_cast< sal_Int32 >( nRow ) == nRowOffset );
+                        rOutRangeMap.insert( lcl_tOriginalRangeToInternalRangeMap::value_type(
+                                                 aRangeId, lcl_aCategoriesRange ));
+                    }
+                    else
+                    {
+                        OUString aColNumStr = OUString::valueOf( static_cast< sal_Int32 >( nCol - nColOffset ));
+                        if( nRow == 0 && rTable.bHasHeaderRow )
+                            rOutRangeMap.insert( lcl_tOriginalRangeToInternalRangeMap::value_type(
+                                                     aRangeId, lcl_aLabelPrefix + aColNumStr ));
+                        else
+                            rOutRangeMap.insert( lcl_tOriginalRangeToInternalRangeMap::value_type(
+                                                     aRangeId, aColNumStr ));
+                    }
+                }
+                else // eDataRowSource == chart::ChartDataRowSource_ROWS
+                {
+                    if( nRow == 0 && rTable.bHasHeaderRow )
+                    {
+                        OSL_ASSERT( static_cast< sal_Int32 >( nCol ) == nColOffset );
+                        rOutRangeMap.insert( lcl_tOriginalRangeToInternalRangeMap::value_type(
+                                                 aRangeId, lcl_aCategoriesRange ));
+                    }
+                    else
+                    {
+                        OUString aRowNumStr = OUString::valueOf( static_cast< sal_Int32 >( nRow - nRowOffset ));
+                        if( nCol == 0 && rTable.bHasHeaderColumn )
+                            rOutRangeMap.insert( lcl_tOriginalRangeToInternalRangeMap::value_type(
+                                                     aRangeId, lcl_aLabelPrefix + aRowNumStr ));
+                        else
+                            rOutRangeMap.insert( lcl_tOriginalRangeToInternalRangeMap::value_type(
+                                                     aRangeId, aRowNumStr ));
+                    }
+                }
+            }
+        }
+    }
+}
+
 void lcl_copyProperties(
     const Reference< beans::XPropertySet > & xSource,
     const Reference< beans::XPropertySet > & xDestination )
@@ -358,6 +403,44 @@
     }
 }
 
+Reference< chart2::data::XDataSequence >
+    lcl_reassignDataSequence(
+        const Reference< chart2::data::XDataSequence > & xSequence,
+        const Reference< chart2::data::XDataProvider > & xDataProvider,
+        lcl_tOriginalRangeToInternalRangeMap & rRangeMap,
+        const OUString & rRange )
+{
+    Reference< chart2::data::XDataSequence > xResult( xSequence );
+    lcl_tOriginalRangeToInternalRangeMap::iterator aIt( rRangeMap.find( rRange ));
+    if( aIt != rRangeMap.end())
+    {
+        // set sequence with correct data
+        xResult.set( xDataProvider->createDataSequenceByRangeRepresentation( aIt->second ));
+        // remove translation, because it was used
+        rRangeMap.erase( aIt );
+    }
+
+    return xResult;
+}
+
+bool lcl_mapContainsRange(
+    lcl_tOriginalRangeToInternalRangeMap & rRangeMap,
+    const OUString & rRange )
+{
+    lcl_tOriginalRangeToInternalRangeMap::iterator aIt( rRangeMap.find( rRange ));
+    return ( aIt != rRangeMap.end());
+}
+
+bool lcl_tableOfRangeMatches(
+    const ::rtl::OUString & rRange,
+    const ::rtl::OUString & rTableName )
+{
+    // both strings are non-empty and the table name is part of the range
+    return ( (rRange.getLength() > 0) &&
+             (rTableName.getLength() > 0) &&
+             (rRange.indexOf( rTableName ) != -1 ));
+}
+
 } // anonymous namespace
 
 
@@ -422,6 +505,26 @@
 	return pContext;
 }
 
+void SchXMLTableContext::StartElement( const uno::Reference< xml::sax::XAttributeList >& xAttrList )
+{
+    // get table-name
+	sal_Int16 nAttrCount = xAttrList.is()? xAttrList->getLength(): 0;
+
+	for( sal_Int16 i = 0; i < nAttrCount; i++ )
+	{
+		rtl::OUString sAttrName = xAttrList->getNameByIndex( i );
+		rtl::OUString aLocalName;
+		USHORT nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+
+		if( nPrefix == XML_NAMESPACE_TABLE &&
+			IsXMLToken( aLocalName, XML_NAME ) )
+		{
+			mrTable.aTableNameOfFile = xAttrList->getValueByIndex( i );
+			break;	 // we only need this attribute
+		}
+	}
+}
+
 // ========================================
 // classes for columns
 // ========================================
@@ -686,12 +789,10 @@
 	SvXMLImportContext* pContext = 0;
 
 	// <text:p> element
-	if( mbReadPara &&
-		nPrefix == XML_NAMESPACE_TEXT &&
+	if( nPrefix == XML_NAMESPACE_TEXT &&
         IsXMLToken( rLocalName, XML_P ) )
 	{
-		// we have to read a string here (not a float)
-		pContext = new SchXMLParagraphContext( GetImport(), rLocalName, maCellContent );
+        pContext = new SchXMLParagraphContext( GetImport(), rLocalName, maCellContent, &maRangeId );
 	}
 	else
 	{
@@ -704,7 +805,9 @@
 void SchXMLTableCellContext::EndElement()
 {
 	if( mbReadPara && maCellContent.getLength())
-		mrTable.aData[ mrTable.nRowIndex ][ mrTable.nColumnIndex ].aString = maCellContent;
+        mrTable.aData[ mrTable.nRowIndex ][ mrTable.nColumnIndex ].aString = maCellContent;
+    if( maRangeId.getLength())
+        mrTable.aData[ mrTable.nRowIndex ][ mrTable.nColumnIndex ].aRangeId = maRangeId;
 }
 
 // ========================================
@@ -713,7 +816,7 @@
 // (this is just a workaround for clipboard handling in EA2)
 void SchXMLTableHelper::applyTableSimple(
 	const SchXMLTable& rTable,
-	uno::Reference< chart::XChartDataArray > xData )
+	const uno::Reference< chart::XChartDataArray > & xData )
 {
 	// interpret table like this:
 	//
@@ -811,7 +914,6 @@
 
 void SchXMLTableHelper::applyTable(
 	const SchXMLTable& rTable,
-    const tSchXMLLSequencesPerIndex & rLSequencesPerIndex,
 	uno::Reference< chart2::XChartDocument > xChartDoc )
 {
     if( ! (xChartDoc.is() && xChartDoc->hasInternalDataProvider()))
@@ -821,9 +923,6 @@
     if( ! xDataArray.is())
         return;
     OSL_ASSERT( xDataProv.is());
-    Reference< chart2::XDiagram > xDiagram( xChartDoc->getFirstDiagram());
-    if( ! xDiagram.is())
-        return;
 
     // prerequisite for this method: all objects (data series, domains, etc.)
     // need their own range string.
@@ -838,53 +937,112 @@
     // apply all data read in the table to the chart data-array of the internal
     // data provider
     lcl_applyXMLTableToInternalDataprovider( rTable, xDataArray );
+}
+
+void SchXMLTableHelper::postProcessTable(
+	const SchXMLTable& rTable,
+    const tSchXMLLSequencesPerIndex & rLSequencesPerIndex,
+	uno::Reference< chart2::XChartDocument > xChartDoc,
+    chart::ChartDataRowSource eDataRowSource )
+{
+    if( ! (xChartDoc.is() && xChartDoc->hasInternalDataProvider()))
+        return;
+    Reference< chart2::data::XDataProvider >  xDataProv( xChartDoc->getDataProvider());
+
+    // create a mapping from original ranges to new ranges
+    lcl_tOriginalRangeToInternalRangeMap aRangeMap;
+
+    lcl_fillRangeMapping( rTable, aRangeMap, eDataRowSource );
 
     bool bCategoriesApplied = false;
-    // apply the data to the objects that have been parsed and marked for
-    // getting the new data in ther rLSequencesPerIndex map.
-    for( tSchXMLLSequencesPerIndex::const_iterator aIt( rLSequencesPerIndex.begin());
-         aIt != rLSequencesPerIndex.end(); ++aIt )
+    // translate ranges (using the map created before)
+    for( tSchXMLLSequencesPerIndex::const_iterator aLSeqIt( rLSequencesPerIndex.begin());
+         aLSeqIt != rLSequencesPerIndex.end(); ++aLSeqIt )
     {
-        if( aIt->second.is())
+        if( aLSeqIt->second.is())
         {
-            if( aIt->first.second == SCH_XML_PART_VALUES )
+            // values/error bars/categories
+            if( aLSeqIt->first.second == SCH_XML_PART_VALUES ||
+                aLSeqIt->first.second == SCH_XML_PART_ERROR_BARS )
             {
-                if( aIt->first.first == SCH_XML_CATEGORIES_INDEX )
+                Reference< chart2::data::XDataSequence > xSeq( aLSeqIt->second->getValues());
+                OUString aRange;
+                if( xSeq.is() &&
+                    SchXMLTools::getXMLRangePropertyFromDataSequence( xSeq, aRange, /* bClearProp = */ true ) &&
+                    lcl_mapContainsRange( aRangeMap, aRange ))
                 {
-                    Reference< beans::XPropertySet > xOldSequenceProp( aIt->second->getValues(), uno::UNO_QUERY );
-                    Reference< chart2::data::XDataSequence > xNewSequence(
-                        xDataProv->createDataSequenceByRangeRepresentation(
-                            OUString(RTL_CONSTASCII_USTRINGPARAM("categories"))));
-                    lcl_copyProperties(
-                        xOldSequenceProp, Reference< beans::XPropertySet >( xNewSequence, uno::UNO_QUERY ));
-                    aIt->second->setValues( xNewSequence );
-                    bCategoriesApplied = true;
+                    Reference< chart2::data::XDataSequence > xNewSeq(
+                        lcl_reassignDataSequence( xSeq, xDataProv, aRangeMap, aRange ));
+                    if( xNewSeq != xSeq )
+                    {
+                        lcl_copyProperties( Reference< beans::XPropertySet >( xSeq, uno::UNO_QUERY ),
+                                            Reference< beans::XPropertySet >( xNewSeq, uno::UNO_QUERY ));
+                        aLSeqIt->second->setValues( xNewSeq );
+                    }
                 }
                 else
                 {
-                    Reference< beans::XPropertySet > xOldSequenceProp( aIt->second->getValues(), uno::UNO_QUERY );
-                    OUString aRep( OUString::valueOf( aIt->first.first ));
-                    Reference< chart2::data::XDataSequence > xNewSequence(
-                        xDataProv->createDataSequenceByRangeRepresentation( aRep ));
-                    lcl_copyProperties(
-                        xOldSequenceProp, Reference< beans::XPropertySet >( xNewSequence, uno::UNO_QUERY ));
-                    aIt->second->setValues( xNewSequence );
+                    if( lcl_tableOfRangeMatches( aRange, rTable.aTableNameOfFile ))
+                    {
+                        if( aLSeqIt->first.first == SCH_XML_CATEGORIES_INDEX )
+                            bCategoriesApplied = true;
+                    }
+                    else
+                    {
+                        if( aLSeqIt->first.first == SCH_XML_CATEGORIES_INDEX )
+                        {
+                            Reference< beans::XPropertySet > xOldSequenceProp( aLSeqIt->second->getValues(), uno::UNO_QUERY );
+                            Reference< chart2::data::XDataSequence > xNewSequence(
+                                xDataProv->createDataSequenceByRangeRepresentation(
+                                    OUString(RTL_CONSTASCII_USTRINGPARAM("categories"))));
+                            lcl_copyProperties(
+                                xOldSequenceProp, Reference< beans::XPropertySet >( xNewSequence, uno::UNO_QUERY ));
+                            aLSeqIt->second->setValues( xNewSequence );
+                            bCategoriesApplied = true;
+                        }
+                        else
+                        {
+                            Reference< beans::XPropertySet > xOldSequenceProp( aLSeqIt->second->getValues(), uno::UNO_QUERY );
+                            OUString aRep( OUString::valueOf( aLSeqIt->first.first ));
+                            Reference< chart2::data::XDataSequence > xNewSequence(
+                                xDataProv->createDataSequenceByRangeRepresentation( aRep ));
+                            lcl_copyProperties(
+                                xOldSequenceProp, Reference< beans::XPropertySet >( xNewSequence, uno::UNO_QUERY ));
+                            aLSeqIt->second->setValues( xNewSequence );
+                        }
+                    }
                 }
             }
-            else
+            else // labels
             {
-                Reference< beans::XPropertySet > xOldSequenceProp( aIt->second->getLabel(), uno::UNO_QUERY );
-                OSL_ASSERT( aIt->first.second == SCH_XML_PART_LABEL );
-                // index -1 is for categories => shouldn't have a label
-                OSL_ASSERT( aIt->first.first >= 0 );
-                OUString aRep( RTL_CONSTASCII_USTRINGPARAM("label "));
-                aRep += OUString::valueOf( aIt->first.first );
-
-                Reference< chart2::data::XDataSequence > xNewSequence(
-                    xDataProv->createDataSequenceByRangeRepresentation( aRep ));
-                lcl_copyProperties(
-                    xOldSequenceProp, Reference< beans::XPropertySet >( xNewSequence, uno::UNO_QUERY ));
-                aIt->second->setLabel( xNewSequence );
+                OSL_ASSERT( aLSeqIt->first.second == SCH_XML_PART_LABEL );
+                // labels
+                Reference< chart2::data::XDataSequence > xSeq( aLSeqIt->second->getLabel());
+                OUString aRange;
+                if( xSeq.is() &&
+                    SchXMLTools::getXMLRangePropertyFromDataSequence( xSeq, aRange, /* bClearProp = */ true ) &&
+                    lcl_mapContainsRange( aRangeMap, aRange ))
+                {
+                    Reference< chart2::data::XDataSequence > xNewSeq(
+                        lcl_reassignDataSequence( xSeq, xDataProv, aRangeMap, aRange ));
+                    if( xNewSeq != xSeq )
+                    {
+                        lcl_copyProperties( Reference< beans::XPropertySet >( xSeq, uno::UNO_QUERY ),
+                                            Reference< beans::XPropertySet >( xNewSeq, uno::UNO_QUERY ));
+                        aLSeqIt->second->setLabel( xNewSeq );
+                    }
+                }
+                else if( ! lcl_tableOfRangeMatches( aRange, rTable.aTableNameOfFile ))
+                {
+                    OUString aRep( RTL_CONSTASCII_USTRINGPARAM("label "));
+                    aRep += OUString::valueOf( aLSeqIt->first.first );
+
+                    Reference< chart2::data::XDataSequence > xNewSeq(
+                        xDataProv->createDataSequenceByRangeRepresentation( aRep ));
+                    lcl_copyProperties( Reference< beans::XPropertySet >( xSeq, uno::UNO_QUERY ),
+                                        Reference< beans::XPropertySet >( xNewSeq, uno::UNO_QUERY ));
+                    aLSeqIt->second->setLabel( xNewSeq );
+                }
             }
         }
     }
--- xmloff/source/chart/SchXMLTableContext.hxx	2007-06-27 16:50:12.000000000 +0200
+++ xmloff/source/chart/SchXMLTableContext.hxx	2008-02-26 11:58:36.000000000 +0100
@@ -41,13 +41,13 @@
 #ifndef SCH_XMLIMPORT_HXX_
 #include "SchXMLImport.hxx"
 #endif
+// #include "SchXMLChartContext.hxx"
 
 #ifndef _COM_SUN_STAR_UNO_SEQUENCE_HXX_
 #include <com/sun/star/uno/Sequence.hxx>
 #endif
-// #ifndef _COM_SUN_STAR_CHART_CHARTDATAROWSOURCE_HPP_
-// #include <com/sun/star/chart/ChartDataRowSource.hpp>
-// #endif
+
+#include <com/sun/star/chart/ChartDataRowSource.hpp>
 
 #include "transporttypes.hxx"
 
@@ -83,6 +83,7 @@
 		USHORT nPrefix,
 		const rtl::OUString& rLocalName,
 		const com::sun::star::uno::Reference< com::sun::star::xml::sax::XAttributeList >& xAttrList );
+	virtual void StartElement( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XAttributeList >& xAttrList );
 };
 
 // ----------------------------------------
@@ -104,16 +105,23 @@
 	/// The data for the ChartDocument is applied linearly
 	static void applyTableSimple(
 		const SchXMLTable& rTable,
-		com::sun::star::uno::Reference< com::sun::star::chart::XChartDataArray > xData );
+		const com::sun::star::uno::Reference< com::sun::star::chart::XChartDataArray > & xData );
 
 	/** The data for the ChartDocument is applied by reading the
 		table, the addresses of series, the addresses of labels,
 		the cell-range-address for the categories
 	 */
 	static void applyTable( const SchXMLTable& rTable,
-                            const tSchXMLLSequencesPerIndex & rLSequencesPerIndex,
 							com::sun::star::uno::Reference< com::sun::star::chart2::XChartDocument > xChartDoc );
-//    ::com::sun::star::chart::ChartDataRowSource eDataRowSource );
+
+    /** Second part of applyTable that has to be called after the data series
+        got their styles set.  This function reorders local data to fit the
+        correct data structure.
+     */
+	static void postProcessTable( const SchXMLTable& rTable,
+                                  const tSchXMLLSequencesPerIndex & rLSequencesPerIndex,
+                                  com::sun::star::uno::Reference< com::sun::star::chart2::XChartDocument > xChartDoc,
+                                  ::com::sun::star::chart::ChartDataRowSource eDataRowSource );
 };
 
 // ========================================
@@ -217,6 +225,7 @@
 	SchXMLImportHelper& mrImportHelper;
 	SchXMLTable& mrTable;
 	rtl::OUString maCellContent;
+    rtl::OUString maRangeId;
 	sal_Bool mbReadPara;
 
 public:
--- xmloff/source/chart/SchXMLTools.cxx	2007-11-23 12:38:03.000000000 +0100
+++ xmloff/source/chart/SchXMLTools.cxx	2008-02-26 11:58:36.000000000 +0100
@@ -83,6 +83,7 @@
 
 #include <com/sun/star/uno/XComponentContext.hpp>
 #include <com/sun/star/chart2/data/XDataProvider.hpp>
+#include <com/sun/star/chart2/data/XRangeXMLConversion.hpp>
 #include <com/sun/star/chart2/XChartDocument.hpp>
 #include <com/sun/star/chart2/XCoordinateSystemContainer.hpp>
 #include <com/sun/star/chart2/XRegressionCurveContainer.hpp>
@@ -361,8 +362,23 @@
                                     GetNewLabeledDataSequence());
                                 try
                                 {
-                                    xLabeledSeq->setValues(
-                                        xDataProvider->createDataSequenceByRangeRepresentation( rRangeAddress ));
+                                    OUString aConvertedRange( rRangeAddress );
+                                    bool bRangeConverted = false;
+                                    if( ! (xNewDoc->hasInternalDataProvider() &&
+                                           aConvertedRange.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("categories"))))
+                                    {
+                                        Reference< chart2::data::XRangeXMLConversion > xXMLConv( xDataProvider, uno::UNO_QUERY );
+                                        if( xXMLConv.is())
+                                        {
+                                            aConvertedRange = xXMLConv->convertRangeFromXML( rRangeAddress );
+                                            bRangeConverted = true;
+                                        }
+                                    }
+                                    Reference< chart2::data::XDataSequence > xSeq(
+                                        xDataProvider->createDataSequenceByRangeRepresentation( aConvertedRange ));
+                                    xLabeledSeq->setValues( xSeq );
+                                    if( bRangeConverted )
+                                        setXMLRangePropertyAtDataSequence( xSeq, rRangeAddress );
                                 }
                                 catch( const lang::IllegalArgumentException & ex )
                                 {
@@ -504,4 +520,59 @@
     return xResult;
 }
 
+void setXMLRangePropertyAtDataSequence(
+    const Reference< chart2::data::XDataSequence > & xDataSequence,
+    const OUString & rXMLRange )
+{
+    if( !xDataSequence.is())
+        return;
+    try
+    {
+        const OUString aXMLRangePropName( RTL_CONSTASCII_USTRINGPARAM( "CachedXMLRange" ));
+        Reference< beans::XPropertySet > xProp( xDataSequence, uno::UNO_QUERY_THROW );
+        Reference< beans::XPropertySetInfo > xInfo( xProp->getPropertySetInfo());
+        if( xInfo.is() && xInfo->hasPropertyByName( aXMLRangePropName ))
+            xProp->setPropertyValue( aXMLRangePropName, uno::makeAny( rXMLRange ));
+    }
+    catch( const uno::Exception & ex )
+    {
+        (void)ex; // avoid warning for pro build
+        OSL_ENSURE( false, ::rtl::OUStringToOString(
+                        ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Exception caught, Message: " )) +
+                        ex.Message, RTL_TEXTENCODING_ASCII_US ).getStr());
+    }
+}
+
+bool getXMLRangePropertyFromDataSequence(
+    const Reference< chart2::data::XDataSequence > & xDataSequence,
+    OUString & rOutXMLRange,
+    bool bClearProp /* = false */)
+{
+    bool bResult = false;
+    if( xDataSequence.is())
+    {
+        try
+        {
+            const OUString aXMLRangePropName( RTL_CONSTASCII_USTRINGPARAM( "CachedXMLRange" ));
+            Reference< beans::XPropertySet > xProp( xDataSequence, uno::UNO_QUERY_THROW );
+            Reference< beans::XPropertySetInfo > xInfo( xProp->getPropertySetInfo());
+            bResult =
+                ( xInfo.is() && xInfo->hasPropertyByName( aXMLRangePropName ) &&
+                  ( xProp->getPropertyValue( aXMLRangePropName ) >>= rOutXMLRange ) &&
+                  rOutXMLRange.getLength());
+            // clear the property after usage
+            if( bClearProp && bResult )
+                xProp->setPropertyValue( aXMLRangePropName, uno::Any( OUString()));
+        }
+        catch( const uno::Exception & ex )
+        {
+            (void)ex; // avoid warning for pro build
+            OSL_ENSURE( false, ::rtl::OUStringToOString(
+                            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Exception caught, Message: " )) +
+                            ex.Message, RTL_TEXTENCODING_ASCII_US ).getStr());
+        }
+    }
+    return bResult;
+}
+
 } // namespace SchXMLTools
--- xmloff/source/chart/SchXMLTools.hxx	2007-11-23 12:38:23.000000000 +0100
+++ xmloff/source/chart/SchXMLTools.hxx	2008-02-21 16:59:49.000000000 +0100
@@ -108,6 +108,30 @@
     ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XRegressionCurve > getRegressionCurve(
         const ::com::sun::star::uno::Reference<
             ::com::sun::star::chart2::XDataSeries > & xDataSeries );
+
+    /** checks if the data sequence has the property "CachedXMLRange" (true for
+        internal data sequences), and if so sets this property to the range
+        given in rXMLRange
+     */
+    void setXMLRangePropertyAtDataSequence(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::data::XDataSequence > & xDataSequence,
+        const ::rtl::OUString & rXMLRange );
+
+    /** checks if the data sequence has the property "CachedXMLRange" (true for
+        internal data sequences), and if so retrieves this property and applies
+        it to the range given in rOutXMLRange.
+
+        @param bClearProp If true, the property is reset to its default after it
+                          was assigned to rOutXMLRange
+
+        @return true, if the property was found, assigned and is non-empty
+     */
+    bool getXMLRangePropertyFromDataSequence(
+        const ::com::sun::star::uno::Reference<
+            ::com::sun::star::chart2::data::XDataSequence > & xDataSequence,
+        ::rtl::OUString & rOutXMLRange,
+        bool bClearProp = false );
 }
 
 #endif	// SCH_XML_TOOLS_HXX_
--- xmloff/source/chart/transporttypes.hxx	2007-11-23 12:38:35.000000000 +0100
+++ xmloff/source/chart/transporttypes.hxx	2008-02-26 11:58:36.000000000 +0100
@@ -57,6 +57,7 @@
 	rtl::OUString aString;
 	double fValue;
 	SchXMLCellType eType;
+    rtl::OUString aRangeId;
 
 	SchXMLCell() : fValue( 0.0 ), eType( SCH_CELL_TYPE_UNKNOWN ) {}
 };
@@ -74,6 +75,8 @@
     bool bHasHeaderRow;
     bool bHasHeaderColumn;
 
+    ::rtl::OUString aTableNameOfFile;                   /// the table name read at the table:table element
+
 	SchXMLTable() : nRowIndex( -1 ),
 					nColumnIndex( -1 ),
 					nMaxColumnIndex( -1 ),
@@ -88,7 +91,8 @@
 enum SchXMLLabeledSequencePart
 {
     SCH_XML_PART_LABEL,
-    SCH_XML_PART_VALUES
+    SCH_XML_PART_VALUES,
+    SCH_XML_PART_ERROR_BARS
 };
 typedef ::std::pair< tSchXMLIndex, SchXMLLabeledSequencePart > tSchXMLIndexWithPart;
 typedef ::std::multimap< tSchXMLIndexWithPart,
@@ -186,4 +190,7 @@
 		{}
 };
 
+typedef ::std::multimap< ::rtl::OUString, ::com::sun::star::uno::Reference<
+        ::com::sun::star::chart2::data::XDataSequence > > tSchXMLRangeSequenceMap;
+
 #endif	// SCH_XML_TRANSPORTTYPES_HXX_
--- xmloff/source/core/xmltoken.cxx	2008-02-18 16:34:20.000000000 +0100
+++ xmloff/source/core/xmltoken.cxx	2008-02-21 16:59:49.000000000 +0100
@@ -2986,6 +2986,12 @@
         TOKEN( "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:field:1.0",   XML_N_FIELD ),
         TOKEN( "field",         XML_NP_FIELD ),
         TOKEN( "angle-offset",          XML_ANGLE_OFFSET ),
+        // bm: chart error bar extensions (ODF 1.2)
+        TOKEN( "standard-error",        XML_STANDARD_ERROR ),
+        TOKEN( "cell-range" ,           XML_CELL_RANGE ),
+        TOKEN( "error-lower-range",     XML_ERROR_LOWER_RANGE ),
+        TOKEN( "error-upper-range",     XML_ERROR_UPPER_RANGE ),
+
 #if OSL_DEBUG_LEVEL > 0
         { 0, NULL, NULL,                       XML_TOKEN_END }
 #else
