--- chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx	2008-02-18 16:38:45.000000000 +0100
+++ chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx	2008-02-21 17:52:22.000000000 +0100
@@ -138,6 +138,8 @@
 
     PROP_DIAGRAM_STARTING_ANGLE,
 
+    PROP_DIAGRAM_MISSING_VALUE_TREATMENT,
+
     PROP_DIAGRAM_HAS_X_AXIS,
     PROP_DIAGRAM_HAS_X_AXIS_DESCR,
     PROP_DIAGRAM_HAS_X_AXIS_TITLE,
@@ -406,6 +408,13 @@
                   ::getBooleanCppuType(),
                   beans::PropertyAttribute::BOUND
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
+
+    rOutProperties.push_back(
+        Property( C2U( "MissingValueTreatment" ),
+                  PROP_DIAGRAM_MISSING_VALUE_TREATMENT,
+                  ::getCppuType( reinterpret_cast< const sal_Int32 * >(0)),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEVOID ));
 }
 
 const uno::Sequence< Property > & lcl_GetPropertySequence()
--- chart2/source/controller/dialogs/dlg_ObjectProperties.cxx	2008-02-18 16:44:58.000000000 +0100
+++ chart2/source/controller/dialogs/dlg_ObjectProperties.cxx	2008-02-21 18:10:37.000000000 +0100
@@ -134,6 +134,7 @@
         , m_bHasRegressionProperties(false)
         , m_bProvidesSecondaryYAxis(false)
         , m_bProvidesOverlapAndGapWidth(false)
+        , m_bProvidesBarConnectors(false)
         , m_bHasAreaProperties(false)
         , m_bHasLineProperties(false)
         , m_bHasSymbolProperties(false)
@@ -141,6 +142,7 @@
         , m_bCanAxisLabelsBeStaggered(false)
         , m_bHasNumberProperties(false)
         , m_bProvidesStartingAngle(false)
+        , m_bProvidesMissingValueTreatments(false)
         , m_xChartDocument( 0 )
 {
     rtl::OUString aParticleID = ObjectIdentifier::getParticleID( m_aObjectCID );
@@ -179,7 +181,11 @@
             m_bHasRegressionProperties = ChartTypeHelper::isSupportingRegressionProperties( xChartType, nDimensionCount );
             m_bProvidesSecondaryYAxis =  ChartTypeHelper::isSupportingSecondaryAxis( xChartType, nDimensionCount, 1 );
             m_bProvidesOverlapAndGapWidth =  ChartTypeHelper::isSupportingOverlapAndGapWidthProperties( xChartType, nDimensionCount );
+            m_bProvidesBarConnectors =  ChartTypeHelper::isSupportingBarConnectors( xChartType, nDimensionCount );
             m_bProvidesStartingAngle = ChartTypeHelper::isSupportingStartingAngle( xChartType );
+
+            m_bProvidesMissingValueTreatments = ChartTypeHelper::getSupportedMissingValueTreatments( xChartType )
+                                            .getLength() ? true : false;
         }
     }
     m_bHasLineProperties     = true; //@todo ask object
@@ -245,6 +251,10 @@
 {
     return m_bProvidesOverlapAndGapWidth;
 }
+bool ObjectPropertiesDialogParameter::ProvidesBarConnectors() const
+{
+    return m_bProvidesBarConnectors;
+}
 bool ObjectPropertiesDialogParameter::HasAreaProperties() const
 {
     return m_bHasAreaProperties;
@@ -273,6 +283,10 @@
 {
     return m_bProvidesStartingAngle;
 }
+bool ObjectPropertiesDialogParameter::ProvidesMissingValueTreatments() const
+{
+    return m_bProvidesMissingValueTreatments;
+}
 uno::Reference< chart2::XChartDocument > ObjectPropertiesDialogParameter::getDocument() const
 {
     return m_xChartDocument;
@@ -355,7 +369,7 @@
 //                 AddTabPage(TP_YERRORBAR, String(SchResId(STR_PAGE_YERROR_BARS)), ErrorBarsTabPage::Create, NULL);
             if( m_pParameter->HasGeometryProperties() )
                 AddTabPage(TP_LAYOUT, String(SchResId(STR_PAGE_LAYOUT)),SchLayoutTabPage::Create, NULL);
-            if( m_pParameter->ProvidesSecondaryYAxis() || m_pParameter->ProvidesOverlapAndGapWidth() )
+            if( m_pParameter->ProvidesSecondaryYAxis() || m_pParameter->ProvidesOverlapAndGapWidth() || m_pParameter->ProvidesMissingValueTreatments() )
                 AddTabPage(TP_OPTIONS, String(SchResId(STR_PAGE_OPTIONS)),SchOptionTabPage::Create, NULL);
             if( m_pParameter->ProvidesStartingAngle())
                 AddTabPage(TP_POLAROPTIONS, String(SchResId(STR_PAGE_OPTIONS)),PolarOptionsTabPage::Create, NULL);
@@ -538,6 +552,14 @@
             }
             break;
         }
+        case TP_OPTIONS:
+        {
+            SchOptionTabPage* pTabPage = dynamic_cast< SchOptionTabPage* >( &rPage );
+            if( pTabPage && m_pParameter )
+                pTabPage->Init( m_pParameter->ProvidesSecondaryYAxis(), m_pParameter->ProvidesOverlapAndGapWidth(),
+                    m_pParameter->ProvidesBarConnectors() );
+            break;
+        }
     }
 }
 
--- chart2/source/controller/dialogs/TabPages.hrc	2007-10-22 18:44:17.000000000 +0200
+++ chart2/source/controller/dialogs/TabPages.hrc	2008-02-21 18:09:45.000000000 +0100
@@ -94,6 +94,10 @@
 #define GB_BAR						8
 #define CB_CONNECTOR				9
 #define CB_BARS_SIDE_BY_SIDE       10
+#define FL_PLOT_MISSING_VALUES     11
+#define RB_DONT_PAINT              12
+#define RB_ASSUME_ZERO             13
+#define RB_CONTINUE_LINE           14
 
 //------------
 //from old chart tplabel.hrc
--- chart2/source/controller/dialogs/tp_SeriesToAxis.cxx	2007-10-22 18:48:53.000000000 +0200
+++ chart2/source/controller/dialogs/tp_SeriesToAxis.cxx	2008-02-21 18:13:32.000000000 +0100
@@ -50,6 +50,12 @@
 #ifndef _SFXINTITEM_HXX
 #include <svtools/intitem.hxx>
 #endif
+//SfxIntegerListItem
+#include <svtools/ilstitem.hxx>
+
+#ifndef _COM_SUN_STAR_CHART_MISSINGVALUETREATMENT_HPP_
+#include <com/sun/star/chart/MissingValueTreatment.hpp>
+#endif
 
 //.............................................................................
 namespace chart
@@ -68,18 +74,19 @@
 	aFTOverlap(this,SchResId(FT_OVERLAP)),
 	aMTOverlap(this,SchResId(MT_OVERLAP)),
 	aCBConnect(this,SchResId(CB_CONNECTOR)),
-    aCBAxisSideBySide(this,SchResId(CB_BARS_SIDE_BY_SIDE))
+    aCBAxisSideBySide(this,SchResId(CB_BARS_SIDE_BY_SIDE)),
+    m_aFL_EmptyCells(this,SchResId(FL_PLOT_MISSING_VALUES)),
+    m_aRB_DontPaint(this,SchResId(RB_DONT_PAINT)),
+    m_aRB_AssumeZero(this,SchResId(RB_ASSUME_ZERO)),
+    m_aRB_ContinueLine(this,SchResId(RB_CONTINUE_LINE)),
+    m_bProvidesSecondaryYAxis(true),
+    m_bProvidesOverlapAndGapWidth(false)
 {
 	FreeResource();
 
     aRbtAxis1.SetClickHdl( LINK( this, SchOptionTabPage, EnableHdl ));
     aRbtAxis2.SetClickHdl( LINK( this, SchOptionTabPage, EnableHdl ));
 }
-/*************************************************************************
-|*
-|* Dtor
-|*
-\************************************************************************/
 
 SchOptionTabPage::~SchOptionTabPage()
 {
@@ -94,22 +101,12 @@
 
     return 0;
 }
-/*************************************************************************
-|*
-|* Erzeugung
-|*
-\*************************************************************************/
 
 SfxTabPage* SchOptionTabPage::Create(Window* pWindow,const SfxItemSet& rOutAttrs)
 {
 	return new SchOptionTabPage(pWindow, rOutAttrs);
 }
 
-/*************************************************************************
-|*
-|* Fuellt uebergebenen Item-Set mit Dialogbox-Attributen
-|*
-\*************************************************************************/
 BOOL SchOptionTabPage::FillItemSet(SfxItemSet& rOutAttrs)
 {
 	if(aRbtAxis2.IsChecked())
@@ -131,13 +128,15 @@
     if(aCBAxisSideBySide.IsVisible())
         rOutAttrs.Put(SfxBoolItem(SCHATTR_GROUP_BARS_PER_AXIS, ! aCBAxisSideBySide.IsChecked()));
 
+    if(m_aRB_DontPaint.IsChecked())
+        rOutAttrs.Put(SfxInt32Item(SCHATTR_MISSING_VALUE_TREATMENT,::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP));
+    else if(m_aRB_AssumeZero.IsChecked())
+        rOutAttrs.Put(SfxInt32Item(SCHATTR_MISSING_VALUE_TREATMENT,::com::sun::star::chart::MissingValueTreatment::USE_ZERO));
+    else if(m_aRB_ContinueLine.IsChecked())
+        rOutAttrs.Put(SfxInt32Item(SCHATTR_MISSING_VALUE_TREATMENT,::com::sun::star::chart::MissingValueTreatment::CONTINUE));
+
 	return TRUE;
 }
-/*************************************************************************
-|*
-|* Initialisierung
-|*
-\*************************************************************************/
 
 void SchOptionTabPage::Reset(const SfxItemSet& rInAttrs)
 {
@@ -161,31 +160,19 @@
 		nTmp = (long)((const SfxInt32Item*)pPoolItem)->GetValue();
 		aMTGap.SetValue(nTmp);
 	}
-	else
-	{
-		aMTGap.Show(FALSE);
-		aFTGap.Show(FALSE);
-	}
 
 	if (rInAttrs.GetItemState(SCHATTR_BAR_OVERLAP, TRUE, &pPoolItem) == SFX_ITEM_SET)
 	{
 		nTmp = (long)((const SfxInt32Item*)pPoolItem)->GetValue();
 		aMTOverlap.SetValue(nTmp);
 	}
-	else
-	{
-		aMTOverlap.Show(FALSE);
-		aFTOverlap.Show(FALSE);
-	}
+	
 	if (rInAttrs.GetItemState(SCHATTR_BAR_CONNECT, TRUE, &pPoolItem) == SFX_ITEM_SET)
 	{
 		BOOL bCheck = static_cast< const SfxBoolItem * >( pPoolItem )->GetValue();
 		aCBConnect.Check(bCheck);
 	}
-	else
-	{
-		aCBConnect.Show(FALSE);
-	}
+	
     if (rInAttrs.GetItemState(SCHATTR_AXIS_FOR_ALL_SERIES, TRUE, &pPoolItem) == SFX_ITEM_SET)
     {
         m_nAllSeriesAxisIndex = static_cast< const SfxInt32Item * >( pPoolItem )->GetValue();
@@ -203,6 +190,97 @@
         aCBAxisSideBySide.Show(FALSE);
     }
 
+
+    //missing value treatment
+    {
+        ::com::sun::star::uno::Sequence < sal_Int32 > aMissingValueTreatments;
+        if( rInAttrs.GetItemState(SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS, TRUE, &pPoolItem) == SFX_ITEM_SET )
+            aMissingValueTreatments =((const SfxIntegerListItem*)pPoolItem)->GetConstSequence();
+
+        if ( aMissingValueTreatments.getLength()>1 && rInAttrs.GetItemState(SCHATTR_MISSING_VALUE_TREATMENT,TRUE, &pPoolItem) == SFX_ITEM_SET)
+        {
+            m_aRB_DontPaint.Enable(FALSE);
+            m_aRB_AssumeZero.Enable(FALSE);
+            m_aRB_ContinueLine.Enable(FALSE);
+		    
+            for( sal_Int32 nN =0; nN<aMissingValueTreatments.getLength(); nN++ )
+            {
+                sal_Int32 nVal = aMissingValueTreatments[nN];
+                if(nVal==::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP)
+                    m_aRB_DontPaint.Enable(TRUE);
+                else if(nVal==::com::sun::star::chart::MissingValueTreatment::USE_ZERO)
+                    m_aRB_AssumeZero.Enable(TRUE);
+                else if(nVal==::com::sun::star::chart::MissingValueTreatment::CONTINUE)
+                    m_aRB_ContinueLine.Enable(TRUE);
+            }
+
+            long nVal=((const SfxInt32Item*)pPoolItem)->GetValue();
+            if(nVal==::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP)
+                m_aRB_DontPaint.Check(TRUE);
+            else if(nVal==::com::sun::star::chart::MissingValueTreatment::USE_ZERO)
+                m_aRB_AssumeZero.Check(TRUE);
+            else if(nVal==::com::sun::star::chart::MissingValueTreatment::CONTINUE)
+                m_aRB_ContinueLine.Check(TRUE);
+        }
+        else
+        {
+            m_aRB_DontPaint.Show(FALSE);
+            m_aRB_AssumeZero.Show(FALSE);
+            m_aRB_ContinueLine.Show(FALSE);
+		    m_aFL_EmptyCells.Show(FALSE);
+        }
+    }
+
+    AdaptControlPositionsAndVisibility();
+}
+
+void SchOptionTabPage::Init( bool bProvidesSecondaryYAxis, bool bProvidesOverlapAndGapWidth, bool bProvidesBarConnectors )
+{
+    m_bProvidesSecondaryYAxis = bProvidesSecondaryYAxis;
+    m_bProvidesOverlapAndGapWidth = bProvidesOverlapAndGapWidth;
+    m_bProvidesBarConnectors = bProvidesBarConnectors;
+
+    AdaptControlPositionsAndVisibility();
+}
+
+void SchOptionTabPage::AdaptControlPositionsAndVisibility()
+{
+    aRbtAxis1.Show(m_bProvidesSecondaryYAxis);
+    aRbtAxis2.Show(m_bProvidesSecondaryYAxis);
+    aGrpAxis.Show(m_bProvidesSecondaryYAxis);
+
+	aMTGap.Show(m_bProvidesOverlapAndGapWidth);
+	aFTGap.Show(m_bProvidesOverlapAndGapWidth);
+	
+	aMTOverlap.Show(m_bProvidesOverlapAndGapWidth);
+	aFTOverlap.Show(m_bProvidesOverlapAndGapWidth);
+
+    aCBConnect.Show(m_bProvidesBarConnectors);
+	
+    if( !aMTGap.IsVisible() && !aMTOverlap.IsVisible() )
+    {
+		aGrpBar.Show(FALSE);
+		Point aPos;
+		if( !aRbtAxis1.IsVisible() && !aRbtAxis2.IsVisible() )
+			aPos = aGrpAxis.GetPosPixel();
+	    else
+            aPos = aGrpBar.GetPosPixel();
+
+        long nDiffX = aRbtAxis1.GetPosPixel().getX() - aGrpAxis.GetPosPixel().getX();
+        long nDiffY = aRbtAxis1.GetPosPixel().getY() - aGrpAxis.GetPosPixel().getY();
+        long nDiffY1 = aRbtAxis2.GetPosPixel().getY() - aRbtAxis1.GetPosPixel().getY();
+
+        m_aFL_EmptyCells.SetPosPixel( aPos );
+        m_aRB_DontPaint.SetPosPixel( Point( aPos.getX() + nDiffX, aPos.getY() + nDiffY ) );
+        m_aRB_AssumeZero.SetPosPixel( Point( aPos.getX() + nDiffX, aPos.getY() + nDiffY + nDiffY1  ) );
+        m_aRB_ContinueLine.SetPosPixel( Point( aPos.getX() + nDiffX, aPos.getY() + nDiffY + nDiffY1 * 2 ) );
+    }
+
+    if( !m_aRB_DontPaint.IsVisible() )
+    {
+        m_aRB_ContinueLine.SetPosPixel( m_aRB_AssumeZero.GetPosPixel() );
+        m_aRB_AssumeZero.SetPosPixel( m_aRB_DontPaint.GetPosPixel() );
+    }
 }
 //.............................................................................
 } //namespace chart
--- chart2/source/controller/dialogs/tp_SeriesToAxis.hxx	2007-10-22 18:49:08.000000000 +0200
+++ chart2/source/controller/dialogs/tp_SeriesToAxis.hxx	2008-02-21 18:12:37.000000000 +0100
@@ -59,30 +59,44 @@
 
 class SchOptionTabPage : public SfxTabPage
 {
-private:
-	FixedLine	aGrpAxis;
+public:
+    SchOptionTabPage(Window* pParent, const SfxItemSet& rInAttrs);
+    virtual ~SchOptionTabPage();
+
+    static SfxTabPage* Create(Window* pParent, const SfxItemSet& rInAttrs);
+    virtual BOOL FillItemSet(SfxItemSet& rOutAttrs);
+    virtual void Reset(const SfxItemSet& rInAttrs);
+
+    void Init( bool bProvidesSecondaryYAxis, bool bProvidesOverlapAndGapWidth, bool bProvidesBarConnectors );
+
+private: //methods
+    void AdaptControlPositionsAndVisibility();
+
+private: //member
+    FixedLine	aGrpAxis;
     RadioButton aRbtAxis1;
     RadioButton aRbtAxis2;
 
-	FixedLine	aGrpBar;
-	FixedText   aFTGap;
-	MetricField aMTGap;
-	FixedText   aFTOverlap;
-	MetricField aMTOverlap;
-	CheckBox	aCBConnect;
+    FixedLine	aGrpBar;
+    FixedText   aFTGap;
+    MetricField aMTGap;
+    FixedText   aFTOverlap;
+    MetricField aMTOverlap;
+    CheckBox	aCBConnect;
     CheckBox    aCBAxisSideBySide;
 
+    FixedLine   m_aFL_EmptyCells;
+    RadioButton m_aRB_DontPaint;
+    RadioButton m_aRB_AssumeZero;
+    RadioButton m_aRB_ContinueLine;
+
     DECL_LINK(EnableHdl, RadioButton * );
 
     sal_Int32   m_nAllSeriesAxisIndex;
 
-public:
-	SchOptionTabPage(Window* pParent, const SfxItemSet& rInAttrs);
-	virtual ~SchOptionTabPage();
-
-	static SfxTabPage* Create(Window* pParent, const SfxItemSet& rInAttrs);
-	virtual BOOL FillItemSet(SfxItemSet& rOutAttrs);
-	virtual void Reset(const SfxItemSet& rInAttrs);
+    bool m_bProvidesSecondaryYAxis;
+    bool m_bProvidesOverlapAndGapWidth;
+    bool m_bProvidesBarConnectors;
 };
 
 //.............................................................................
--- chart2/source/controller/dialogs/tp_SeriesToAxis.src	2007-10-22 18:49:24.000000000 +0200
+++ chart2/source/controller/dialogs/tp_SeriesToAxis.src	2008-02-21 18:14:06.000000000 +0100
@@ -43,20 +43,20 @@
 	Size = MAP_APPFONT ( 260 , 185 ) ;
 	FixedLine 1
 	{
-		Pos = MAP_APPFONT ( 6 , 3  ) ;
+		Pos = MAP_APPFONT ( 6 , 6  ) ;
         Size = MAP_APPFONT ( 248 , 8 ) ;
 		Text [ en-US ] = "Align data series to";
 	};
 	RadioButton RBT_OPT_AXIS_1
 	{
-		Pos = MAP_APPFONT ( 12 , 14  ) ;
+		Pos = MAP_APPFONT ( 12 , 20  ) ;
 		Size = MAP_APPFONT ( 80 , 10 ) ;
 		TabStop = TRUE ;
 		Text [ en-US ] = "Primary Y axis";
 	};
 	RadioButton RBT_OPT_AXIS_2
 	{
-		Pos = MAP_APPFONT ( 12 , 28  ) ;
+		Pos = MAP_APPFONT ( 12 , 34  ) ;
 		Size = MAP_APPFONT ( 80 , 10 ) ;
 		TabStop = TRUE ;
 		Text [ en-US ] = "Secondary Y axis";
@@ -64,13 +64,13 @@
 
 	FixedLine GB_BAR
 	{
-		Pos = MAP_APPFONT ( 6 , 44  ) ;
+		Pos = MAP_APPFONT ( 6 , 50  ) ;
 		Size = MAP_APPFONT ( 248 , 8 ) ;
 		Text [ en-US ] = "Settings";
 	};
 	FixedText FT_OVERLAP
 	{
-        Pos = MAP_APPFONT ( 12 , 73 ) ;
+        Pos = MAP_APPFONT ( 12 , 80 ) ;
 		Size = MAP_APPFONT ( 47 , 8 ) ;
 		Text [ en-US ] = "~Overlap";
 	};
@@ -78,7 +78,7 @@
 	MetricField MT_OVERLAP
 	{
 		Border = TRUE ;
-        Pos = MAP_APPFONT ( 63 , 71 ) ;
+        Pos = MAP_APPFONT ( 63 , 78 ) ;
 		Size = MAP_APPFONT ( 40 , 12 ) ;
 		TabStop = TRUE ;
 		Repeat = TRUE ;
@@ -96,7 +96,7 @@
 
 	FixedText FT_GAP
 	{
-        Pos = MAP_APPFONT ( 12 , 57 ) ;
+        Pos = MAP_APPFONT ( 12 , 64 ) ;
 		Size = MAP_APPFONT ( 47 , 8 ) ;
 		Text [ en-US ] = "~Spacing";
 	};
@@ -104,7 +104,7 @@
 	MetricField MT_GAP
 	{
 		Border = TRUE ;
-        Pos = MAP_APPFONT ( 63 , 55 ) ;
+        Pos = MAP_APPFONT ( 63 , 62 ) ;
 		Size = MAP_APPFONT ( 40 , 12 ) ;
 		TabStop = TRUE ;
 		Repeat = TRUE ;
@@ -122,7 +122,7 @@
 
 	CheckBox CB_CONNECTOR
 	{
-        Pos = MAP_APPFONT ( 12 , 90 ) ;
+        Pos = MAP_APPFONT ( 12 , 97 ) ;
 		Size = MAP_APPFONT ( 200 , 10 ) ;
 		TabStop = TRUE ;
 		Text [ en-US ] = "Connection Lines";
@@ -130,9 +130,40 @@
 
     CheckBox CB_BARS_SIDE_BY_SIDE
     {
-        Pos = MAP_APPFONT ( 12 , 90 ) ;
+        Pos = MAP_APPFONT ( 12 , 97 ) ;
         Size = MAP_APPFONT ( 200 , 10 ) ;
         TabStop = TRUE ;
         Text [ en-US ] = "Show ~bars side by side";
     };
+    
+    FixedLine FL_PLOT_MISSING_VALUES
+    {
+        Pos = MAP_APPFONT ( 6 , 113  ) ;
+        Size = MAP_APPFONT ( 248 , 8 ) ;
+        Text [ en-US ] = "Plot missing values";
+    };
+    
+    RadioButton RB_DONT_PAINT
+    {
+        Pos = MAP_APPFONT ( 12 , 127  ) ;
+        Size = MAP_APPFONT ( 80 , 10 ) ;
+        TabStop = TRUE ;
+        Text [ en-US ] = "~Leave gap";  
+    };
+    
+    RadioButton RB_ASSUME_ZERO
+    {
+        Pos = MAP_APPFONT ( 12 , 141  ) ;
+        Size = MAP_APPFONT ( 80 , 10 ) ;
+        TabStop = TRUE ;
+        Text [ en-US ] = "~Assume zero";  
+    };
+    
+    RadioButton RB_CONTINUE_LINE
+    {
+        Pos = MAP_APPFONT ( 12 , 155  ) ;
+        Size = MAP_APPFONT ( 80 , 10 ) ;
+        TabStop = TRUE ;
+        Text [ en-US ] = "~Continue line";  
+    };  
 };
--- chart2/source/controller/inc/dlg_ObjectProperties.hxx	2008-02-18 16:55:10.000000000 +0100
+++ chart2/source/controller/inc/dlg_ObjectProperties.hxx	2008-02-21 18:09:10.000000000 +0100
@@ -69,6 +69,7 @@
 	bool HasRegressionProperties() const;
 	bool ProvidesSecondaryYAxis() const;
     bool ProvidesOverlapAndGapWidth() const;
+    bool ProvidesBarConnectors() const;
 	bool HasAreaProperties() const;
 	bool HasLineProperties() const;
 	bool HasSymbolProperties() const;
@@ -76,6 +77,7 @@
 	bool CanAxisLabelsBeStaggered() const;
     bool HasNumberProperties() const;
     bool ProvidesStartingAngle() const;
+    bool ProvidesMissingValueTreatments() const;
 
     ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartDocument >
         getDocument() const;
@@ -89,6 +91,7 @@
     bool m_bHasRegressionProperties;
 	bool m_bProvidesSecondaryYAxis;
     bool m_bProvidesOverlapAndGapWidth;
+    bool m_bProvidesBarConnectors;
 	bool m_bHasAreaProperties;
 	bool m_bHasLineProperties;
 	bool m_bHasSymbolProperties;
@@ -96,6 +99,7 @@
 	bool m_bCanAxisLabelsBeStaggered;
     bool m_bHasNumberProperties;
     bool m_bProvidesStartingAngle;
+    bool m_bProvidesMissingValueTreatments;
 
     ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartDocument > m_xChartDocument;
 };
--- chart2/source/controller/inc/SeriesOptionsItemConverter.hxx	2008-02-18 16:54:03.000000000 +0100
+++ chart2/source/controller/inc/SeriesOptionsItemConverter.hxx	2008-02-21 18:06:14.000000000 +0100
@@ -101,6 +101,9 @@
     bool m_bClockwise;
     ::com::sun::star::uno::Reference<
             ::com::sun::star::chart2::XCoordinateSystem > m_xCooSys;
+
+    ::com::sun::star::uno::Sequence< sal_Int32 > m_aSupportedMissingValueTreatments;
+    sal_Int32 m_nMissingValueTreatment;
 };
 
 } //  namespace wrapper
--- chart2/source/controller/itemsetwrapper/SchWhichPairs.hxx	2008-02-18 16:56:12.000000000 +0100
+++ chart2/source/controller/itemsetwrapper/SchWhichPairs.hxx	2008-02-21 18:07:28.000000000 +0100
@@ -168,7 +168,9 @@
     SCHATTR_BAR_OVERLAP,SCHATTR_BAR_CONNECT,         /*    98 - 100 (incl. SCHATTR_GAPWIDTH) */  \
     SCHATTR_GROUP_BARS_PER_AXIS,SCHATTR_AXIS_FOR_ALL_SERIES, \
     SCHATTR_STARTING_ANGLE,SCHATTR_STARTING_ANGLE, \
-    SCHATTR_CLOCKWISE,SCHATTR_CLOCKWISE \
+    SCHATTR_CLOCKWISE,SCHATTR_CLOCKWISE, \
+    SCHATTR_MISSING_VALUE_TREATMENT,SCHATTR_MISSING_VALUE_TREATMENT, \
+    SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS,SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS
 
 const USHORT nSeriesOptionsWhichPairs[] =
 {
--- chart2/source/controller/itemsetwrapper/SeriesOptionsItemConverter.cxx	2008-02-18 16:56:26.000000000 +0100
+++ chart2/source/controller/itemsetwrapper/SeriesOptionsItemConverter.cxx	2008-02-21 18:06:56.000000000 +0100
@@ -49,6 +49,9 @@
 #include "ChartTypeHelper.hxx"
 #include "DataSeriesHelper.hxx"
 
+#ifndef _COM_SUN_STAR_CHART_MISSINGVALUETREATMENT_HPP_
+#include <com/sun/star/chart/MissingValueTreatment.hpp>
+#endif
 #ifndef _COM_SUN_STAR_CHART2_XDATASERIES_HPP_
 #include <com/sun/star/chart2/XDataSeries.hpp>
 #endif
@@ -60,6 +63,11 @@
 #ifndef _SFXINTITEM_HXX
 #include <svtools/intitem.hxx>
 #endif
+//SfxIntegerListItem
+#include <svtools/ilstitem.hxx>
+#define _SVSTDARR_ULONGS
+#include <svtools/svstdarr.hxx>
+
 #ifndef INCLUDED_RTL_MATH_HXX
 #include <rtl/math.hxx>
 #endif
@@ -97,6 +105,8 @@
         , m_bSupportingStartingAngle(false)
         , m_nStartingAngle(90)
         , m_bClockwise(false)
+        , m_aSupportedMissingValueTreatments()
+        , m_nMissingValueTreatment(0)
 {
     try
     {
@@ -159,6 +169,10 @@
         {
             xDiagramProperties->getPropertyValue( C2U( "StartingAngle" ) ) >>= m_nStartingAngle;
         }
+
+        m_aSupportedMissingValueTreatments = ChartTypeHelper::getSupportedMissingValueTreatments( xChartType );
+        m_nMissingValueTreatment = DiagramHelper::getCorrectedMissingValueTreatment(
+            ChartModelHelper::findDiagram(m_xChartModel), xChartType );
     }
     catch( uno::Exception ex )
     {
@@ -316,6 +330,31 @@
             }
         }
         break;
+
+        case SCHATTR_MISSING_VALUE_TREATMENT:
+        {
+            if( m_aSupportedMissingValueTreatments.getLength() )
+            {
+                sal_Int32 nNew = static_cast< const SfxInt32Item & >( rItemSet.Get( nWhichId )).GetValue();
+                if( m_nMissingValueTreatment != nNew )
+                {
+                    try
+                    {
+                        uno::Reference< beans::XPropertySet > xDiagramProperties( ChartModelHelper::findDiagram(m_xChartModel), uno::UNO_QUERY );
+                        if( xDiagramProperties.is() )
+                        {
+                            xDiagramProperties->setPropertyValue( C2U( "MissingValueTreatment" ), uno::makeAny( nNew ));
+                            bChanged = true;
+                        }
+                    }
+                    catch( uno::Exception& e )
+                    {
+                        ASSERT_EXCEPTION( e );
+                    }
+                }
+            }
+        }
+        break;
     }
     return bChanged;
 }
@@ -373,6 +412,20 @@
             rOutItemSet.Put( SfxBoolItem(nWhichId,m_bClockwise) );
             break;
         }
+        case SCHATTR_MISSING_VALUE_TREATMENT:
+        {
+            if( m_aSupportedMissingValueTreatments.getLength() )
+                rOutItemSet.Put( SfxInt32Item( nWhichId, m_nMissingValueTreatment ));
+            break;
+        }
+        case SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS:
+        {
+            SvULongs aList;
+            for ( sal_Int32 nN=0; nN<m_aSupportedMissingValueTreatments.getLength(); nN++ )
+                aList.Insert( m_aSupportedMissingValueTreatments[nN], sal::static_int_cast< USHORT >(nN) );
+            rOutItemSet.Put( SfxIntegerListItem( nWhichId, aList ) );
+            break;
+        }
         default:
             break;
    }
--- chart2/source/inc/ChartTypeHelper.hxx	2008-02-18 16:59:02.000000000 +0100
+++ chart2/source/inc/ChartTypeHelper.hxx	2008-02-21 17:54:49.000000000 +0100
@@ -79,6 +79,10 @@
         const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartType >& xChartType, sal_Int32 nDimensionCount, sal_Bool bSwapXAndY
         , const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries >& xSeries );
 
+    //returns sequence of ::com::sun::star::chart::MissingValueTreatment
+    static ::com::sun::star::uno::Sequence < sal_Int32 > getSupportedMissingValueTreatments(
+        const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartType >& xChartType );
+
     static ::com::sun::star::drawing::Direction3D getDefaultSimpleLightDirection( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartType >& xChartType );
     static ::com::sun::star::drawing::Direction3D getDefaultRealisticLightDirection( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartType >& xChartType );
     static sal_Int32 getDefaultDirectLightColor( bool bSimple, const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartType >& xChartType );
--- chart2/source/inc/chartview/ChartSfxItemIds.hxx	2008-02-18 17:00:22.000000000 +0100
+++ chart2/source/inc/chartview/ChartSfxItemIds.hxx	2008-02-21 17:59:19.000000000 +0100
@@ -210,8 +210,10 @@
 #define SCHATTR_GROUP_BARS_PER_AXIS     (SCHATTR_CHARTTYPE_START + 8)
 #define SCHATTR_STARTING_ANGLE          (SCHATTR_CHARTTYPE_START + 9)
 #define SCHATTR_CLOCKWISE               (SCHATTR_CHARTTYPE_START + 10)
+#define SCHATTR_MISSING_VALUE_TREATMENT     (SCHATTR_CHARTTYPE_START + 11)
+#define SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS (SCHATTR_CHARTTYPE_START + 12)
 
-#define SCHATTR_CHARTTYPE_END           SCHATTR_CLOCKWISE
+#define SCHATTR_CHARTTYPE_END           SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS
 
 // items for transporting information to dialogs
 #define SCHATTR_MISC_START              (SCHATTR_CHARTTYPE_END + 1)
--- chart2/source/inc/DiagramHelper.hxx	2008-01-14 14:59:09.000000000 +0100
+++ chart2/source/inc/DiagramHelper.hxx	2008-02-21 17:55:59.000000000 +0100
@@ -353,6 +353,13 @@
             ::com::sun::star::chart2::XDiagram > & xDiagram,
         sal_Int32 nNewGeometry );
 
+    //returns integer from constant group ::com::sun::star::chart::MissingValueTreatment
+    static sal_Int32 getCorrectedMissingValueTreatment(
+            const ::com::sun::star::uno::Reference<
+                ::com::sun::star::chart2::XDiagram > & xDiagram,
+            const ::com::sun::star::uno::Reference<
+                ::com::sun::star::chart2::XChartType >& xChartType );
+
 private:
     // not implemented
     DiagramHelper();
--- chart2/source/model/main/Diagram.cxx	2008-02-18 17:00:38.000000000 +0100
+++ chart2/source/model/main/Diagram.cxx	2008-02-21 17:53:21.000000000 +0100
@@ -91,7 +91,8 @@
     PROP_DIAGRAM_CONNECT_BARS,
     PROP_DIAGRMA_RIGHT_ANGLED_AXES,
     PROP_DIAGRAM_STARTING_ANGLE,
-    PROP_DIAGRAM_GROUP_BARS_PER_AXIS
+    PROP_DIAGRAM_GROUP_BARS_PER_AXIS,
+    PROP_DIAGRAM_MISSING_VALUE_TREATMENT
 };
 
 void lcl_AddPropertiesToVector(
@@ -145,6 +146,13 @@
                   ::getBooleanCppuType(),
                   beans::PropertyAttribute::BOUND
                   | beans::PropertyAttribute::MAYBEDEFAULT ));
+
+    rOutProperties.push_back(
+        Property( C2U( "MissingValueTreatment" ),
+                  PROP_DIAGRAM_MISSING_VALUE_TREATMENT,
+                  ::getCppuType( reinterpret_cast< const sal_Int32 * >(0)),
+                  beans::PropertyAttribute::BOUND
+                  | beans::PropertyAttribute::MAYBEVOID ));
 }
 
 void lcl_AddDefaultsToMap(
--- chart2/source/model/template/ChartTypeTemplate.cxx	2007-11-23 13:00:33.000000000 +0100
+++ chart2/source/model/template/ChartTypeTemplate.cxx	2008-02-21 17:58:13.000000000 +0100
@@ -167,6 +167,21 @@
     }
 }
 
+void lcl_ensureCorrectMissingValueTreatment( const Reference< chart2::XDiagram >& xDiagram, const Reference< XChartType >& xChartType )
+{
+    Reference< beans::XPropertySet > xDiaProp( xDiagram, uno::UNO_QUERY );
+    if( xDiaProp.is() )
+    {
+        uno::Sequence < sal_Int32 > aAvailableMissingValueTreatment(
+            ::chart::ChartTypeHelper::getSupportedMissingValueTreatments( xChartType ) );
+
+        if( aAvailableMissingValueTreatment.getLength() )
+            xDiaProp->setPropertyValue( C2U( "MissingValueTreatment" ), uno::makeAny( aAvailableMissingValueTreatment[0] ) );
+        else
+            xDiaProp->setPropertyValue( C2U( "MissingValueTreatment" ), uno::Any() );
+    }
+}
+
 } // anonymous namespace
 
 namespace chart
@@ -487,7 +502,7 @@
                 if( xSeriesProp->getPropertyValue( C2U( "AttributedDataPoints" ) ) >>= aAttributedDataPointIndexList )
                     for(sal_Int32 nN=aAttributedDataPointIndexList.getLength();nN--;)
                         lcl_ensureCorrectLabelPlacement( xSeries->getDataPointByIndex(aAttributedDataPointIndexList[nN]), aAvailablePlacements );
-            }            
+            }
         }
         catch( const uno::Exception & ex )
         {
@@ -496,6 +511,23 @@
     }
 }
 
+void SAL_CALL ChartTypeTemplate::applyStyles( const Reference< chart2::XDiagram >& xDiagram )
+    throw (uno::RuntimeException)
+{
+    // apply chart-type specific styles, like "symbols on" for example
+    Sequence< Sequence< Reference< XDataSeries > > > aNewSeriesSeq(
+        DiagramHelper::getDataSeriesGroups( xDiagram ));
+    for( sal_Int32 i=0; i<aNewSeriesSeq.getLength(); ++i )
+    {
+        const sal_Int32 nNumSeries = aNewSeriesSeq[i].getLength();
+        for( sal_Int32 j=0; j<nNumSeries; ++j )
+            applyStyle( aNewSeriesSeq[i][j], i, j, nNumSeries );
+    }
+
+    //ensure valid empty cell handling (for first chart type...)
+    lcl_ensureCorrectMissingValueTreatment( xDiagram, getChartTypeForIndex( 0 ) );
+}
+
 void SAL_CALL ChartTypeTemplate::resetStyles( const Reference< chart2::XDiagram >& xDiagram )
     throw (uno::RuntimeException)
 {
@@ -846,16 +878,7 @@
 
         // chart types
         createChartTypes( aSeriesSeq, aCoordinateSystems, aOldChartTypesSeq );
-
-        // apply chart-type specific styles, like "symbols on"
-        Sequence< Sequence< Reference< XDataSeries > > > aNewSeriesSeq(
-            DiagramHelper::getDataSeriesGroups( xDiagram ));
-        for( sal_Int32 i=0; i<aNewSeriesSeq.getLength(); ++i )
-        {
-            const sal_Int32 nNumSeries = aNewSeriesSeq[i].getLength();
-            for( sal_Int32 j=0; j<nNumSeries; ++j )
-                applyStyle( aNewSeriesSeq[i][j], i, j, nNumSeries );
-        }
+        applyStyles( xDiagram );
     }
     catch( const uno::Exception & ex )
     {
--- chart2/source/model/template/ChartTypeTemplate.hxx	2007-11-23 13:00:48.000000000 +0100
+++ chart2/source/model/template/ChartTypeTemplate.hxx	2008-02-21 17:57:31.000000000 +0100
@@ -153,6 +153,11 @@
         const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDiagram >& xDiagram )
         throw (::com::sun::star::uno::RuntimeException);
 
+    //
+    virtual void SAL_CALL applyStyles(
+        const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDiagram >& xDiagram )
+        throw (::com::sun::star::uno::RuntimeException);
+
     // ____ XServiceName ____
     virtual ::rtl::OUString SAL_CALL getServiceName()
         throw (::com::sun::star::uno::RuntimeException);
--- chart2/source/tools/ChartTypeHelper.cxx	2008-02-18 17:01:18.000000000 +0100
+++ chart2/source/tools/ChartTypeHelper.cxx	2008-02-21 17:55:28.000000000 +0100
@@ -45,6 +45,7 @@
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/chart/DataLabelPlacement.hpp>
 #include <com/sun/star/chart2/XDataSeriesContainer.hpp>
+#include <com/sun/star/chart/MissingValueTreatment.hpp>
 
 //.............................................................................
 using namespace ::com::sun::star;
@@ -546,6 +547,64 @@
     }
 }
 
+uno::Sequence < sal_Int32 > ChartTypeHelper::getSupportedMissingValueTreatments( const uno::Reference< XChartType >& xChartType )
+{
+    uno::Sequence < sal_Int32 > aRet;
+    if( !xChartType.is() )
+        return aRet;
+
+    bool bStacked = false;
+    uno::Reference< XDataSeriesContainer > xDSCnt( xChartType, uno::UNO_QUERY );
+    if(xDSCnt.is())
+        bStacked = (StackMode_Y_STACKED == DataSeriesHelper::getStackModeFromSeries( xDSCnt->getDataSeries(), 0 ));
+
+    rtl::OUString aChartTypeName = xChartType->getChartType();
+    if( aChartTypeName.match(CHART2_SERVICE_NAME_CHARTTYPE_COLUMN) ||
+        aChartTypeName.match(CHART2_SERVICE_NAME_CHARTTYPE_BAR) )
+    {
+        aRet.realloc( 2 );
+        sal_Int32* pSeq = aRet.getArray();
+        *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP;
+        *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::USE_ZERO;
+    }
+    else if( aChartTypeName.match(CHART2_SERVICE_NAME_CHARTTYPE_AREA) )
+    {
+        aRet.realloc( bStacked ? 1 : 2 );
+        sal_Int32* pSeq = aRet.getArray();
+        *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::USE_ZERO;
+        if( !bStacked )
+            *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::CONTINUE;
+    }
+    else if( aChartTypeName.match(CHART2_SERVICE_NAME_CHARTTYPE_LINE) ||
+        aChartTypeName.match(CHART2_SERVICE_NAME_CHARTTYPE_NET))
+    {
+        aRet.realloc( bStacked ? 2 : 3 );
+        sal_Int32* pSeq = aRet.getArray();
+        *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP;
+        *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::USE_ZERO;
+        if( !bStacked )
+            *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::CONTINUE;
+    }
+    else if( aChartTypeName.match(CHART2_SERVICE_NAME_CHARTTYPE_SCATTER) )
+    {
+        aRet.realloc( 3 );
+        sal_Int32* pSeq = aRet.getArray();
+        *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::CONTINUE;
+        *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP;
+        *pSeq++ = ::com::sun::star::chart::MissingValueTreatment::USE_ZERO;
+    }
+    else if( aChartTypeName.match(CHART2_SERVICE_NAME_CHARTTYPE_PIE) ||
+        aChartTypeName.match(CHART2_SERVICE_NAME_CHARTTYPE_CANDLESTICK) )
+    {
+        aRet.realloc( 0 );
+    }
+    else
+    {
+        OSL_ENSURE( false, "unknown charttype" );
+    }
+
+    return aRet;
+}
 
 //.............................................................................
 } //namespace chart
--- chart2/source/tools/DiagramHelper.cxx	2008-01-14 15:03:32.000000000 +0100
+++ chart2/source/tools/DiagramHelper.cxx	2008-02-21 17:56:41.000000000 +0100
@@ -47,6 +47,7 @@
 #include "CommonConverters.hxx"
 #include "servicenames_charttypes.hxx"
 
+#include <com/sun/star/chart/MissingValueTreatment.hpp>
 #include <com/sun/star/chart2/XTitled.hpp>
 #include <com/sun/star/chart2/XChartTypeContainer.hpp>
 #include <com/sun/star/chart2/XChartTypeTemplate.hpp>
@@ -1409,4 +1410,32 @@
     }
 }
 
+//static
+sal_Int32 DiagramHelper::getCorrectedMissingValueTreatment(
+            const Reference< chart2::XDiagram > & xDiagram,
+            const Reference< chart2::XChartType >& xChartType )
+{
+    sal_Int32 nResult = ::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP;
+    uno::Sequence < sal_Int32 > aAvailableMissingValueTreatments(
+                ChartTypeHelper::getSupportedMissingValueTreatments( xChartType ) );
+
+    uno::Reference< beans::XPropertySet > xDiaProp( xDiagram, uno::UNO_QUERY );
+    if( xDiaProp.is() && (xDiaProp->getPropertyValue( C2U( "MissingValueTreatment" ) ) >>= nResult) )
+    {
+        //ensure that the set value is supported by this charttype
+        for( sal_Int32 nN = 0; nN < aAvailableMissingValueTreatments.getLength(); nN++ )
+            if( aAvailableMissingValueTreatments[nN] == nResult )
+                return nResult; //ok
+    }
+
+    //otherwise use the first supported one
+    if( aAvailableMissingValueTreatments.getLength() )
+    {
+        nResult = aAvailableMissingValueTreatments[0];
+        return nResult;
+    }
+    
+    return nResult;
+}
+
 } //  namespace chart
--- chart2/source/view/charttypes/AreaChart.cxx	2008-01-14 15:05:02.000000000 +0100
+++ chart2/source/view/charttypes/AreaChart.cxx	2008-02-21 18:03:51.000000000 +0100
@@ -51,6 +51,9 @@
 #include "Clipping.hxx"
 #include "Stripe.hxx"
 
+#ifndef _COM_SUN_STAR_CHART_MISSINGVALUETREATMENT_HPP_
+#include <com/sun/star/chart/MissingValueTreatment.hpp>
+#endif
 #ifndef _COM_SUN_STAR_CHART2_SYMBOL_HPP_
 #include <com/sun/star/chart2/Symbol.hpp>
 #endif
@@ -729,6 +732,23 @@
                     if(!pSeries)
                         continue;
 
+                    sal_Int32 nMissingValueTreatment = pSeries->getMissingValueTreatment();
+                    switch( nMissingValueTreatment )
+                    {
+                       case ::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP:
+                           if( !m_bArea )
+                               m_eNanHandling = NAN_AS_GAP;
+                           break;
+                       case ::com::sun::star::chart::MissingValueTreatment::USE_ZERO:
+                           m_eNanHandling = NAN_AS_ZERO;
+                           break;
+                       case ::com::sun::star::chart::MissingValueTreatment::CONTINUE:
+                           m_eNanHandling = NAN_AS_INTERPOLATED;
+                           break;
+                       default:
+                           break;
+                    }
+
                     /*  #i70133# ignore points outside of series length in standard area
                         charts. Stacked area charts will use missing points as zeros. In
                         standard charts, pSeriesList contains only one series. */
--- chart2/source/view/charttypes/BarChart.cxx	2008-01-14 15:05:14.000000000 +0100
+++ chart2/source/view/charttypes/BarChart.cxx	2008-02-21 18:05:25.000000000 +0100
@@ -50,6 +50,7 @@
 #include "Clipping.hxx"
 
 #include <com/sun/star/chart/DataLabelPlacement.hpp>
+#include <com/sun/star/chart/MissingValueTreatment.hpp>
 
 #ifndef _COM_SUN_STAR_CHART2_DATAPOINTGEOMETRY3D_HPP_
 #include <com/sun/star/chart2/DataPointGeometry3D.hpp>
@@ -647,14 +648,6 @@
                         bDrawConnectionLinesInited = true;
                     }
 
-                    if(fLogicPositiveYSum==0.0 && fLogicNegativeYSum==0.0)
-                    {
-                        if( bDrawConnectionLines )
-                            bOnlyConnectionLinesForThisPoint = true;
-                        else
-                            break;
-                    }
-
                     //------------
 
                     uno::Reference< drawing::XShapes > xSeriesGroupShape_Shapes(
@@ -664,18 +657,16 @@
                     double fLogicX = pPosHelper->getSlotPos( (*aSeriesIter)->getX( nCatIndex ), fSlotX );
                     double fLogicBarHeight = (*aSeriesIter)->getY( nCatIndex );
                     if( ::rtl::math::isNan( fLogicBarHeight )) //no value at this category
-                        continue;
-
-                    double fLogicValueForLabeDisplay = fLogicBarHeight;
-                    fLogicBarHeight-=fBaseValue;
-
-                    if(fLogicBarHeight==0.0 )//@todo: continue also if the resolution to small
                     {
-                        if( bDrawConnectionLines )
-                            bOnlyConnectionLinesForThisPoint = true;
+                        if( pSeries->getMissingValueTreatment() == ::com::sun::star::chart::MissingValueTreatment::USE_ZERO )
+                            fLogicBarHeight = 0.0;
                         else
                             continue;
                     }
+
+                    double fLogicValueForLabeDisplay = fLogicBarHeight;
+                    fLogicBarHeight-=fBaseValue;
+
                     if( pPosHelper->isPercentY() )
                     {
                         if(fLogicPositiveYSum!=0.0)
@@ -732,13 +723,6 @@
                             else
                                 continue;
                         }
-                        if( approxEqual(fLowerYValue,fUpperYValue) )
-                        {
-                            if( bDrawConnectionLines )
-                                bOnlyConnectionLinesForThisPoint = true;
-                            else
-                                continue;
-                        }
                         //@todo clipping of X and Z is not fully integrated so far, as there is a need to create different objects
 
                         //apply scaling to Y before calculating width (necessary to maintain gradient in clipped objects)
@@ -817,85 +801,88 @@
 
                         nCreatedPoints++;
                         //create partial point
-                        uno::Reference< drawing::XShape >  xShape;
-                        if( m_nDimension==3 )
+                        if( !approxEqual(fLowerYValue,fUpperYValue) )
                         {
-                            drawing::Position3D aLogicBottom            (fLogicX,fLogicYStart,fLogicZ);
-                            drawing::Position3D aLogicLeftBottomFront   (fLogicX+fLogicBarWidth/2.0,fLogicYStart,fLogicZ-fLogicBarDepth/2.0);
-                            drawing::Position3D aLogicRightDeepTop      (fLogicX-fLogicBarWidth/2.0,fLogicYStart+fMiddleHeight,fLogicZ+fLogicBarDepth/2.0);
-                            drawing::Position3D aLogicTopTop            (fLogicX,fLogicYStart+fMiddleHeight+fTopHeight,fLogicZ);
-
-                            uno::Reference< XTransformation > xTransformation = pSubPosHelper->getTransformationScaledLogicToScene();
-
-                            //transformation 3) -> 4)
-                            drawing::Position3D aTransformedBottom          ( SequenceToPosition3D( xTransformation->transform( Position3DToSequence(aLogicBottom) ) ) );
-                            drawing::Position3D aTransformedLeftBottomFront ( SequenceToPosition3D( xTransformation->transform( Position3DToSequence(aLogicLeftBottomFront) ) ) );
-                            drawing::Position3D aTransformedRightDeepTop    ( SequenceToPosition3D( xTransformation->transform( Position3DToSequence(aLogicRightDeepTop) ) ) );
-                            drawing::Position3D aTransformedTopTop          ( SequenceToPosition3D( xTransformation->transform( Position3DToSequence(aLogicTopTop) ) ) );
-
-                            drawing::Direction3D aSize = aTransformedRightDeepTop - aTransformedLeftBottomFront;
-                            drawing::Direction3D aTopSize( aTransformedTopTop - aTransformedRightDeepTop );
-                            fTopHeight = aTopSize.DirectionY;
-
-                            sal_Int32 nRotateZAngleHundredthDegree = 0;
-                            if( pPosHelper->isSwapXAndY() )
+                            uno::Reference< drawing::XShape >  xShape;
+                            if( m_nDimension==3 )
                             {
-                                fTopHeight = aTopSize.DirectionX;
-                                nRotateZAngleHundredthDegree = 90*100;
-                                aSize = drawing::Direction3D(aSize.DirectionY,aSize.DirectionX,aSize.DirectionZ);
+                                drawing::Position3D aLogicBottom            (fLogicX,fLogicYStart,fLogicZ);
+                                drawing::Position3D aLogicLeftBottomFront   (fLogicX+fLogicBarWidth/2.0,fLogicYStart,fLogicZ-fLogicBarDepth/2.0);
+                                drawing::Position3D aLogicRightDeepTop      (fLogicX-fLogicBarWidth/2.0,fLogicYStart+fMiddleHeight,fLogicZ+fLogicBarDepth/2.0);
+                                drawing::Position3D aLogicTopTop            (fLogicX,fLogicYStart+fMiddleHeight+fTopHeight,fLogicZ);
+
+                                uno::Reference< XTransformation > xTransformation = pSubPosHelper->getTransformationScaledLogicToScene();
+
+                                //transformation 3) -> 4)
+                                drawing::Position3D aTransformedBottom          ( SequenceToPosition3D( xTransformation->transform( Position3DToSequence(aLogicBottom) ) ) );
+                                drawing::Position3D aTransformedLeftBottomFront ( SequenceToPosition3D( xTransformation->transform( Position3DToSequence(aLogicLeftBottomFront) ) ) );
+                                drawing::Position3D aTransformedRightDeepTop    ( SequenceToPosition3D( xTransformation->transform( Position3DToSequence(aLogicRightDeepTop) ) ) );
+                                drawing::Position3D aTransformedTopTop          ( SequenceToPosition3D( xTransformation->transform( Position3DToSequence(aLogicTopTop) ) ) );
+
+                                drawing::Direction3D aSize = aTransformedRightDeepTop - aTransformedLeftBottomFront;
+                                drawing::Direction3D aTopSize( aTransformedTopTop - aTransformedRightDeepTop );
+                                fTopHeight = aTopSize.DirectionY;
+
+                                sal_Int32 nRotateZAngleHundredthDegree = 0;
+                                if( pPosHelper->isSwapXAndY() )
+                                {
+                                    fTopHeight = aTopSize.DirectionX;
+                                    nRotateZAngleHundredthDegree = 90*100;
+                                    aSize = drawing::Direction3D(aSize.DirectionY,aSize.DirectionX,aSize.DirectionZ);
+                                }
+
+                                if( aSize.DirectionX < 0 )
+                                    aSize.DirectionX *= -1.0;
+                                if( aSize.DirectionZ < 0 )
+                                    aSize.DirectionZ *= -1.0;
+                                if( fTopHeight < 0 )
+                                    fTopHeight *= -1.0;
+
+                                xShape = createDataPoint3D_Bar(
+                                    xPointGroupShape_Shapes, aTransformedBottom, aSize, fTopHeight, nRotateZAngleHundredthDegree
+                                    , xDataPointProperties, nGeometry3D );
                             }
-
-                            if( aSize.DirectionX < 0 )
-                                aSize.DirectionX *= -1.0;
-                            if( aSize.DirectionZ < 0 )
-                                aSize.DirectionZ *= -1.0;
-                            if( fTopHeight < 0 )
-                                fTopHeight *= -1.0;
-
-                            xShape = createDataPoint3D_Bar(
-                                xPointGroupShape_Shapes, aTransformedBottom, aSize, fTopHeight, nRotateZAngleHundredthDegree
-                                , xDataPointProperties, nGeometry3D );
-                        }
-                        else //m_nDimension!=3
-                        {
-                            //if( bCreateLineInsteadOfComplexGeometryDueToMissingSpace )
-                            //{
-                            //    drawing::PolyPolygonShape3D aPoly;
-                            //    drawing::Position3D aUpperPoint( fLogicX,fUpperYValue,fLogicZ );
-                            //    drawing::Position3D aLowerPoint( fLogicX,fLowerYValue,fLogicZ );
-
-                            //    AddPointToPoly( aPoly, aUpperPoint );
-                            //    AddPointToPoly( aPoly, aLowerPoint );
-
-                            //    VLineProperties aLineProperties;
-                            //    aLineProperties.initFromPropertySet( xDataPointProperties, true /*bUseSeriesPropertyNames*/ );
-                            //    if( !aLineProperties.isLineVisible() )
-                            //    {
-                            //        //todo
-                            //        //aLineProperties.Color = 
-                            //    }
-
-                            //    xShape = m_pShapeFactory->createLine2D( xPointGroupShape_Shapes
-                            //                , PolyToPointSequence(aPoly), &aLineProperties );
-                            //}
-
-                            drawing::PolyPolygonShape3D aPoly;
-                            drawing::Position3D aLeftUpperPoint( fLogicX-fLogicBarWidth/2.0,fUpperYValue,fLogicZ );
-                            drawing::Position3D aRightUpperPoint( fLogicX+fLogicBarWidth/2.0,fUpperYValue,fLogicZ );
-
-                            AddPointToPoly( aPoly, drawing::Position3D( fLogicX-fLogicBarWidth/2.0,fLowerYValue,fLogicZ) );
-                            AddPointToPoly( aPoly, drawing::Position3D( fLogicX+fLogicBarWidth/2.0,fLowerYValue,fLogicZ) );
-                            AddPointToPoly( aPoly, aRightUpperPoint );
-                            AddPointToPoly( aPoly, aLeftUpperPoint );
-                            AddPointToPoly( aPoly, drawing::Position3D( fLogicX-fLogicBarWidth/2.0,fLowerYValue,fLogicZ) );
-                            pPosHelper->transformScaledLogicToScene( aPoly );
-                            xShape = m_pShapeFactory->createArea2D( xPointGroupShape_Shapes, aPoly );
-                            this->setMappedProperties( xShape, xDataPointProperties, PropertyMapper::getPropertyNameMapForFilledSeriesProperties() );
+                            else //m_nDimension!=3
+                            {
+                                //if( bCreateLineInsteadOfComplexGeometryDueToMissingSpace )
+                                //{
+                                //    drawing::PolyPolygonShape3D aPoly;
+                                //    drawing::Position3D aUpperPoint( fLogicX,fUpperYValue,fLogicZ );
+                                //    drawing::Position3D aLowerPoint( fLogicX,fLowerYValue,fLogicZ );
+
+                                //    AddPointToPoly( aPoly, aUpperPoint );
+                                //    AddPointToPoly( aPoly, aLowerPoint );
+
+                                //    VLineProperties aLineProperties;
+                                //    aLineProperties.initFromPropertySet( xDataPointProperties, true /*bUseSeriesPropertyNames*/ );
+                                //    if( !aLineProperties.isLineVisible() )
+                                //    {
+                                //        //todo
+                                //        //aLineProperties.Color = 
+                                //    }
+
+                                //    xShape = m_pShapeFactory->createLine2D( xPointGroupShape_Shapes
+                                //                , PolyToPointSequence(aPoly), &aLineProperties );
+                                //}
+
+                                drawing::PolyPolygonShape3D aPoly;
+                                drawing::Position3D aLeftUpperPoint( fLogicX-fLogicBarWidth/2.0,fUpperYValue,fLogicZ );
+                                drawing::Position3D aRightUpperPoint( fLogicX+fLogicBarWidth/2.0,fUpperYValue,fLogicZ );
+
+                                AddPointToPoly( aPoly, drawing::Position3D( fLogicX-fLogicBarWidth/2.0,fLowerYValue,fLogicZ) );
+                                AddPointToPoly( aPoly, drawing::Position3D( fLogicX+fLogicBarWidth/2.0,fLowerYValue,fLogicZ) );
+                                AddPointToPoly( aPoly, aRightUpperPoint );
+                                AddPointToPoly( aPoly, aLeftUpperPoint );
+                                AddPointToPoly( aPoly, drawing::Position3D( fLogicX-fLogicBarWidth/2.0,fLowerYValue,fLogicZ) );
+                                pPosHelper->transformScaledLogicToScene( aPoly );
+                                xShape = m_pShapeFactory->createArea2D( xPointGroupShape_Shapes, aPoly );
+                                this->setMappedProperties( xShape, xDataPointProperties, PropertyMapper::getPropertyNameMapForFilledSeriesProperties() );
+                            }
+                            //set name/classified ObjectID (CID)
+                            ShapeFactory::setShapeName(xShape
+                                , ObjectIdentifier::createPointCID(
+                                    (*aSeriesIter)->getPointCID_Stub(),nCatIndex) );
                         }
-                        //set name/classified ObjectID (CID)
-                        ShapeFactory::setShapeName(xShape
-                            , ObjectIdentifier::createPointCID(
-                                (*aSeriesIter)->getPointCID_Stub(),nCatIndex) );
 
                         //create error bar
                         createErrorBar_Y( aUnscaledLogicPosition, **aSeriesIter, nCatIndex, m_xLogicTarget );
--- chart2/source/view/inc/PlottingPositionHelper.hxx	2007-11-23 13:10:57.000000000 +0100
+++ chart2/source/view/inc/PlottingPositionHelper.hxx	2008-02-21 18:00:41.000000000 +0100
@@ -383,8 +383,6 @@
         rMin = getLogicMinY();
     if( rMax > getLogicMaxY() )
         rMax = getLogicMaxY();
-    if( rMin == rMax )
-        return false;
     return true;
 }
 
--- chart2/source/view/inc/VDataSeries.hxx	2008-02-18 17:02:35.000000000 +0100
+++ chart2/source/view/inc/VDataSeries.hxx	2008-02-21 18:01:38.000000000 +0100
@@ -197,6 +197,9 @@
 
     void releaseShapes();
 
+    void setMissingValueTreatment( sal_Int32 nMissingValueTreatment );
+    sal_Int32 getMissingValueTreatment() const;
+
 private: //methods
     VDataSeries();
     ::com::sun::star::chart2::DataPointLabel*
@@ -270,6 +273,8 @@
     mutable sal_Int32                               m_nCurrentAttributedPoint;
     ::com::sun::star::awt::Size                     m_aReferenceSize;
     //
+
+    sal_Int32                                       m_nMissingValueTreatment;
 };
 
 //.............................................................................
--- chart2/source/view/main/ChartItemPool.cxx	2008-02-18 17:02:46.000000000 +0100
+++ chart2/source/view/main/ChartItemPool.cxx	2008-02-21 18:02:36.000000000 +0100
@@ -223,6 +223,9 @@
     ppPoolDefaults[SCHATTR_STARTING_ANGLE       - SCHATTR_START] = new SfxInt32Item( SCHATTR_STARTING_ANGLE, 90 );
     ppPoolDefaults[SCHATTR_CLOCKWISE            - SCHATTR_START] = new SfxBoolItem( SCHATTR_CLOCKWISE, FALSE );
 
+    ppPoolDefaults[SCHATTR_MISSING_VALUE_TREATMENT    - SCHATTR_START] = new SfxInt32Item(SCHATTR_MISSING_VALUE_TREATMENT, 0);
+    ppPoolDefaults[SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS - SCHATTR_START] = new SfxIntegerListItem(SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS,aTmp);
+
     ppPoolDefaults[SCHATTR_AXIS_FOR_ALL_SERIES  - SCHATTR_START] = new SfxInt32Item(SCHATTR_AXIS_FOR_ALL_SERIES, 0);
     ppPoolDefaults[SCHATTR_REGRESSION_TYPE          - SCHATTR_START] = new SvxChartRegressItem  (CHREGRESS_NONE, SCHATTR_REGRESSION_TYPE);
     ppPoolDefaults[SCHATTR_REGRESSION_SHOW_EQUATION - SCHATTR_START] = new SfxBoolItem(SCHATTR_REGRESSION_SHOW_EQUATION, 0);
--- chart2/source/view/main/ChartView.cxx	2008-02-18 17:02:59.000000000 +0100
+++ chart2/source/view/main/ChartView.cxx	2008-02-21 18:03:05.000000000 +0100
@@ -98,6 +98,7 @@
 #include <time.h>
 
 #include <com/sun/star/chart/DataLabelPlacement.hpp>
+#include <com/sun/star/chart/MissingValueTreatment.hpp>
 
 #ifndef _COM_SUN_STAR_CHART2_EXPLICITSUBINCREMENT_HPP_
 #include <com/sun/star/chart2/ExplicitSubIncrement.hpp>
@@ -730,6 +731,7 @@
             pPlotter->setNumberFormatsSupplier( xNumberFormatsSupplier );
             pPlotter->setColorScheme( xColorScheme );
             pPlotter->setExplicitCategoriesProvider( pVCooSys->getExplicitCategoriesProvider() );
+            sal_Int32 nMissingValueTreatment = DiagramHelper::getCorrectedMissingValueTreatment( xDiagram, xChartType );
             
             if(pVCooSys)
                 pVCooSys->addMinimumAndMaximumSupplier(pPlotter);
@@ -760,6 +762,8 @@
                 pSeries->setGroupBarsPerAxis( bGroupBarsPerAxis );
                 pSeries->setStartingAngle( nStartingAngle );
 
+                pSeries->setMissingValueTreatment( nMissingValueTreatment );
+
                 rtl::OUString aSeriesParticle( ObjectIdentifier::createParticleForSeries( nDiagramIndex, nCS, nT, nS ) );
                 pSeries->setParticle(aSeriesParticle);
 
--- chart2/source/view/main/VDataSeries.cxx	2008-02-18 17:03:12.000000000 +0100
+++ chart2/source/view/main/VDataSeries.cxx	2008-02-21 19:00:28.000000000 +0100
@@ -42,6 +42,9 @@
 #include "LabelPositionHelper.hxx"
 #include "ChartTypeHelper.hxx"
 
+#ifndef _COM_SUN_STAR_CHART_MISSINGVALUETREATMENT_HPP_
+#include <com/sun/star/chart/MissingValueTreatment.hpp>
+#endif
 #ifndef _COM_SUN_STAR_CHART2_SYMBOL_HPP_
 #include <com/sun/star/chart2/Symbol.hpp>
 #endif
@@ -202,6 +205,7 @@
     , m_apSymbolProperties_AttributedPoint(NULL)
     , m_apSymbolProperties_InvisibleSymbolForSelection(NULL)
     , m_nCurrentAttributedPoint(-1)
+    , m_nMissingValueTreatment(::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP)
 {
     uno::Reference<data::XDataSource> xDataSource =
             uno::Reference<data::XDataSource>( xDataSeries, uno::UNO_QUERY );
@@ -859,6 +863,16 @@
     return false;
 }
 
+void VDataSeries::setMissingValueTreatment( sal_Int32 nMissingValueTreatment )
+{
+    m_nMissingValueTreatment = nMissingValueTreatment;
+}
+
+sal_Int32 VDataSeries::getMissingValueTreatment() const
+{
+    return m_nMissingValueTreatment;
+}
+
 //.............................................................................
 } //namespace chart
 //.............................................................................
--- offapi/com/sun/star/chart/Diagram.idl	2005-09-08 00:12:41.000000000 +0200
+++ offapi/com/sun/star/chart/Diagram.idl	2008-02-21 17:47:33.000000000 +0100
@@ -99,6 +99,14 @@
         @see ChartDataCaption
 	 */
 	[property] long DataCaption; 
+
+    //------------------------------------------------------------------------- 
+
+    /** specifies how empty or invalid cells in the provided data should be handled when displayed
+
+        @see MissingValueTreatment
+	 */
+    [optional, property] long MissingValueTreatment;
  
 }; 
  
--- offapi/com/sun/star/chart/makefile.mk	2008-02-18 16:37:36.000000000 +0100
+++ offapi/com/sun/star/chart/makefile.mk	2008-02-21 17:47:10.000000000 +0100
@@ -92,6 +92,7 @@
 	Dim3DDiagram.idl\
 	DonutDiagram.idl\
 	LineDiagram.idl\
+	MissingValueTreatment.idl\
 	NetDiagram.idl\
 	PieDiagram.idl\
 	StackableDiagram.idl\
--- offapi/com/sun/star/chart/MissingValueTreatment.idl	1970-01-01 01:00:00.000000000 +0100
+++ offapi/com/sun/star/chart/MissingValueTreatment.idl	2008-02-21 17:46:45.000000000 +0100
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: MissingValueTreatment.idl,v $
+ *
+ *  $Revision: 1.1.2.1 $
+ *
+ *  last change: $Author: iha $ $Date: 2008/02/21 16:46:45 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef __com_sun_star_chart_MissingValueTreatment_idl__ 
+#define __com_sun_star_chart_MissingValueTreatment_idl__ 
+ 
+ 
+//============================================================================= 
+ 
+ module com {  module sun {  module star {  module chart {  
+ 
+//============================================================================= 
+ 
+/** This specifies how empty or invalid cells in the provided data should be handled when plotted.
+ */
+published constants MissingValueTreatment
+{ 
+    const long LEAVE_GAP = 0;
+    const long USE_ZERO = 1;
+    const long CONTINUE = 2;
+}; 
+ 
+//============================================================================= 
+ 
+}; }; }; };  
+ 
+#endif
--- offapi/com/sun/star/chart2/Diagram.idl	2007-10-22 18:40:46.000000000 +0200
+++ offapi/com/sun/star/chart2/Diagram.idl	2008-02-21 17:48:00.000000000 +0100
@@ -100,6 +100,12 @@
         only one axis, this property has no effect.</p>
     */
     [optional, property] boolean                    GroupBarsPerAxis;
+
+    /** specifies how empty or invalid cells in the provided data should be handled when displayed
+
+        @see ::com::sun::star::chart::MissingValueTreatment
+	 */
+    [optional, property] long MissingValueTreatment;
 };
 
 } ; // chart2
--- xmloff/inc/xmloff/xmltoken.hxx	2008-02-18 16:32:23.000000000 +0100
+++ xmloff/inc/xmloff/xmltoken.hxx	2008-02-21 13:24:22.000000000 +0100
@@ -2984,6 +2984,10 @@
         XML_CELL_RANGE,
         XML_ERROR_LOWER_RANGE,
         XML_ERROR_UPPER_RANGE,
+        XML_TREAT_EMPTY_CELLS,
+        XML_LEAVE_GAP,
+        XML_USE_ZERO,
+        XML_IGNORE,
 		XML_TOKEN_END
     };
 
--- xmloff/source/chart/PropertyMap.hxx	2008-02-18 16:32:40.000000000 +0100
+++ xmloff/source/chart/PropertyMap.hxx	2008-02-21 17:49:33.000000000 +0100
@@ -75,6 +75,9 @@
 #ifndef _COM_SUN_STAR_CHART_DATALABELPLACEMENT_HPP_
 #include <com/sun/star/chart/DataLabelPlacement.hpp>
 #endif
+#ifndef _COM_SUN_STAR_CHART_MISSINGVALUETREATMENT_HPP_
+#include <com/sun/star/chart/MissingValueTreatment.hpp>
+#endif
 
 // custom types
 #define XML_SCH_TYPE_AXIS_ARRANGEMENT		( XML_SCH_TYPES_START + 0 )
@@ -89,6 +92,7 @@
 #define XML_SCH_TYPE_SYMBOL_TYPE            ( XML_SCH_TYPES_START + 9 )
 #define XML_SCH_TYPE_NAMED_SYMBOL           ( XML_SCH_TYPES_START + 10 )
 #define XML_SCH_TYPE_LABEL_PLACEMENT_TYPE   ( XML_SCH_TYPES_START + 11 )
+#define XML_SCH_TYPE_MISSING_VALUE_TREATMENT    ( XML_SCH_TYPES_START + 12 )
 
 // context ids
 #define XML_SCH_CONTEXT_USER_SYMBOL 				( XML_SCH_CTF_START + 0 )
@@ -161,6 +165,7 @@
 	MAP_ENTRY( "StackedBarsConnected", CHART, XML_CONNECT_BARS, XML_TYPE_BOOL ),
     MAP_ENTRY( "GroupBarsPerAxis", CHART, XML_GROUP_BARS_PER_AXIS, XML_TYPE_BOOL ),
     MAP_ENTRY( "StartingAngle", CHART, XML_ANGLE_OFFSET, XML_TYPE_NUMBER ),
+    MAP_ENTRY( "MissingValueTreatment", CHART, XML_TREAT_EMPTY_CELLS, XML_SCH_TYPE_MISSING_VALUE_TREATMENT ),
     // spline settings
     MAP_ENTRY( "SplineOrder", CHART, XML_SPLINE_ORDER, XML_TYPE_NUMBER ),
     MAP_ENTRY( "SplineResolution", CHART, XML_SPLINE_RESOLUTION, XML_TYPE_NUMBER ),
@@ -307,6 +312,13 @@
     { ::xmloff::token::XML_TOKEN_INVALID, 0 }
 };
 
+SvXMLEnumMapEntry aXMLChartMissingValueTreatmentEnumMap[] =
+{
+    { ::xmloff::token::XML_LEAVE_GAP,    ::com::sun::star::chart::MissingValueTreatment::LEAVE_GAP },
+    { ::xmloff::token::XML_USE_ZERO,     ::com::sun::star::chart::MissingValueTreatment::USE_ZERO },
+    { ::xmloff::token::XML_IGNORE,       ::com::sun::star::chart::MissingValueTreatment::CONTINUE },
+    { ::xmloff::token::XML_TOKEN_INVALID,0 },
+};
 
 #endif	// XML_SCH_CREATE_GLOBAL_MAPS
 
--- xmloff/source/chart/PropertyMaps.cxx	2007-11-23 12:35:00.000000000 +0100
+++ xmloff/source/chart/PropertyMaps.cxx	2008-02-21 17:50:04.000000000 +0100
@@ -197,6 +197,11 @@
             case XML_SCH_TYPE_NAMED_SYMBOL:
                 pHdl = new XMLSymbolTypePropertyHdl( true );
                 break;
+
+            case XML_SCH_TYPE_MISSING_VALUE_TREATMENT:
+                pHdl = new XMLEnumPropertyHdl( aXMLChartMissingValueTreatmentEnumMap,
+                                               ::getCppuType((const sal_Int32*)0) );
+                break;
         }
 		if( pHdl )
 			PutHdlCache( nType, pHdl );
--- xmloff/source/core/xmltoken.cxx	2008-02-18 16:34:20.000000000 +0100
+++ xmloff/source/core/xmltoken.cxx	2008-02-21 13:23:54.000000000 +0100
@@ -2985,6 +2985,10 @@
         TOKEN( "error-lower-range",     XML_ERROR_LOWER_RANGE ),
         TOKEN( "error-upper-range",     XML_ERROR_UPPER_RANGE ),
 
+        TOKEN( "treat-empty-cells",     XML_TREAT_EMPTY_CELLS ),
+        TOKEN( "leave-gap",             XML_LEAVE_GAP ),
+        TOKEN( "use-zero",              XML_USE_ZERO ),
+        TOKEN( "ignore",                XML_IGNORE ),
 #if OSL_DEBUG_LEVEL > 0
         { 0, NULL, NULL,                       XML_TOKEN_END }
 #else
