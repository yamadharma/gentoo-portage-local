---
 Author: Romain Perier <mrpouet@tuxfamily.org>

 Restore cpufreq in gnome-power-manager caplet.

 https://bugs.gentoo.org/show_bug.cgi?id=263891

 src/Makefile.am      |    6 +
 src/egg-gconf.c      |  111 ++++++++++++++++++++++++++
 src/egg-gconf.h      |   42 +++++++++
 src/gpm-common.h     |    7 +
 src/gpm-cpufreq.c    |  217 +++++++++++++++++++++++++++++++++++++++++++++++++++
 src/gpm-cpufreq.h    |   55 ++++++++++++
 src/gpm-manager.c    |    5 +
 src/gpm-prefs-core.c |  174 ++++++++++++++++++++++++++++++++++++++++
 8 files changed, 617 insertions(+)

Index: b/src/egg-gconf.c
===================================================================
--- /dev/null
+++ b/src/egg-gconf.c
@@ -0,0 +1,111 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2009 PERIER Romain <mrpouet@tuxfamily.org>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#include "egg-debug.h"
+#include "egg-gconf.h"
+
+/**
+ * egg_gconf_get_bool:
+ *
+ * @conf: GConfClient instance
+ * @key: The key to query
+ * @value: return value, passed by ref
+ **/
+void egg_gconf_get_bool (GConfClient *conf, const gchar *key, gboolean *value)
+{
+	GError *error = NULL;
+
+	*value = gconf_client_get_bool (conf, key, &error);
+
+	if (error) {
+		egg_debug("Error: %s\n", error->message);
+		g_error_free(error);
+		return;
+	}
+}
+
+/**
+ * egg_gconf_get_string:
+ *
+ * @conf: GConfClient instance
+ * @key: The key to query
+ * @value: return value, passed by ref
+ **/
+void egg_gconf_get_string (GConfClient *conf, const gchar *key, gchar **value)
+{
+	GError *error = NULL;
+
+	*value = gconf_client_get_string (conf, key, &error);
+
+	if (error) {
+		egg_debug("Error: %s\n", error->message);
+		g_error_free(error);
+		return;
+	}
+}
+
+/**
+ * egg_gconf_get_uint:
+ *
+ * @conf: GConfClient instance
+ * @key: The key to query
+ * @value: return value, passed by ref
+ **/
+void egg_gconf_get_uint (GConfClient *conf, const gchar *key, guint *value)
+{
+	GError *error = NULL;
+
+	*value = (guint)gconf_client_get_int (conf, key, &error);
+
+	if (error) {
+		egg_debug("Error: %s\n", error->message);
+		g_error_free(error);
+		return;
+	}
+}
+
+void egg_gconf_set_string (GConfClient *conf, const gchar *key,
+			   const gchar *value)
+{
+	GError *error = NULL;
+
+	gconf_client_set_string (conf, key, value, &error);
+
+	if (error) {
+		egg_debug("Error: %s\n", error->message);
+		g_error_free(error);
+		return;
+	}
+}
+
+void egg_gconf_is_writable (GConfClient *conf, const gchar *key,
+			    gboolean *is_writable)
+{
+	GError *error = NULL;
+
+	*is_writable = gconf_client_key_is_writable (conf, key, &error);
+
+	if (error) {
+		egg_debug ("Error: %s\n", error->message);
+		g_error_free(error);
+		return;
+	}
+}
Index: b/src/egg-gconf.h
===================================================================
--- /dev/null
+++ b/src/egg-gconf.h
@@ -0,0 +1,42 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2009 PERIER Romain <mrpouet@tuxfamily.org>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef __EGG_GCONF_H
+#define __EGG_GCONF_H
+
+#include <glib.h>
+#include <gconf/gconf-client.h>
+
+G_BEGIN_DECLS
+
+void egg_gconf_get_bool (GConfClient *conf, const gchar *key, gboolean *value);
+
+void egg_gconf_get_string (GConfClient *conf, const gchar *key, gchar **value);
+
+void egg_gconf_get_uint (GConfClient *conf, const gchar *key, guint *value);
+
+void egg_gconf_set_string (GConfClient *conf, const gchar *key, const gchar *value);
+
+void egg_gconf_is_writable (GConfClient *conf, const gchar *key, gboolean *is_writable);
+
+G_END_DECLS
+
+#endif /* __EGG_GCONF_H */
Index: b/src/gpm-common.h
===================================================================
--- a/src/gpm-common.h
+++ b/src/gpm-common.h
@@ -87,6 +87,13 @@ G_BEGIN_DECLS
 #define GPM_CONF_BUTTON_HIBERNATE		GPM_CONF_DIR "/buttons/hibernate"
 #define GPM_CONF_BUTTON_POWER			GPM_CONF_DIR "/buttons/power"
 
+/* cpufreq */
+#define GPM_CONF_CPUFREQ_POLICY_AC		GPM_CONF_DIR "/cpufreq/policy_ac"
+#define GPM_CONF_CPUFREQ_POLICY_BATT		GPM_CONF_DIR "/cpufreq/policy_battery"
+#define GPM_CONF_CPUFREQ_PERFORMANCE_AC		GPM_CONF_DIR "/cpufreq/performance_ac"
+#define GPM_CONF_CPUFREQ_PERFORMANCE_BATT	GPM_CONF_DIR "/cpufreq/performance_battery"
+#define GPM_CONF_CPUFREQ_USE_NICE		GPM_CONF_DIR "/cpufreq/consider_nice"
+
 /* general */
 #define GPM_CONF_DEBUG				GPM_CONF_DIR "/general/debug"
 #define GPM_CONF_SCHEMA_VERSION			GPM_CONF_DIR "/general/installed_schema"
Index: b/src/gpm-cpufreq.c
===================================================================
--- /dev/null
+++ b/src/gpm-cpufreq.c
@@ -0,0 +1,217 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2006-2007 Richard Hughes <richard@hughsie.com>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+#include <string.h>
+#include <glib.h>
+#include <dbus/dbus-glib.h>
+#include <glib/gi18n.h>
+#include <gconf/gconf-client.h>
+
+#include <hal-cpufreq.h>
+
+#include "egg-gconf.h"
+#include "egg-debug.h"
+#include "gpm-common.h"
+#include "gpm-ac-adapter.h"
+#include "gpm-cpufreq.h"
+
+static void     gpm_cpufreq_class_init (GpmCpufreqClass *klass);
+static void     gpm_cpufreq_init       (GpmCpufreq      *hal);
+static void     gpm_cpufreq_finalize   (GObject	*object);
+
+#define GPM_CPUFREQ_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GPM_TYPE_CPUFREQ, GpmCpufreqPrivate))
+
+struct GpmCpufreqPrivate
+{
+	GConfClient             *conf;
+	HalCpufreq		*hal_cpufreq;
+	GpmAcAdapter		*ac_adapter;
+};
+
+G_DEFINE_TYPE (GpmCpufreq, gpm_cpufreq, G_TYPE_OBJECT)
+
+/**
+ * gpm_cpufreq_sync_policy:
+ * @cpufreq: This class instance
+ * @on_ac: If we are on AC power
+ *
+ * Changes the cpufreq policy if required
+ **/
+static gboolean
+gpm_cpufreq_sync_policy (GpmCpufreq *cpufreq)
+{
+	gboolean cpufreq_consider_nice;
+	gboolean on_ac;
+	guint cpufreq_performance;
+	gchar *cpufreq_policy;
+	HalCpufreqType cpufreq_type;
+
+	on_ac = gpm_ac_adapter_is_present (cpufreq->priv->ac_adapter);
+
+	if (on_ac == TRUE) {
+		egg_gconf_get_bool (cpufreq->priv->conf, GPM_CONF_CPUFREQ_USE_NICE, &cpufreq_consider_nice);
+		egg_gconf_get_string (cpufreq->priv->conf, GPM_CONF_CPUFREQ_POLICY_AC, &cpufreq_policy);
+		egg_gconf_get_uint (cpufreq->priv->conf, GPM_CONF_CPUFREQ_PERFORMANCE_AC, &cpufreq_performance);
+	} else {
+		egg_gconf_get_bool (cpufreq->priv->conf, GPM_CONF_CPUFREQ_USE_NICE, &cpufreq_consider_nice);
+		egg_gconf_get_string (cpufreq->priv->conf, GPM_CONF_CPUFREQ_POLICY_BATT, &cpufreq_policy);
+		egg_gconf_get_uint (cpufreq->priv->conf, GPM_CONF_CPUFREQ_PERFORMANCE_BATT, &cpufreq_performance);
+	}
+
+	/* use enumerated value */
+	cpufreq_type = hal_cpufreq_string_to_enum (cpufreq_policy);
+	g_free (cpufreq_policy);
+
+	/* change to the right governer and settings */
+	hal_cpufreq_set_governor (cpufreq->priv->hal_cpufreq, cpufreq_type);
+	hal_cpufreq_set_consider_nice (cpufreq->priv->hal_cpufreq, cpufreq_consider_nice);
+	hal_cpufreq_set_performance (cpufreq->priv->hal_cpufreq, cpufreq_performance);
+	return TRUE;
+}
+
+/**
+ * gpm_conf_gconf_key_changed_cb:
+ *
+ * We might have to do things when the gconf keys change; do them here.
+ **/
+static void
+gpm_conf_gconf_key_changed_cb (GConfClient *client, guint cnxn_id,
+			       GConfEntry *entry, GpmCpufreq *cpufreq)
+{
+	/* if any change, just resync the whole lot */
+	if (strcmp (entry->key, GPM_CONF_CPUFREQ_POLICY_AC) == 0 ||
+	    strcmp (entry->key, GPM_CONF_CPUFREQ_PERFORMANCE_AC) == 0 ||
+	    strcmp (entry->key, GPM_CONF_CPUFREQ_POLICY_BATT) == 0 ||
+	    strcmp (entry->key, GPM_CONF_CPUFREQ_PERFORMANCE_BATT) == 0 ||
+	    strcmp (entry->key, GPM_CONF_CPUFREQ_USE_NICE) == 0) {
+
+		gpm_cpufreq_sync_policy (cpufreq);
+	}
+}
+
+/**
+ * ac_adapter_changed_cb:
+ * @ac_adapter: The ac_adapter class instance
+ * @on_ac: if we are on AC power
+ * @cpufreq: This class instance
+ *
+ * Does the actions when the ac power source is inserted/removed.
+ **/
+static void
+ac_adapter_changed_cb (GpmAcAdapter *ac_adapter,
+		       gboolean      on_ac,
+		       GpmCpufreq  *cpufreq)
+{
+	gpm_cpufreq_sync_policy (cpufreq);
+}
+
+/**
+ * gpm_cpufreq_class_init:
+ * @klass: This class instance
+ **/
+static void
+gpm_cpufreq_class_init (GpmCpufreqClass *klass)
+{
+	GObjectClass *object_class = G_OBJECT_CLASS (klass);
+	object_class->finalize = gpm_cpufreq_finalize;
+	g_type_class_add_private (klass, sizeof (GpmCpufreqPrivate));
+}
+
+/**
+ * gpm_cpufreq_init:
+ *
+ * @cpufreq: This class instance
+ **/
+static void
+gpm_cpufreq_init (GpmCpufreq *cpufreq)
+{
+	cpufreq->priv = GPM_CPUFREQ_GET_PRIVATE (cpufreq);
+
+	/* we use cpufreq as the master class */
+	cpufreq->priv->hal_cpufreq = hal_cpufreq_new ();
+
+	/* get gconf client */
+	cpufreq->priv->conf = gconf_client_get_default ();
+
+	/* watch gnome-power-manager keys */
+	gconf_client_add_dir(cpufreq->priv->conf, GPM_CONF_DIR,
+			     GCONF_CLIENT_PRELOAD_NONE, NULL);
+
+	gconf_client_notify_add (cpufreq->priv->conf, GPM_CONF_DIR,
+				 (GConfClientNotifyFunc)gpm_conf_gconf_key_changed_cb,
+				 cpufreq, NULL, NULL);
+
+	/* we use ac_adapter for the ac-adapter-changed signal */
+	cpufreq->priv->ac_adapter = gpm_ac_adapter_new ();
+	g_signal_connect (cpufreq->priv->ac_adapter, "ac-adapter-changed",
+			  G_CALLBACK (ac_adapter_changed_cb), cpufreq);
+
+	/* sync policy */
+	gpm_cpufreq_sync_policy (cpufreq);
+}
+
+/**
+ * gpm_cpufreq_finalize:
+ * @object: This class instance
+ **/
+static void
+gpm_cpufreq_finalize (GObject *object)
+{
+	GpmCpufreq *cpufreq;
+	g_return_if_fail (object != NULL);
+	g_return_if_fail (GPM_IS_CPUFREQ (object));
+
+	cpufreq = GPM_CPUFREQ (object);
+	cpufreq->priv = GPM_CPUFREQ_GET_PRIVATE (cpufreq);
+
+	if (cpufreq->priv->hal_cpufreq != NULL) {
+		g_object_unref (cpufreq->priv->hal_cpufreq);
+	}
+	if (cpufreq->priv->conf != NULL) {
+		g_object_unref (cpufreq->priv->conf);
+	}
+	if (cpufreq->priv->ac_adapter != NULL) {
+		g_object_unref (cpufreq->priv->ac_adapter);
+	}
+	G_OBJECT_CLASS (gpm_cpufreq_parent_class)->finalize (object);
+}
+
+/**
+ * gpm_cpufreq_new:
+ * Return value: new GpmCpufreq instance.
+ **/
+GpmCpufreq *
+gpm_cpufreq_new (void)
+{
+	GpmCpufreq *cpufreq = NULL;
+
+	/* only load if we have the hardware */
+	if (hal_cpufreq_has_hw() == TRUE) {
+		cpufreq = g_object_new (GPM_TYPE_CPUFREQ, NULL);
+	}
+
+	return cpufreq;
+}
+
Index: b/src/gpm-cpufreq.h
===================================================================
--- /dev/null
+++ b/src/gpm-cpufreq.h
@@ -0,0 +1,55 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2006-2007 Richard Hughes <richard@hughsie.com>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef __GPMCPUFREQ_H
+#define __GPMCPUFREQ_H
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define GPM_TYPE_CPUFREQ		(gpm_cpufreq_get_type ())
+#define GPM_CPUFREQ(o)			(G_TYPE_CHECK_INSTANCE_CAST ((o), GPM_TYPE_CPUFREQ, GpmCpufreq))
+#define GPM_CPUFREQ_CLASS(k)		(G_TYPE_CHECK_CLASS_CAST((k), GPM_TYPE_CPUFREQ, GpmCpufreqClass))
+#define GPM_IS_CPUFREQ(o)		(G_TYPE_CHECK_INSTANCE_TYPE ((o), GPM_TYPE_CPUFREQ))
+#define GPM_IS_CPUFREQ_CLASS(k)		(G_TYPE_CHECK_CLASS_TYPE ((k), GPM_TYPE_CPUFREQ))
+#define GPM_CPUFREQ_GET_CLASS(o)	(G_TYPE_INSTANCE_GET_CLASS ((o), GPM_TYPE_CPUFREQ, GpmCpufreqClass))
+
+typedef struct GpmCpufreqPrivate GpmCpufreqPrivate;
+
+typedef struct
+{
+	GObject			 parent;
+	GpmCpufreqPrivate	*priv;
+} GpmCpufreq;
+
+typedef struct
+{
+	GObjectClass	parent_class;
+} GpmCpufreqClass;
+
+GType		 gpm_cpufreq_get_type				(void);
+GpmCpufreq	*gpm_cpufreq_new				(void);
+
+G_END_DECLS
+
+#endif	/* __GPMCPUFREQ_H */
+
Index: b/src/gpm-manager.c
===================================================================
--- a/src/gpm-manager.c
+++ b/src/gpm-manager.c
@@ -57,6 +57,7 @@
 #include "gpm-prefs.h"
 #include "gpm-screensaver.h"
 #include "gpm-backlight.h"
+#include "gpm-cpufreq.h"
 #include "gpm-brightness-kbd.h"
 #include "gpm-screensaver.h"
 #include "gpm-session.h"
@@ -93,6 +94,7 @@ struct GpmManagerPrivate
 	GpmBrightnessKbd	*brightness_kbd;
 	GpmFeedback		*feedback_kbd;
 	GpmBacklight		*backlight;
+	GpmCpufreq              *cpufreq;
 	EggConsoleKit		*console;
 	guint32         	 screensaver_ac_throttle_id;
 	guint32         	 screensaver_dpms_throttle_id;
@@ -1629,6 +1631,8 @@ gpm_manager_init (GpmManager *manager)
 						     G_OBJECT (manager->priv->backlight));
 	}
 
+	manager->priv->cpufreq = gpm_cpufreq_new();
+
 	/* use a visual widget */
 	manager->priv->feedback_kbd = gpm_feedback_new ();
 	gpm_feedback_set_icon_name (manager->priv->feedback_kbd, GPM_STOCK_BRIGHTNESS_KBD);
@@ -1733,6 +1737,7 @@ gpm_manager_finalize (GObject *object)
 	g_object_unref (manager->priv->button);
 	g_object_unref (manager->priv->brightness_kbd);
 	g_object_unref (manager->priv->backlight);
+	g_object_unref (manager->priv->cpufreq);
 	g_object_unref (manager->priv->console);
 
 	G_OBJECT_CLASS (gpm_manager_parent_class)->finalize (object);
Index: b/src/gpm-prefs-core.c
===================================================================
--- a/src/gpm-prefs-core.c
+++ b/src/gpm-prefs-core.c
@@ -34,12 +34,14 @@
 #include <gconf/gconf-client.h>
 
 #include <hal-manager.h>
+#include <hal-cpufreq.h>
 
 #include "gpm-tray-icon.h"
 #include "gpm-common.h"
 #include "gpm-prefs.h"
 #include "gpm-prefs-core.h"
 #include "egg-debug.h"
+#include "egg-gconf.h"
 #include "gpm-stock-icons.h"
 #include "gpm-prefs-server.h"
 
@@ -47,6 +49,8 @@
 #include <polkit-gnome/polkit-gnome.h>
 #endif
 
+
+
 static void     gpm_prefs_finalize   (GObject	    *object);
 
 #define GPM_PREFS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GPM_TYPE_PREFS, GpmPrefsPrivate))
@@ -65,6 +69,8 @@ struct GpmPrefsPrivate
 	gboolean		 can_hibernate;
 	guint			 idle_delay;
 	GConfClient		*conf;
+	HalCpufreq              *hal_cpufreq;
+	HalCpufreqType           cpufreq_types;
 #ifdef HAVE_GCONF_DEFAULTS
 	PolKitGnomeAction	*default_action;
 #endif
@@ -88,6 +94,13 @@ G_DEFINE_TYPE (GpmPrefs, gpm_prefs, G_TY
 #define ACTION_BLANK_TEXT		_("Blank screen")
 #define ACTION_NOTHING_TEXT		_("Do nothing")
 
+/* The text that should appear in the processor combo box */
+#define CPUFREQ_NOTHING_TEXT		_("Do nothing")
+#define CPUFREQ_ONDEMAND_TEXT		_("Based on processor load")
+#define CPUFREQ_CONSERVATIVE_TEXT	_("Automatic power saving")
+#define CPUFREQ_POWERSAVE_TEXT		_("Maximum power saving")
+#define CPUFREQ_PERFORMANCE_TEXT	_("Always maximum speed")
+
 /* If sleep time in a slider is set to 122 it is considered as never.
  * We use 122 because gnome-screensaver's idle delay can be pushed to 120.
  * We leave ourselves an extra minute past that (because our slider is always
@@ -461,6 +474,45 @@ gpm_prefs_action_combo_changed_cb (GtkWi
 }
 
 /**
+ * gpm_prefs_processor_combo_changed_cb:
+ * @widget: The GtkWidget object
+ * @gpm_pref_key: The GConf key for this preference setting.
+ **/
+static void
+gpm_prefs_processor_combo_changed_cb (GtkWidget *widget,
+				      GpmPrefs  *prefs)
+{
+	gchar *value;
+	const gchar *policy;
+	gchar *gpm_pref_key;
+
+	value = gtk_combo_box_get_active_text (GTK_COMBO_BOX (widget));
+	if (value == NULL) {
+		egg_warning ("active text failed");
+		return;
+	}
+	if (strcmp (value, CPUFREQ_ONDEMAND_TEXT) == 0) {
+		policy = CODE_CPUFREQ_ONDEMAND;
+	} else if (strcmp (value, CPUFREQ_CONSERVATIVE_TEXT) == 0) {
+		policy = CODE_CPUFREQ_CONSERVATIVE;
+	} else if (strcmp (value, CPUFREQ_POWERSAVE_TEXT) == 0) {
+		policy = CODE_CPUFREQ_POWERSAVE;
+	} else if (strcmp (value, CPUFREQ_PERFORMANCE_TEXT) == 0) {
+		policy = CODE_CPUFREQ_PERFORMANCE;
+	} else if (strcmp (value, CPUFREQ_NOTHING_TEXT) == 0) {
+		policy = CODE_CPUFREQ_NOTHING;
+	} else {
+		g_assert (FALSE);
+	}
+
+	g_free (value);
+	gpm_pref_key = (char *) g_object_get_data (G_OBJECT (widget), "conf_key");
+	egg_debug ("Changing %s to %s", gpm_pref_key, policy);
+
+	egg_gconf_set_string (prefs->priv->conf, gpm_pref_key, policy);
+}
+
+/**
  * gpm_prefs_setup_action_combo:
  * @prefs: This prefs class instance
  * @widget_name: The GtkWidget name
@@ -540,6 +592,95 @@ gpm_prefs_setup_action_combo (GpmPrefs  
 }
 
 /**
+ * gpm_prefs_setup_processor_combo:
+ * @prefs: This prefs class instance
+ * @widget_name: The GtkWidget name
+ * @gpm_pref_key: The GConf key for this preference setting.
+ **/
+static void
+gpm_prefs_setup_processor_combo (GpmPrefs         *prefs,
+				 const gchar      *widget_name,
+				 const gchar      *gpm_pref_key)
+{
+	gchar *value;
+	guint n_added = 0;
+	gboolean has_option = FALSE;
+	gboolean is_writable;
+	GtkWidget *widget;
+	HalCpufreqType cpufreq_type;
+	HalCpufreqType cpufreq_types = prefs->priv->cpufreq_types;
+
+	widget = glade_xml_get_widget (prefs->priv->glade_xml, widget_name);
+	egg_gconf_get_string (prefs->priv->conf, gpm_pref_key, &value);
+	egg_gconf_is_writable (prefs->priv->conf, gpm_pref_key, &is_writable);
+
+	gtk_widget_set_sensitive (widget, is_writable);
+
+	if (value == NULL) {
+		egg_warning ("invalid schema, please re-install");
+		value = g_strdup ("nothing");
+	}
+
+	g_object_set_data (G_OBJECT (widget), "conf_key", (gpointer) gpm_pref_key);
+	g_signal_connect (G_OBJECT (widget), "changed",
+			  G_CALLBACK (gpm_prefs_processor_combo_changed_cb),
+			  prefs);
+
+	cpufreq_type = hal_cpufreq_string_to_enum (value);
+
+	if (cpufreq_types & LIBHAL_CPUFREQ_ONDEMAND) {
+		gtk_combo_box_append_text (GTK_COMBO_BOX (widget),
+					   CPUFREQ_ONDEMAND_TEXT);
+		if (cpufreq_type == LIBHAL_CPUFREQ_ONDEMAND) {
+			gtk_combo_box_set_active (GTK_COMBO_BOX (widget), n_added);
+			has_option = TRUE;
+		}
+		n_added++;
+	}
+	if (cpufreq_types & LIBHAL_CPUFREQ_NOTHING) {
+		gtk_combo_box_append_text (GTK_COMBO_BOX (widget),
+					   CPUFREQ_NOTHING_TEXT);
+		if (cpufreq_type == LIBHAL_CPUFREQ_ONDEMAND) {
+			gtk_combo_box_set_active (GTK_COMBO_BOX (widget), n_added);
+			has_option = TRUE;
+		}
+		n_added++;
+	}
+	if (cpufreq_types & LIBHAL_CPUFREQ_CONSERVATIVE) {
+		gtk_combo_box_append_text (GTK_COMBO_BOX (widget),
+					   CPUFREQ_CONSERVATIVE_TEXT);
+		if (cpufreq_type == LIBHAL_CPUFREQ_CONSERVATIVE) {
+			gtk_combo_box_set_active (GTK_COMBO_BOX (widget), n_added);
+			has_option = TRUE;
+		}
+		n_added++;
+	}
+	if (cpufreq_types & LIBHAL_CPUFREQ_POWERSAVE) {
+		gtk_combo_box_append_text (GTK_COMBO_BOX (widget),
+					   CPUFREQ_POWERSAVE_TEXT);
+		if (cpufreq_type == LIBHAL_CPUFREQ_POWERSAVE) {
+			gtk_combo_box_set_active (GTK_COMBO_BOX (widget), n_added);
+			has_option = TRUE;
+		}
+		n_added++;
+	}
+	if (cpufreq_types & LIBHAL_CPUFREQ_PERFORMANCE) {
+		gtk_combo_box_append_text (GTK_COMBO_BOX (widget),
+					   CPUFREQ_PERFORMANCE_TEXT);
+		if (cpufreq_type == LIBHAL_CPUFREQ_PERFORMANCE) {
+			gtk_combo_box_set_active (GTK_COMBO_BOX (widget), n_added);
+			has_option = TRUE;
+		}
+		n_added++;
+	}
+
+	if (has_option == FALSE || cpufreq_type == LIBHAL_CPUFREQ_NOTHING) {
+		gtk_combo_box_set_active (GTK_COMBO_BOX (widget), n_added);
+	}
+	g_free (value);
+}
+
+/**
  * gpm_prefs_checkbox_lock_cb:
  * @widget: The GtkWidget object
  * @gpm_pref_key: The GConf key for this preference setting.
@@ -780,10 +921,16 @@ prefs_setup_ac (GpmPrefs *prefs)
 				 ACTION_HIBERNATE,
 				 ACTION_SHUTDOWN,
 				 NULL};
+	gboolean show_cpufreq;
 
 	gpm_prefs_setup_action_combo (prefs, "combobox_ac_lid",
 				      GPM_CONF_BUTTON_LID_AC,
 				      button_lid_actions);
+
+	if (prefs->priv->hal_cpufreq) {
+		gpm_prefs_setup_processor_combo (prefs, "combobox_ac_cpu",
+						 GPM_CONF_CPUFREQ_POLICY_AC);
+	}
 	gpm_prefs_setup_sleep_slider (prefs, "hscale_ac_computer",
 				      GPM_CONF_TIMEOUT_SLEEP_COMPUTER_AC);
 	gpm_prefs_setup_sleep_slider (prefs, "hscale_ac_display",
@@ -797,6 +944,12 @@ prefs_setup_ac (GpmPrefs *prefs)
 	set_idle_hscale_stops (prefs, "hscale_ac_computer", prefs->priv->idle_delay);
 	set_idle_hscale_stops (prefs, "hscale_ac_display", prefs->priv->idle_delay);
 
+	egg_gconf_get_bool (prefs->priv->conf, GPM_CONF_UI_SHOW_CPUFREQ, &show_cpufreq);
+	if (prefs->priv->hal_cpufreq == NULL ||
+	    show_cpufreq == FALSE) {
+		widget = glade_xml_get_widget (prefs->priv->glade_xml, "hbox_ac_cpu");
+		gtk_widget_hide_all(widget);
+	}
 	if (prefs->priv->has_button_lid == FALSE) {
 		widget = glade_xml_get_widget (prefs->priv->glade_xml, "hbox_ac_lid");
 		gtk_widget_hide_all (widget);
@@ -815,6 +968,7 @@ prefs_setup_battery (GpmPrefs *prefs)
 	GtkWidget *widget;
 	GtkWidget *notebook;
 	gint page;
+	gboolean show_cpufreq;
 
 	const gchar  *button_lid_actions[] =
 				{ACTION_NOTHING,
@@ -844,6 +998,10 @@ prefs_setup_battery (GpmPrefs *prefs)
 	gpm_prefs_setup_action_combo (prefs, "combobox_battery_critical",
 				      GPM_CONF_ACTIONS_CRITICAL_BATT,
 				      battery_critical_actions);
+	if (prefs->priv->hal_cpufreq) {
+		gpm_prefs_setup_processor_combo (prefs, "combobox_battery_cpu",
+						 GPM_CONF_CPUFREQ_POLICY_BATT);
+	}
 	gpm_prefs_setup_sleep_slider (prefs, "hscale_battery_computer",
 				      GPM_CONF_TIMEOUT_SLEEP_COMPUTER_BATT);
 	gpm_prefs_setup_sleep_slider (prefs, "hscale_battery_display",
@@ -864,6 +1022,12 @@ prefs_setup_battery (GpmPrefs *prefs)
 	set_idle_hscale_stops (prefs, "hscale_battery_computer", prefs->priv->idle_delay);
 	set_idle_hscale_stops (prefs, "hscale_battery_display", prefs->priv->idle_delay);
 
+	egg_gconf_get_bool (prefs->priv->conf, GPM_CONF_UI_SHOW_CPUFREQ, &show_cpufreq);
+	if (prefs->priv->hal_cpufreq == NULL ||
+	    show_cpufreq == FALSE) {
+		widget = glade_xml_get_widget (prefs->priv->glade_xml, "hbox_battery_cpu");
+		gtk_widget_hide_all(widget);
+	}
 	if (prefs->priv->has_button_lid == FALSE) {
 		widget = glade_xml_get_widget (prefs->priv->glade_xml, "hbox_battery_lid");
 		gtk_widget_hide_all (widget);
@@ -1039,6 +1203,8 @@ gpm_prefs_init (GpmPrefs *prefs)
 
 	prefs->priv = GPM_PREFS_GET_PRIVATE (prefs);
 
+	prefs->priv->hal_cpufreq = hal_cpufreq_new();
+
 	prefs->priv->conf = gconf_client_get_default ();
 	/* watch gnome-power-manager keys */
 	gconf_client_add_dir (prefs->priv->conf, GPM_CONF_DIR,
@@ -1063,6 +1229,10 @@ gpm_prefs_init (GpmPrefs *prefs)
 	prefs->priv->can_hibernate = gpm_dbus_method_bool ("CanHibernate");
 	egg_debug ("caps=%i", caps);
 
+	if (prefs->priv->hal_cpufreq) {
+		hal_cpufreq_get_governors (prefs->priv->hal_cpufreq, &prefs->priv->cpufreq_types);
+	}
+
 #ifdef HAVE_GCONF_DEFAULTS
 	/* use custom widgets */
 	glade_set_custom_handler (gpk_prefs_create_custom_widget, prefs);
@@ -1124,6 +1294,10 @@ gpm_prefs_finalize (GObject *object)
 
 	g_object_unref (prefs->priv->conf);
 
+	if (prefs->priv->hal_cpufreq) {
+		g_object_unref(prefs->priv->hal_cpufreq);
+	}
+
 	G_OBJECT_CLASS (gpm_prefs_parent_class)->finalize (object);
 }
 
Index: b/src/Makefile.am
===================================================================
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -95,6 +95,8 @@ gnome_power_statistics_CFLAGS =				\
 gnome_power_preferences_SOURCES =			\
 	egg-debug.h					\
 	egg-debug.c					\
+	egg-gconf.h					\
+	egg-gconf.c					\
 	egg-unique.h					\
 	egg-unique.c					\
 	egg-dbus-proxy.h				\
@@ -141,6 +143,8 @@ gnome_power_preferences_CFLAGS =			\
 gnome_power_manager_SOURCES =				\
 	egg-debug.h					\
 	egg-debug.c					\
+	egg-gconf.h					\
+	egg-gconf.c					\
 	egg-dbus-monitor.h				\
 	egg-dbus-monitor.c				\
 	egg-dbus-proxy.h				\
@@ -159,6 +163,8 @@ gnome_power_manager_SOURCES =				\
 	gpm-notify.c					\
 	gpm-phone.h					\
 	gpm-phone.c					\
+	gpm-cpufreq.h					\
+	gpm-cpufreq.c					\
 	gpm-backlight.h					\
 	gpm-backlight.c					\
 	gpm-prefs-server.h				\
