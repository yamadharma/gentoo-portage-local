#
# Set the GNUstep system root and local root
#
GNUSTEP_ROOT=/usr/GNUstep
GNUSTEP_SYSTEM_ROOT=/usr/GNUstep/System
GNUSTEP_FLATTENED=
if [ -z "$LIBRARY_COMBO" ]; then
  LIBRARY_COMBO=gnu-gnu-gnu
fi

GNUSTEP_MAKEFILES=$GNUSTEP_SYSTEM_ROOT/Library/Makefiles

GNUSTEP_LOCAL_ROOT=/usr/GNUstep/Local
GNUSTEP_NETWORK_ROOT=/usr/GNUstep/Network
export GNUSTEP_LOCAL_ROOT GNUSTEP_NETWORK_ROOT

# If multi-platform support is disabled, just use the hardcoded cpu,
# vendor and os determined when gnustep-make was configured.  The
# reason using the hardcoded ones might be better is that config.guess
# and similar scripts might even require compiling test files to
# determine the platform - but then you can't source GNUstep.sh
# without having gcc, binutils, libc6-dev installed.  Which can be a
# problem for end-users who are not developers and have no development
# tools installed.  To prevent this problem, unless we were configured
# to determine the platform at run time, by default we use the
# hardcoded values of GNUSTEP_HOST*.
if [ -z "" ]; then
  GNUSTEP_HOST=i686-pc-linux-gnu
  GNUSTEP_HOST_CPU=ix86
  GNUSTEP_HOST_VENDOR=pc
  GNUSTEP_HOST_OS=linux-gnu
fi

#
# Determine the host information
#
if [ -z "$GNUSTEP_HOST" ]; then
  # Not all shells (e.g. /bin/sh on FreeBSD < 4.0 or ash) have pushd/popd
  tmpdir=`pwd`; cd /tmp
  GNUSTEP_HOST=`$GNUSTEP_MAKEFILES/config.guess`
  GNUSTEP_HOST=`$GNUSTEP_MAKEFILES/config.sub $GNUSTEP_HOST`
  cd "$tmpdir"
  unset tmpdir
fi

if [ -z "$GNUSTEP_HOST_CPU" ]; then
  GNUSTEP_HOST_CPU=`$GNUSTEP_MAKEFILES/cpu.sh $GNUSTEP_HOST`
  GNUSTEP_HOST_CPU=`$GNUSTEP_MAKEFILES/clean_cpu.sh $GNUSTEP_HOST_CPU`
fi

if [ -z "$GNUSTEP_HOST_VENDOR" ]; then
  GNUSTEP_HOST_VENDOR=`$GNUSTEP_MAKEFILES/vendor.sh $GNUSTEP_HOST`
  GNUSTEP_HOST_VENDOR=`$GNUSTEP_MAKEFILES/clean_vendor.sh $GNUSTEP_HOST_VENDOR`
fi

if [ -z "$GNUSTEP_HOST_OS" ]; then 
  GNUSTEP_HOST_OS=`$GNUSTEP_MAKEFILES/os.sh $GNUSTEP_HOST`
  GNUSTEP_HOST_OS=`$GNUSTEP_MAKEFILES/clean_os.sh $GNUSTEP_HOST_OS`
fi

export GNUSTEP_HOST GNUSTEP_HOST_CPU GNUSTEP_HOST_VENDOR GNUSTEP_HOST_OS

#
# Ask the user_home tool for the root path.
#
if [ -z "$GNUSTEP_FLATTENED" ]; then
  GNUSTEP_USER_ROOT=`$GNUSTEP_MAKEFILES/$GNUSTEP_HOST_CPU/$GNUSTEP_HOST_OS/user_home user`
else
  GNUSTEP_USER_ROOT=`$GNUSTEP_MAKEFILES/user_home user`
fi

export GNUSTEP_USER_ROOT

#
# GNUSTEP_PATHLIST is like an abstract path-like shell
# variable, which can be used to search the gnustep directories - and
# in these scripts, it is also used to set up other shell variables
#
if [ -z "$GNUSTEP_PATHLIST" ]; then

  # If we need to convert win32 paths, this is the time!
  if [ -z "`echo $GNUSTEP_SYSTEM_ROOT | sed 's|^[a-zA-Z]:/.*$||'`" ]; then
    G_U_R=`$GNUSTEP_MAKEFILES/fixpath.sh -u "$GNUSTEP_USER_ROOT"`
    G_L_R=`$GNUSTEP_MAKEFILES/fixpath.sh -u "$GNUSTEP_LOCAL_ROOT"`
    G_N_R=`$GNUSTEP_MAKEFILES/fixpath.sh -u "$GNUSTEP_NETWORK_ROOT"`
    G_S_R=`$GNUSTEP_MAKEFILES/fixpath.sh -u "$GNUSTEP_SYSTEM_ROOT"`
  else
    G_U_R="$GNUSTEP_USER_ROOT"
    G_L_R="$GNUSTEP_LOCAL_ROOT"
    G_N_R="$GNUSTEP_NETWORK_ROOT"
    G_S_R="$GNUSTEP_SYSTEM_ROOT"
  fi

  # Now we basically want to build
  # GNUSTEP_PATHLIST="$G_U_R:$G_L_R:$G_N_R:$G_S_R"
  # but we want to remove duplicates.

  # Start with $G_U_R:$G_L_R - or $G_U_R if they are the same
  if [ "$G_L_R" != "$G_U_R" ]; then
    GNUSTEP_PATHLIST="$G_U_R:$G_L_R"
  else
    GNUSTEP_PATHLIST="$G_U_R"
  fi

  # Now append $G_N_R but only if different from what already there
  if [ "$G_N_R" != "$G_U_R" ]; then
    if [ "$G_N_R" != "$G_L_R" ]; then
      GNUSTEP_PATHLIST="$GNUSTEP_PATHLIST:$G_N_R"
    fi
  fi

  # Now append $G_S_R but only if different from what already there
  if [ "$G_S_R" != "$G_U_R" ]; then
    if [ "$G_S_R" != "$G_L_R" ]; then
      if [ "$G_S_R" != "$G_N_R" ]; then
        GNUSTEP_PATHLIST="$GNUSTEP_PATHLIST:$G_S_R"
      fi
    fi
  fi

  unset G_U_R
  unset G_L_R
  unset G_N_R
  unset G_S_R

  export GNUSTEP_PATHLIST
fi

#
# Add path to Tools to PATH
#
tmp_IFS="$IFS"
IFS=:
temp_path=
for dir in $GNUSTEP_PATHLIST; do

  # Prepare the path_fragment
  if [ -z "$GNUSTEP_FLATTENED" ]; then
    path_fragment="$dir/Tools:$dir/Tools/${GNUSTEP_HOST_CPU}/${GNUSTEP_HOST_OS}/${LIBRARY_COMBO}:$dir/Tools/${GNUSTEP_HOST_CPU}/${GNUSTEP_HOST_OS}"
  else
    path_fragment="$dir/Tools"
  fi

  # Add it to temp_path
  if [ -z "$temp_path" ]; then
    temp_path="$path_fragment"
  else
    temp_path="$temp_path:$path_fragment"
  fi

  unset path_fragment

done
IFS="$tmp_IFS"
unset tmp_IFS
unset dir
if [ -z "$PATH" ]; then
  PATH="$temp_path"
else
  if ( echo ${PATH}| grep -v "${temp_path}" >/dev/null ); then
    PATH="${temp_path}:${PATH}"
  fi
fi
unset temp_path
export PATH

. $GNUSTEP_MAKEFILES/ld_lib_path.sh

tmp_IFS="$IFS"
IFS=:
gnustep_class_path=
for dir in $GNUSTEP_PATHLIST; do

  if [ -z "$gnustep_class_path" ]; then
    gnustep_class_path="$dir/Library/Libraries/Java"
  else
    gnustep_class_path="$gnustep_class_path:$dir/Library/Libraries/Java"
  fi

done
IFS="$tmp_IFS"
unset tmp_IFS
unset dir

if [ -z "$CLASSPATH" ]; then
  CLASSPATH="$gnustep_class_path"
else
  if ( echo ${CLASSPATH}| grep -v "${gnustep_class_path}" >/dev/null ); then
    CLASSPATH="$CLASSPATH:$gnustep_class_path"
  fi
fi

unset gnustep_class_path
export CLASSPATH

#
# Setup path for loading guile modules too.
#
old_IFS="$IFS"
IFS=:
guile_paths=
for dir in $GNUSTEP_PATHLIST; do

  if [ -z "$guile_paths" ]; then
    guile_paths="$dir/Library/Libraries/Guile"
  else
    guile_paths="$guile_paths:$dir/Library/Libraries/Guile"
  fi

done
IFS="$old_IFS"
unset old_IFS
unset dir

if [ -z "$GUILE_LOAD_PATH" ]; then
  GUILE_LOAD_PATH="$guile_paths"
else
  if ( echo ${GUILE_LOAD_PATH}| grep -v "${guile_paths}" >/dev/null ); then
    GUILE_LOAD_PATH="$guile_paths:$GUILE_LOAD_PATH"
  fi
fi
export GUILE_LOAD_PATH
unset guile_paths


#
# Perform any user initialization
#
if [ -f "$GNUSTEP_USER_ROOT/GNUstep.sh" ]; then
  . "$GNUSTEP_USER_ROOT/GNUstep.sh"
fi

#
# Run 'make_services' in background if possible - updates cache of services
# and applications/file-extensions known to the applications.
#
# We run it in a subshell - using ("$TDIR/make_services" &) -
# otherwise shell with job control (like bash) output an annoying
# message when make_services is done, while we want it to happen
# silently.
#
if [ -z "$GNUSTEP_FLATTENED" ]; then
  TDIR=$GNUSTEP_SYSTEM_ROOT/Tools/$GNUSTEP_HOST_CPU/$GNUSTEP_HOST_OS
  if [ -x "$TDIR/$LIBRARY_COMBO/make_services" ]
  then
    ("$TDIR/$LIBRARY_COMBO/make_services" &)
  else
    if [ -x "$TDIR/make_services" ]
    then
      ("$TDIR/make_services" &)
    fi
  fi
else
  TDIR=$GNUSTEP_SYSTEM_ROOT/Tools
  if [ -x "$TDIR/make_services" ]
  then
    ("$TDIR/make_services" &)
  fi
fi
unset TDIR


