--- elisp-common.eclass	2008-01-23 20:31:29.000000000 +0300
+++ elisp-common.eclass-	2008-11-02 16:48:59.000000000 +0300
@@ -1,50 +1,56 @@
-# Copyright 1999-2007 Gentoo Foundation
+# Copyright 1999-2008 Gentoo Foundation
 # Distributed under the terms of the GNU General Public License v2
-# $Header: /var/cvsroot/gentoo-x86/eclass/elisp-common.eclass,v 1.22 2007/07/02 06:19:18 opfer Exp $
+# $Header: /var/cvsroot/gentoo-x86/eclass/elisp-common.eclass,v 1.51 2008/10/27 21:34:34 ulm Exp $
 #
-# Copyright 2007 Christian Faulhammer <opfer@gentoo.org>
-# Copyright 2002-2007 Matthew Kennedy <mkennedy@gentoo.org>
-# Copyright 2003 Jeremy Maitin-Shepard <jbms@attbi.com>
-# Copyright 2007 Ulrich Mueller <ulm@gentoo.org>
-#
-# This is not a real eclass, but it does provide Emacs-related installation
-# utilities.
-#
-# USAGE:
+# Copyright 2002-2004 Matthew Kennedy <mkennedy@gentoo.org>
+# Copyright 2003      Jeremy Maitin-Shepard <jbms@attbi.com>
+# Copyright 2004-2005 Mamoru Komachi <usata@gentoo.org>
+# Copyright 2007-2008 Christian Faulhammer <opfer@gentoo.org>
+# Copyright 2007-2008 Ulrich MÃ¼ller <ulm@gentoo.org>
+#
+# @ECLASS: elisp-common.eclass
+# @MAINTAINER:
+# Feel free to contact the Emacs team through <emacs@gentoo.org> if you have
+# problems, suggestions or questions.
+# @BLURB: Emacs-related installation utilities
+# @DESCRIPTION:
 #
 # Usually you want to use this eclass for (optional) GNU Emacs support of
 # your package.  This is NOT for XEmacs!
-#  Many of the steps here are sometimes done by the build system of your
+#
+# Many of the steps here are sometimes done by the build system of your
 # package (especially compilation), so this is mainly for standalone elisp
 # files you gathered from somewhere else.
-#  When relying on the emacs USE flag, you need to add
 #
-#		emacs? ( virtual/emacs )
+# When relying on the emacs USE flag, you need to add
+#
+#   	emacs? ( virtual/emacs )
 #
 # to your DEPEND/RDEPEND line and use the functions provided here to bring
 # the files to the correct locations.
 #
+# .SS
 # src_compile() usage:
-# --------------------
 #
 # An elisp file is compiled by the elisp-compile() function defined here and
-# simply takes the source files as arguments.  In the case of interdependent
-# elisp files, you can use the elisp-comp() function which makes sure all
-# files are loadable.
-#
-#		elisp-compile *.el || die "elisp-compile failed!"
-# or
-#		elisp-comp *.el || die "elisp-comp failed!"
+# simply takes the source files as arguments.  The case of interdependent
+# elisp files is also supported, since the current directory is added to the
+# load-path which makes sure that all files are loadable.
 #
-#  Function elisp-make-autoload-file() can be used to generate a file with
+#   	elisp-compile *.el || die
+#
+# Formerly, function elisp-comp() was used for compilation of interdependent
+# elisp files.  This usage is considered as obsolete.
+#
+# Function elisp-make-autoload-file() can be used to generate a file with
 # autoload definitions for the lisp functions.  It takes the output file name
 # (default: "${PN}-autoloads.el") and a list of directories (default: working
 # directory) as its arguments.  Use of this function requires that the elisp
-# source files contain magic ";;;###autoload" comments. See the Emacs Lisp
+# source files contain magic ";;;###autoload" comments.  See the Emacs Lisp
 # Reference Manual (node "Autoload") for a detailed explanation.
 #
+# .SS
 # src_install() usage:
-# --------------------
 #
 # The resulting compiled files (.elc) should be put in a subdirectory of
 # /usr/share/emacs/site-lisp/ which is named after the first argument
@@ -53,155 +59,186 @@
 # something else, but remember to tell elisp-site-file-install() (see below)
 # the change, as it defaults to ${PN}.
 #
-#		elisp-install ${PN} *.elc *.el || die "elisp-install failed!"
+#   	elisp-install ${PN} *.el *.elc || die
 #
-#  To let the Emacs support be activated by Emacs on startup, you need
+# To let the Emacs support be activated by Emacs on startup, you need
 # to provide a site file (shipped in ${FILESDIR}) which contains the startup
 # code (have a look in the documentation of your software).  Normally this
 # would look like this:
 #
-#	;;; csv-mode site-lisp configuration
+#   	;;; csv-mode site-lisp configuration
+#
+#   	(add-to-list 'load-path "@SITELISP@")
+#   	(add-to-list 'auto-mode-alist '("\\.csv\\'" . csv-mode))
+#   	(autoload 'csv-mode "csv-mode" "Major mode for csv files." t)
+#
+# If your Emacs support files are installed in a subdirectory of
+# /usr/share/emacs/site-lisp/ (which is recommended), you need to extend
+# Emacs' load-path as shown in the first non-comment.
+# The elisp-site-file-install() function of this eclass will replace
+# "@SITELISP@" by the actual path.
 #
-#	(add-to-list 'load-path "@SITELISP@")
-#	(add-to-list 'auto-mode-alist '("\\.csv\\'" . csv-mode))
-#	(autoload 'csv-mode "csv-mode" "Major mode for editing csv files." t)
-#
-#  If your Emacs support files are installed in a subdirectory of
-# /usr/share/emacs/site-lisp/ (which is recommended if more than one file is
-# installed), you need to extend Emacs' load-path as shown in the first
-# non-comment.  The elisp-site-file-install() function of this eclass will
-# replace "@SITELISP@" by the actual path.
-#  The next line tells Emacs to load the mode opening a file ending with
+# The next line tells Emacs to load the mode opening a file ending with
 # ".csv" and load functions depending on the context and needed features.
 # Be careful though.  Commands as "load-library" or "require" bloat the
 # editor as they are loaded on every startup.  When having a lot of Emacs
 # support files, users may be annoyed by the start-up time.  Also avoid
 # keybindings as they might interfere with the user's settings.  Give a hint
 # in pkg_postinst(), which should be enough.
-#  The naming scheme for this site file is "[0-9][0-9]*-gentoo.el", where the
-# two digits at the beginning define the loading order.  So if you depend on
-# another Emacs package, your site file's number must be higher!
-#  Best practice is to define a SITEFILE variable in the global scope of your
-# ebuild (right after DEPEND e.g.):
 #
-#		SITEFILE=50${PN}-gentoo.el
+# The naming scheme for this site-init file matches the shell pattern
+# "[1-8][0-9]*-gentoo.el", where the two digits at the beginning define the
+# loading order (numbers below 10 or above 89 are reserved for internal use).
+# So if you depend on another Emacs package, your site file's number must be
+# higher!
+#
+# Best practice is to define a SITEFILE variable in the global scope of your
+# ebuild (e.g., right after DEPEND):
+#
+#   	SITEFILE=50${PN}-gentoo.el
 #
-#  Which is then installed by
+# Which is then installed by
 #
-#		elisp-site-file-install "${FILESDIR}/${SITEFILE}"
+#   	elisp-site-file-install "${FILESDIR}/${SITEFILE}" || die
 #
 # in src_install().  If your subdirectory is not named ${PN}, give the
 # differing name as second argument.
 #
+# .SS
 # pkg_postinst() / pkg_postrm() usage:
-# ------------------------------------
 #
 # After that you need to recreate the start-up file of Emacs after emerging
 # and unmerging by using
 #
-#		pkg_postinst() {
-#			elisp-site-regen
-#		}
-#
-#		pkg_postrm() {
-#			elisp-site-regen
-#		}
+#   	pkg_postinst() {
+#   		elisp-site-regen
+#   	}
+#
+#   	pkg_postrm() {
+#   		elisp-site-regen
+#   	}
 #
-#  When having optional Emacs support, you should prepend "use emacs &&" to
+# When having optional Emacs support, you should prepend "use emacs &&" to
 # above calls of elisp-site-regen().  Don't use "has_version virtual/emacs"!
-# When unmerging the state of the USE flag emacs is taken from the package
+# When unmerging the state of the emacs USE flag is taken from the package
 # database and not from the environment, so it is no problem when you unset
-# USE=emacs between merge und unmerge of a package.
+# USE=emacs between merge and unmerge of a package.
 #
+# .SS
 # Miscellaneous functions:
-# ------------------------
 #
 # elisp-emacs-version() outputs the version of the currently active Emacs.
-#
-#  As always: Feel free to contact Emacs team through emacs@gentoo.org if you
-# have problems, suggestions or questions.
-
-#
-# ELISP_DISABLE_ELC 
-# if not empty, `*.elc' files removed
-# for multi-instansed emacs installation
 
 # @ECLASS-VARIABLE: SITELISP
 # @DESCRIPTION:
 # Directory where packages install Emacs Lisp files.
-SITELISP=/usr/share/site-lisp/common/packages
+SITELISP=/usr/share/emacs/site-lisp
 
+# @ECLASS-VARIABLE: SITEETC
+# @DESCRIPTION:
 # Directory where packages install miscellaneous (not Lisp) files.
-SITEETC=/usr/share/site-lisp/common/etc    	    
+SITEETC=/usr/share/emacs/etc
 
-# @ECLASS-VARIABLE: SITEFILE
+# @ECLASS-VARIABLE: EMACS
 # @DESCRIPTION:
-# Name of package's site-init file.
-SITEFILE=50${PN}-gentoo.el
-
+# Path of Emacs executable.
 EMACS=/usr/bin/emacs
-# The following works for Emacs versions 18--23, don't change it.
+
+# @ECLASS-VARIABLE: EMACSFLAGS
+# @DESCRIPTION:
+# Flags for executing Emacs in batch mode.
+# These work for Emacs versions 18-23, so don't change them.
 EMACSFLAGS="-batch -q --no-site-file"
 
-ECLASS=elisp-common
-INHERITED="$INHERITED $ECLASS"
+# @ECLASS-VARIABLE: BYTECOMPFLAGS
+# @DESCRIPTION:
+# Emacs flags used for byte-compilation in elisp-compile().
+BYTECOMPFLAGS="-L ."
 
-SITELISPEMACS=/usr/share/emacs/site-lisp
-SITELISP=/usr/share/site-lisp/common/packages
-SITELISPROOT=/usr/share/site-lisp
-SITELISPDOC=/usr/share/site-lisp/doc
-SITELISPEMACS=/usr/share/emacs/site-lisp
-    	    
-HAS_ECF=1
-
-
-# Sandbox issues
-for i in /usr/info ${INFOPATH}
-do
-    addpredict ${i}
-done
-
-elisp-common_pkg_setup () {
-	if ( has_version 'app-emacs/ecf' )  
-	    then
-            export SITELISP=/usr/share/site-lisp/common/packages
-    	    export SITELISPROOT=/usr/share/site-lisp
-    	    export SITELISPDOC=/usr/share/site-lisp/doc
-    	    export SITELISPEMACS=/usr/share/emacs/site-lisp
-            export SITEETC=/usr/share/site-lisp/common/etc
-    	    
-    	    export HAS_ECF=1
-	    # Sandbox issues
-    	    for i in ${INFOPATH}
-	    do
-		addpredict ${i}
-    	    done
-	else    
-            export SITELISP=/usr/share/emacs/site-lisp
-            export SITELISPEMACS=/usr/share/emacs/site-lisp
-            export SITEETC=/usr/share/emacs/etc
+# @FUNCTION: elisp-compile
+# @USAGE: <list of elisp files>
+# @DESCRIPTION:
+# Byte-compile Emacs Lisp files.
+#
+# This function uses GNU Emacs to byte-compile all ".el" specified by its
+# arguments.  The resulting byte-code (".elc") files are placed in the same
+# directory as their corresponding source file.
+#
+# The current directory is added to the load-path.  This will ensure that
+# interdependent Emacs Lisp files are visible between themselves, in case
+# they require or load one another.
 
-	    export HAS_ECF=
-	fi
+elisp-compile() {
+	ebegin "Compiling GNU Emacs Elisp files"
+	${EMACS} ${EMACSFLAGS} ${BYTECOMPFLAGS} -f batch-byte-compile "$@"
+	eend $? "elisp-compile: batch-byte-compile failed"
 }
 
-elisp-compile() {
-	elisp-common_pkg_setup
+# #FUNCTION: elisp-comp
+# #USAGE: <list of elisp files>
+# #DESCRIPTION:
+# Byte-compile interdependent Emacs Lisp files.
+# THIS FUNCTION IS DEPRECATED.
+#
+# This function byte-compiles all ".el" files which are part of its
+# arguments, using GNU Emacs, and puts the resulting ".elc" files into the
+# current directory, so disregarding the original directories used in ".el"
+# arguments.
+#
+# This function manages in such a way that all Emacs Lisp files to be
+# compiled are made visible between themselves, in the event they require or
+# load one another.
+
+elisp-comp() {
+	# Copyright 1995 Free Software Foundation, Inc.
+	# FranÃ§ois Pinard <pinard@iro.umontreal.ca>, 1995.
+	# Originally taken from GNU autotools.
+
+	ewarn "Function elisp-comp is deprecated and may be removed in future."
+	ewarn "Please use function elisp-compile instead, or report a bug about"
+	ewarn "${CATEGORY}/${PF} at <http://bugs.gentoo.org/>."
+	echo
+
+	[ $# -gt 0 ] || return 1
+
+	ebegin "Compiling GNU Emacs Elisp files"
+
+	local tempdir=elc.$$
+	mkdir ${tempdir}
+	cp "$@" ${tempdir}
+	pushd ${tempdir}
+
+	echo "(add-to-list 'load-path \"../\")" > script
+	${EMACS} ${EMACSFLAGS} -l script -f batch-byte-compile *.el
+	local ret=$?
+	mv *.elc ..
 
-	/usr/bin/emacs --batch -f batch-byte-compile --no-site-file --no-init-file $*
+	popd
+	rm -fr ${tempdir}
+
+	eend ${ret} "elisp-comp: batch-byte-compile failed"
 }
 
+# @FUNCTION: elisp-emacs-version
+# @DESCRIPTION:
+# Output version of currently active Emacs.
+
 elisp-emacs-version() {
-	# Output version of currently active Emacs.
-	# The following will work for at least versions 18-22.
+	# The following will work for at least versions 18-23.
 	echo "(princ emacs-version)" >"${T}"/emacs-version.el
-	/usr/bin/emacs -batch -q --no-site-file -l "${T}"/emacs-version.el
+	${EMACS} ${EMACSFLAGS} -l "${T}"/emacs-version.el
+	rm -f "${T}"/emacs-version.el
 }
 
-elisp-make-autoload-file () {
+# @FUNCTION: elisp-make-autoload-file
+# @USAGE: [output file] [list of directories]
+# @DESCRIPTION:
+# Generate a file with autoload definitions for the lisp functions.
+
+elisp-make-autoload-file() {
 	local f="${1:-${PN}-autoloads.el}"
 	shift
-	einfo "Generating autoload file for GNU Emacs ..."
+	ebegin "Generating autoload file for GNU Emacs"
 
 	sed 's/^FF/\f/' >"${f}" <<-EOF
 	;;; ${f##*/} --- autoloads for ${P}
@@ -220,154 +257,193 @@ elisp-make-autoload-file () {
 	;;; ${f##*/} ends here
 	EOF
 
-	/usr/bin/emacs -batch -q --no-site-file \
+	${EMACS} ${EMACSFLAGS} \
 		--eval "(setq make-backup-files nil)" \
 		--eval "(setq generated-autoload-file (expand-file-name \"${f}\"))" \
 		-f batch-update-autoloads "${@-.}"
+
+	eend $? "elisp-make-autoload-file: batch-update-autoloads failed"
 }
 
+# @FUNCTION: elisp-install
+# @USAGE: <subdirectory> <list of files>
+# @DESCRIPTION:
+# Install files in SITELISP directory.
+
 elisp-install() {
-	local subdir=$1
-	dodir "${SITELISP}/${subdir}"
-	insinto "${SITELISP}/${subdir}"
+	local subdir="$1"
 	shift
-	doins $@
+	ebegin "Installing Elisp files for GNU Emacs support"
+	( # subshell to avoid pollution of calling environment
+		insinto "${SITELISP}/${subdir}"
+		doins "$@"
+	)
+	eend $? "elisp-install: doins failed"
 }
 
+# @FUNCTION: elisp-site-file-install
+# @USAGE: <site-init file> [subdirectory]
+# @DESCRIPTION:
+# Install Emacs site-init file in SITELISP directory.
+
 elisp-site-file-install() {
-	elisp-common_pkg_setup
-	
-	if [ -z "${HAS_ECF}" ]
-	    then
-	    local sitefile=$1 my_pn=${2:-${PN}}
-	    pushd ${S}
-	    cp ${sitefile} ${T}
-	    sed -i "s:@SITELISP@:${SITELISP}/${my_pn}:g" ${T}/$(basename ${sitefile})
-	    insinto ${SITELISP}
-	    doins ${T}/$(basename ${sitefile})
-	    popd
-	fi
+	local sf="${T}/${1##*/}" my_pn="${2:-${PN}}" ret
+	ebegin "Installing site initialisation file for GNU Emacs"
+	cp "$1" "${sf}"
+	sed -i -e "s:@SITELISP@:${SITELISP}/${my_pn}:g" \
+		-e "s:@SITEETC@:${SITEETC}/${my_pn}:g" "${sf}"
+	( # subshell to avoid pollution of calling environment
+		insinto "${SITELISP}/site-gentoo.d"
+		doins "${sf}"
+	)
+	ret=$?
+	rm -f "${sf}"
+	eend ${ret} "elisp-site-file-install: doins failed"
 }
 
+# @FUNCTION: elisp-site-regen
+# @DESCRIPTION:
+# Regenerate the site-gentoo.el file, based on packages' site initialisation
+# files in the /usr/share/emacs/site-lisp/site-gentoo.d/ directory.
+#
+# Note: Before December 2007, site initialisation files were installed in
+# /usr/share/emacs/site-lisp/.  For backwards compatibility, this location is
+# still supported when generating site-gentoo.el.
+
 elisp-site-regen() {
-	elisp-common_pkg_setup
-	
-	einfo "Regenerating ${SITELISP}/site-gentoo.el ..."
-	einfo ""
-	if [ -n "${HAS_ECF}" ]
-	then
-	    einfo "ecf used. Regeneration not needed ."
-	else
-	cat <<EOF >${SITELISP}/site-gentoo.el
-;;; DO NOT EDIT THIS FILE -- IT IS GENERATED AUTOMATICALLY BY PORTAGE
-;;; -----------------------------------------------------------------
-
-EOF
-	ls ${SITELISP}/[0-9][0-9]*-gentoo.el |sort -n | \
-	while read sf
+	local i sf line firstrun obsolete
+	local -a sflist
+	# Work around Paludis borkage: variable T is empty in pkg_postrm
+	local tmpdir=${T:-$(mktemp -d)}
+
+	if [ ! -d "${ROOT}${SITELISP}" ]; then
+		eerror "elisp-site-regen: Directory ${SITELISP} does not exist"
+		return 1
+	fi
+
+	[ -e "${ROOT}${SITELISP}"/site-gentoo.el ] || firstrun=t
+
+	if [ "${firstrun}" ] && [ ! -e "${ROOT}${SITELISP}"/site-start.el ]; then
+		einfo "Creating default ${SITELISP}/site-start.el ..."
+		cat <<-EOF >"${tmpdir}"/site-start.el
+		;;; site-start.el
+
+		;;; Commentary:
+		;; This default site startup file is installed by elisp-common.eclass.
+		;; You may replace this file by your own site initialisation, or even
+		;; remove it completely; it will not be recreated.
+
+		;;; Code:
+		;; Load site initialisation for Gentoo-installed packages.
+		(require 'site-gentoo)
+
+		;;; site-start.el ends here
+		EOF
+	fi
+
+	einfon "Regenerating ${SITELISP}/site-gentoo.el ..."
+
+	# remove any auxiliary file (from previous run)
+	rm -f "${ROOT}${SITELISP}"/00site-gentoo.el
+
+	# set nullglob option, there may be a directory without matching files
+	local old_shopts=$(shopt -p nullglob)
+	shopt -s nullglob
+
+	for sf in "${ROOT}${SITELISP}"/[0-9][0-9]*-gentoo.el \
+		"${ROOT}${SITELISP}"/site-gentoo.d/[0-9][0-9]*.el
 	do
-		einfo "	 Adding $(basename $sf) ..."
-		# Great for debugging, too noisy and slow for users though
-#		echo "(message \"Loading $sf ...\")" >>${SITELISP}/site-start.el
-		cat $sf >>${SITELISP}/site-gentoo.el
+		[ -r "${sf}" ] || continue
+		# sort files by their basename. straight insertion sort.
+		for ((i=${#sflist[@]}; i>0; i--)); do
+			[[ ${sf##*/} < ${sflist[i-1]##*/} ]] || break
+			sflist[i]=${sflist[i-1]}
+		done
+		sflist[i]=${sf}
+		# set a flag if there are obsolete files
+		[ "${sf%/*}" = "${ROOT}${SITELISP}" ] && obsolete=t
 	done
-	while read line; do einfo "${line}"; done <<EOF
 
-All site initialization for Gentoo-installed packages is now added to
-/usr/share/emacs/site-lisp/site-gentoo.el; site-start.el is no longer
-managed by Gentoo. You are responsible for all maintenance of
-site-start.el if there is such a file.
-
-In order for this site initialization to be loaded for all users
-automatically, as was done previously, you can add a line like this:
-
-	(load "/usr/share/emacs/site-lisp/site-gentoo")
-
-to /usr/share/emacs/site-lisp/site-start.el.  Alternatively, that line
-can be added by individual users to their initialization files, or for
-greater flexibility, users can select which of the package-specific
-initialization files in /usr/share/emacs/site-lisp to load.
-EOF
-	echo
-	fi
-}
+	eval "${old_shopts}"
 
-# The following Emacs Lisp compilation routine is taken from GNU
-# autotools.
+	cat <<-EOF >"${tmpdir}"/site-gentoo.el
+	;;; site-gentoo.el --- site initialisation for Gentoo-installed packages
 
-elisp-comp() {
-# Copyright 1995 Free Software Foundation, Inc.
-# François Pinard <pinard@iro.umontreal.ca>, 1995.
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2, or (at your option)
-# any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
-
-# As a special exception to the GNU General Public License, if you
-# distribute this file as part of a program that contains a
-# configuration script generated by Autoconf, you may include it under
-# the same distribution terms that you use for the rest of that program.
-
-# This script byte-compiles all `.el' files which are part of its
-# arguments, using GNU Emacs, and put the resulting `.elc' files into
-# the current directory, so disregarding the original directories used
-# in `.el' arguments.
-#
-# This script manages in such a way that all Emacs LISP files to
-# be compiled are made visible between themselves, in the event
-# they require or load-library one another.
-
-	if test $# = 0; then
-		echo 1>&2 "No files given to $0"
-		exit 1
-	else
-		if test -z "$EMACS" || test "$EMACS" = "t"; then
-		# Value of "t" means we are running in a shell under Emacs.
-		# Just assume Emacs is called "emacs".
-			EMACS=emacs
-		fi
-
-		tempdir=elc.$$
-		mkdir $tempdir
-		cp $* $tempdir
-		cd $tempdir
-
-		echo "(add-to-list 'load-path \"../\")" > script
-		$EMACS -batch -q --no-site-file --no-init-file -l script -f batch-byte-compile *.el
-		mv *.elc ..
+	;;; Commentary:
+	;; Automatically generated by elisp-common.eclass
+	;; DO NOT EDIT THIS FILE
+
+	;;; Code:
+	EOF
+	# Use sed instead of cat here, since files may miss a trailing newline.
+	sed '$q' "${sflist[@]}" </dev/null >>"${tmpdir}"/site-gentoo.el
+	cat <<-EOF >>"${tmpdir}"/site-gentoo.el
+
+	(provide 'site-gentoo)
 
-		cd ..
-		rm -fr $tempdir
+	;; Local Variables:
+	;; no-byte-compile: t
+	;; End:
+	;;; site-gentoo.el ends here
+	EOF
+
+	if cmp -s "${ROOT}${SITELISP}"/site-gentoo.el "${tmpdir}"/site-gentoo.el
+	then
+		# This prevents outputting unnecessary text when there
+		# was actually no change.
+		# A case is a remerge where we have doubled output.
+		echo " no changes."
+	else
+		mv "${tmpdir}"/site-gentoo.el "${ROOT}${SITELISP}"/site-gentoo.el
+		[ -f "${tmpdir}"/site-start.el ] \
+			&& [ ! -e "${ROOT}${SITELISP}"/site-start.el ] \
+			&& mv "${tmpdir}"/site-start.el "${ROOT}${SITELISP}"/site-start.el
+		echo
+		einfo "... ${#sflist[@]} site initialisation file(s) included."
 	fi
-}
 
-elisp-disable-elc() {
-	elisp-common_pkg_setup
-	if [ -n "$ELISP_DISABLE_ELC" ]
-	    then
-	    cd ${D}
-	    for i in `find . -name '*.elc' -print`
-	    do
-		rm -f $i
-	    done
+	if [ "${firstrun}" ]; then
+		echo
+		while read line; do einfo "${line:- }"; done <<-EOF
+		All site initialisation for Gentoo-installed packages is added to
+		/usr/share/emacs/site-lisp/site-gentoo.el; site-start.el is not
+		managed by Gentoo. You are responsible for all maintenance of
+		site-start.el if there is such a file.
+
+		In order for this site initialisation to be loaded for all users
+		automatically, you can add a line like this:
+
+		(require 'site-gentoo)
+
+		to /usr/share/emacs/site-lisp/site-start.el. Alternatively, that line
+		can be added by individual users to their initialisation files, or,
+		for greater flexibility, users can load individual package-specific
+		initialisation files from /usr/share/emacs/site-lisp/site-gentoo.d/.
+		EOF
+		echo
 	fi
-}
 
-EXPORT_FUNCTIONS pkg_setup
+	if [ "${obsolete}" ]; then
+		echo
+		while read line; do ewarn "${line}"; done <<-EOF
+		Site-initialisation files of Emacs packages are now installed in
+		/usr/share/emacs/site-lisp/site-gentoo.d/. We strongly recommend
+		that you use app-admin/emacs-updater to rebuild the installed
+		Emacs packages.
+		EOF
+
+		# Kludge for backwards compatibility: During pkg_postrm, old versions
+		# of this eclass (saved in the VDB) won't find packages' site-init
+		# files in the new location. So we copy them to an auxiliary file
+		# that is visible to old eclass versions.
+		for sf in "${sflist[@]}"; do
+			[ "${sf%/*}" = "${ROOT}${SITELISP}/site-gentoo.d" ] \
+				&& cat "${sf}" >>"${ROOT}${SITELISP}"/00site-gentoo.el
+		done
+	fi
 
-# Local Variables: ***
-# mode: shell-script ***
-# tab-width: 4 ***
-# indent-tabs-mode: t ***
-# End: ***
+	# cleanup
+	rm -f "${tmpdir}"/site-{gentoo,start}.el
 
+	return 0
+}
